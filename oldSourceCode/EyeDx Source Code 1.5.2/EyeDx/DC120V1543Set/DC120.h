/**************************************************************************************	Kodak Digital Camera DC120 Software Developer's Kit           		        	***  © Copyright Eastman Kodak Company 1996-1999.  All Rights Reserved.				*************************************************************************************//****************************************************************************************	DC120.h (for application)**		The SDK interface provides three levels of support, generic camera support,**		standard still camera support and full camera support for each model. The**		generic camera support is intended to support basic camera functionally that**		is common to all digital cameras. Full camera support allows the application**		to control all of the functionality available on each camera model.****		This file defines the entry points of the functions that are the application**		programming interface (API) for the Kodak Digital Camera Software Developer's**		Kit.****  AUTHORS:****		Futoshi Kitayama, Eastman Kodak Asia-Pacific R&D Center****		Since V1542 - Takeshi Domen, Eastman Kodak Japan R&D Center****  CREATION DATE:****		Oct./18/1996****  MODIFICATION HISTORY:****		Feb./27/'97		This is 1.0 version.**		Apr./28/'97		This is 1.0.2 version.**		Jun./27/'97		This is 1.0.4 version.**		Jul./30/97		This is 1.1 version.**		Oct./15/97		This is 1.5 version.**		June./10/98		This is 1.54 version.**		Jan./7/99		This is 1.5.4.1 version.**		Mar./19/99		This is 1.5.4.2 version.**************************************************************************************/#ifndef _DC120_SDK_LIB_#define _DC120_SDK_LIB_#ifndef WINDOWS#define MACINTOSH#endif#ifndef SDK_COMMON_HEADER#define SDK_COMMON_HEADER#ifdef MACINTOSH//****************************************/// 	Header Incuding Process/*****************************************/#include <Types.h>#include <Memory.h>#include <String.h>#include <Time.h>#include <StdLib.h>#include <OSUtils.h>#include <Devices.h>#include <Serial.h>#define	HUGE#define	FAR#define	Pascal#define	huge#define	fartypedef	Handle			HANDLE;typedef	Ptr				DCB;typedef	unsigned long	DWORD; typedef unsigned short	WORD;typedef	unsigned int	UINT;typedef	Ptr				LPSTR;#define Far#define Huge#define	CallBack		pascaltypedef unsigned char	UCHAR;typedef short			SHORT;typedef unsigned short	USHORT;typedef long			LONG;typedef unsigned long	ULONG;typedef	char Far*		LPChar;typedef UCHAR Far*		LPByte;typedef UCHAR Huge*		HPByte;typedef USHORT Huge*	HPWord;typedef void *			LPVOID;typedef	char FAR *				CHARPTR;typedef	char HUGE *				HCHARPTR;typedef	unsigned char HUGE *	HUCHARPTR;typedef	void FAR *				VOIDPTR;typedef	long *					LPLONG;typedef	unsigned char FAR *		UCHARFARPTR;typedef Boolean			BOOL;#define FALSE			false#define TRUE			true#define	Byte 			UCHAR#define	Word 			USHORT#define	DWord 			ULONG#endif     // of ifdef MACINTOSH#ifdef WINDOWS//****************************************/// 	Header Incuding Process/*****************************************/#include <windows.h>#ifndef WIN32#include <toolhelp.h>#endif#include <stdio.h>#include <string.h>#include <time.h>#include <malloc.h>#ifdef WIN32typedef unsigned long   DWORD;typedef unsigned short  WORD;typedef unsigned int    UINT;#define HUGE			#define Far				#define Huge			#define	CallBack		pascal#define huge			#define far				#define	__export#else // WIN16#define HUGE          __hugetypedef unsigned long   DWORD;typedef unsigned short  WORD;typedef unsigned int    UINT;#define Far				__far#define Huge			__huge#define	CallBack		__far __pascal#endif // of WIN16typedef unsigned char   UCHAR;typedef short           SHORT;typedef unsigned short  USHORT;typedef unsigned long   ULONG;typedef char Far*       LPChar;typedef UCHAR Far*      LPByte;typedef UCHAR Huge*     HPByte;typedef USHORT Huge*    HPWord;typedef	short					OSErr;typedef	char FAR *				CHARPTR;typedef	char HUGE *				HCHARPTR;typedef	unsigned char HUGE *	HUCHARPTR;typedef	void FAR *				VOIDPTR;typedef	unsigned char FAR *		UCHARFARPTR;#define Byte            UCHAR#define Word            USHORT#define DWord           ULONG#endif     // of ifdef WINDOWS#ifdef WIN32#define		CREATE_SDK_DLL	0#if	CREATE_SDK_DLL	#define SDKLIBAPI __declspec(dllexport)#else#define SDKLIBAPI __declspec(dllimport)#endif#else#define SDKLIBAPI#endif#endif	// of SDK_COMMON_HEADER#ifdef WINDOWS#ifdef WIN32#define	DCSDKVersion			0x0154	// Compatibility code#else#define	DCSDKVersion			0x0154	// Compatibility code#endif#endif#ifdef MACINTOSH#define	DCSDKVersion			0x0154	// Compatibility code#endif#define	DCFirstPort				1		// This is used DCOpenCamera#define	DCLastPort				2		// This is used DCOpenCamera#define	DCCamIDLength			32+1	// This is used allocation for CamId in										// DCCamera and DCConfig structures.#define DCNoAlbum				(-1)#define DCRootAlbum				0#define DCJPEGTempSize			1000000L//***********************************************************************************// Error Codes Returned by the SDK//***********************************************************************************#define	DC_NoErr				0		// Normal successful completion.#define	DC_BadArgError			-1000	// Invalid call parameter found.#define	DC_BadCloseError		-1001	// Error closing the driver. First close the										// open camera.#define	DC_CameraNotConnected	-1002	// Attempted to open a camera not connected										// to the host.#define	DC_CameraNotEmpty		-1021	// The current operation could not be comple-										// ted because										// the camera contained pictures. The pictur-										// es in the camera must first be deleted 										// before the operation can be executed.#define	DC_CameraFunctionNotSupported	-1003	// This functionality is not support-												// ed by the current opened camera												// type.#define	DC_CancelCallback		-1004	// Operation terminated by callback function.#define	DC_CannotHandleCameraType	-1023	// Current SDK does not handle the specified											// camera type.#define	DC_CardNotFound			-1005	// Operation requires the removable memory										// card, but none was found in the camera.#define	DC_CommunicationError	-1006	// Error communicating with the camera.#define	DC_FunctionNotSupported	-1024	// This function is not supported by this										// system.#define	DC_ImageProcessError	-1009	// Error occurred during image processing.										// Check for invalid operations.#define	DC_InvalidFWError		-1010	// Attempted to download firmware that was										// incompatible with the current camera.#define	DC_MallocError			-1011	// Unable to allocate required memory.#define	DC_MemoryFullError		-1022	// The camera is unable to take picture beca-										// use the image memory is full.						#define	DC_AlbumFullError		-1026	// The camera is unable to take picture beca-										// use the album number is full.#define	DC_NotOpenError			-1013	// Attempted to camera or driver before it										// was open.#define	DC_NotROMMode			-1014	// Camera is not in its ROM mode.#define	DC_ReOpenError			-1016	// Unable to open because it is already open.										// Please close first.#define	DC_ROMModeError			-1017	// Unable to complete the command because the										// camera is in ROM mode.#define	DC_ROMModeOpen			-1018	// Returned by DCOpenCamera if the camera was										// already in ROM mode. This tells that appl-										// ication that the camera is open, but the										//  only SDK functions that can be called are										// DCCloseCamera, DCProcNativePicture,										// DCGetNativePictInfo, DCGetImageProcessing										// and DCSetImageProcessing.#define	DC_SDKVersionError		-1019	// Compatibility error while opening the										// driver.#define	DC_SpecificSDKError		-1025	// Returned by DCOpenCamera if the specific										// SDK can not load into the machine menory										// or does not exist specific SDK in required										// directory/folder.#define	DC_SystemError			-1020	// General low-level operating system error										// found.//***********************************************************************************// Camera data structures//***********************************************************************************//***********************************************************************************// Data Structures for Generic Camera Support//***********************************************************************************//**********************************// Enumerated Data Type Definitions//**********************************// DCCameraType is used to identify the type of camera that is opened by// DCOpenCamera.typedef	enum{	DCNoCamera			= 0,		// A physical camera is not connected. This is									// used for decompressing files from disk without									// a camera.	DCGenericCamera		= 1,		// The camera is supported as a generic camera.									// This is the simplest type of camera model, and									// it should be used by applications that only									// want to capture and retrieve images without									// changing the camera configuration. It can also									// be set by DCOpenCamera to support new cameras									// that are not known by the application.	DC20				= 102,		// The camera is a Kodak DC20.	DC25				= 103,		// The camera is a Kodak DC25.	DC40				= 100,		// The camera is a Kodak DC40.	DC50				= 101,		// The camera is a Kodak DC50.	DC120				= 104		// The camera is a Kodak DC120. d5++ added; amada} DCCameraType, FAR *DCCameraTypePtr;// DCPortNum is used by DCOpenCamera to connect to the camera.typedef	enum{	DCPortAuto			= 0,		// If this value set by the application, the DC20									// SDK searches the communication port to the									// camera automatically.	DCPortNum1,						// Number port is 1.	DCPortNum2,						// Number port is 2.	DCPortNum3,						// Number port is 3 that is only for Windows.	DCPortNum4						// Number port is 4 that is only for Windows.} DCPortNum;// DCBitRate is used by DCOpenCamera to connect to the camera.typedef	enum{	DCBitRateAuto		= 0,		// If this value sets by the application, the									// DC20 SDK searches the maximum communication									//  bit rate to the camera automatically.	DCBitRate9600		= 96,		// Communication bit rate is 9600bps.	DCBitRate19200		= 192,		// Communication bit rate is 19200bps.	DCBitRate38400		= 384,		// Communication bit rate is 38400bps.	DCBitRate57600		= 576,		// Communication bit rate is 57600bps.	DCBitRate115200		= 1152,		// Communication bit rate is 115200bps. For Maci-									// ntosh, this is N/A(T.B.D).	DCBitRate230400		= 2304		// Communication bit rate is 230400bps. For Maci-									// ntosh, this is N/A(T.B.D).} DCBitRate;// DCImgType is used in the DCImgProcData structure to identify the type of output// image that will be created by the functions DCGetCameraPicture,// DCPreviewGetPicture and DCGetNativePicture.typedef	enum{	DCGrayImage8		= 0,		// The output is an 8-bit grayscale image.	DCRGBImage24,					// The output is a 24-bit RGB image.	DCRGBImage32					// The output is a 32-bit RGB Image.} DCImgType;// DCRotateImg is used in the DCImgProcData structure to define the amount of// rotation that will be applied to any retrieved image.typedef	enum{	DCRotate0			= 0,		// The output image is not rotated.	DCRotate90,						// The output image is rotated 90 degrees counter									// -clockwise.	DCRotate180,					// The output image is rotated 180 degrees									// counter-clockwise.	DCRotate270,					// The output image is rotated 270 degrees									// counter-clockwise.	DCUsePictOrientation			// The output image is automatically rotated to									// the orientation stored in the image. Images									// created by the DC20 camera is always set to									// DCRotate0, but applications can change the									// orientation and store it in a valid native									// format.} DCRotateImg;// DCWBMode is used in DCImgProcData to define CRT characteristics. If the CRT chara-// cteristics are properly defined, the image processing software in the SDK will do// a better job of recreating the captured image on the output display.typedef enum {	DCWBAuto		= 0,			// Auto white balance adjustment.	DCWBDayLight,					// Daylight white balance adjustment.	DCWBIndoor,						// Indoor white balance adjustment.	DCWBFluorescent,				// Fluorescent white balance adjustment.	DCWBNone,						// No white balance adjustment. If the application									// uses this setting, the SDK uses 1.0 value for									// all three(red, green and blue) white balance									// adjustment gain values.	DCWBUseManual					// Use manual white balance adjustment. If the									// application uses this setting, the SDK uses 1.0									// value for all three(red, green and blue) white									// balance adjustment gain values as default.} DCWBMode;// DCWBData is used in DCImgProcData and DC120PictInfo structures to define a white// balance gain adjustment value;typedef struct {//+d5 changed	double	WBGainR;				// Red for white balance gain.	double	WBGainG;				// Green for white balance gain.	double	WBGainB;				// Blue for white balance gain.//-d5 changed} DCWBData;// DCProgressStatus is used by the DCProgressCB functions to describe the reason for// the call.typedef	enum{	DCProgressInit	= 0,			// Tells the application to create a status									// indicator display.	DCProgressUpdate,				// Tells the application to update the status									// indicator display.	DCProgressEnd,					// Tells the application to close the status									// indicator									// display.	DCProgressIncomplete			// Tells the application to terminate incomplete-									// ly and to									// close the status indicator display.} DCProgressStatus;// DCProgressType is used by the DCProgressCB functions to describe the reason for// the call.typedef	enum{	DCTransferImage	= 0,				// Tells the application to transfer the image									// from the camera.	DCImageProcess					// Tells the application to process image.} DCProgressType;// DCCamMemType is used to specify the storage of the picture.// when calling DCTakePicture, DCDeletePicture, DCGetCameraPicture,// DCGetCameraPictInfo and DCGetNativePicture.typedef	enum{	DCCameraMemory	= 0,					// Picture is on camera internal memory.	DCPCCard						// Picture is on PC card in the camera slot.} DCCamMemType;//+d3 added// DCJPEGCompLevel is used by the DCGetCameraPictureAsJPEG and DCGetNativePictureAsJPEG// functions to describe the reason for the call.typedef	enum{// f1c2++; amada	DCJPEGHighQuality		= 0,		// The SDK creates JPEG image as a high quality	DCJPEGMediumQuality,				// The SDK creates JPEG image as a medium quality	DCJPEGLowQuality					// The SDK creates JPEG image as a low quality// f1c2--} DCJPEGCompLevel;//-d3 added//*********************// Symbols Definitions//*********************// These symbols define valid parameters for deleting pictures from the camera. These// can be used in the DCDeletePicture function.#define	DCDeleteAll			-1// Following symbol is for copying all pictures in Camera memory to PC card. These// can be used in the DCCopyMemToCard function.#define	DCCopyAllImages		-1#ifndef WINDOWS#if defined(powerc) || defined (__powerc) || defined(__POWERPC__)#pragma options align=power#endif#endif//******************************// Function Pointer Definitions//******************************// DCProgressProc is a function pointer that is used as a callback to inform the// application of the progress of the current operation. DCProgressProc returns TRUE// if the operation should continue, and  FALSE if the operation should terminate// because of an error or user abort.#ifdef MACINTOSHtypedef pascal BOOL (FAR *DCProgressProc)(#endif#ifdef WINDOWStypedef BOOL (FAR PASCAL *DCProgressProc)(#endif	DCProgressStatus	Status,			// Indicates the reason for the call(See										// DCProgressStatus)	short				PercentComplete,// The percentage of the current operation										// that been completed. This number is in the										// range of [0...100]. This is used for										// DCProgressUpdate actions only.	DCProgressType		Type,			// Indicates the reason for the call(see										// DCProgressType).	long				RefCon			// Reference constant that is supplied by the application in the										// DCProgressCB structure. This is useful in multithreaded										// applications to identify the thread that made the call.	);// DCImageIOProc is a function pointer that can be used as a callback to customize// image I/O for the image retrieve routines.#ifdef MACINTOSHtypedef pascal BOOL (FAR *DCImageIOProc)(#endif#ifdef WINDOWStypedef BOOL (FAR PASCAL *DCImageIOProc)(#endif	HCHARPTR		Buffer,			// Starting memory address for image I/O									// transfer.	long			Offset,			// Position in the input or output stream of the									// current transfer. For image output operations,									// consecutive calls to *DCProgressIOProc will									// pass data sequentially. In other words, the									// last byte of the previous call is followed by									// the first byte of the current call.									// When reading native mode image data, the SDK									// uses this parameter to move to more efficient-									// ly parse the input TIFF/EP file format. The									// application must read data starting at the									// correct offset in the input data.	long			Length,			// The number of bytes to transfer.									// The minimum value of this field is defined in									// the DCPictInfo structure for the image being									// retrieved.	long			RefCon			// Reference constant that is supplied by the application in the									// DCProgressCB structure. This is useful in multithreaded									// applications to identify the thread that made the call.	);//**********************************// Structured Data Type Definitions//**********************************// The DCDriver contains all of the system dependent information for opening a driver// and connecting it to an application.// Application does not need to know the field of this structure.typedef struct{	DCCameraType	CamType;			// A camera type that is supported by the SDK.// f1c8++; amada	DCCameraType	SpecificCamType;	// DCOpenDriver sets the same value as CamType.										// Then DCOpenCamera sets the kind of camera.// f1c8--	BOOL			DriverOpenFlag;		// DCOpenDriver sets TRUE and DCCloseDriver										// sets FALSE.	BOOL			CameraOpenFlag;		// DCOpenCamera sets TRUE and DCCloseCamera										// sets FALSE.	BOOL			ROMModeFlag;		// If TRUE, the camera is in ROM mode} DCDriver, FAR *DCDriverPtr;// DCCamera contains information specific to an open camera. It is used to identify// which camera should be used.typedef struct{	DCDriverPtr		Driver;				// A pointer to an open DCDriver structure.										// This field should be initialized before										// calling DCOpenCamera.	DCPortNum		PortNum;			// Try to connect to a camera on the port										// indexed by this value. The types of ports										// available on a system will vary. It is										// also possible to open a camera without										// physically attaching a camera to the host										// computer by PortNum = -1. This is useful										// when decompressing a stored native image.										// This field should be initialized before										// calling DCOpenCamera.	DCCameraType	CamType;			// The type of camera opened. This field										// should be initialized before calling										// DCOpenCamera.	CHARPTR			CamId;				// A pointer to a text string that identifies										// the camera. This string must be allocated										// by the application, and it must be at										// least DCCamIDLength bytes in length. This										// field is initialized inside of										// DCOpenCamera.	VOIDPTR			InternalUseOnly;	// The application should never access this										// field. It is used by the SDK library to										// store camera specific internal data.	DCCameraType	SpecificCamType;	// If the type is DCGenericCamera, CamTypes										// must be set by specific camera type.										// SpecificCamType is ignored by the SDK if										// the CamType is rather than										// DCGenericCamera.	DCBitRate		BitRate;			// Try to connect to a camera with this										// value. This field should be initialized										// before calling DCOpenCamera. The SDK also										// sets this field with actual										// connected bit rate to the camera.} DCCamera, FAR *DCCameraPtr;// DCXYChroma is used in the DCCRTData structure to define a CRT display phosphor and// white-point chromaticity value.typedef struct{	double	XChroma;				// X chromaticity value.	double	YChroma;				// Y chromaticity value.} DCXYChroma;// DCCRTData is used in DCImgProcData to define CRT characteristics. If the CRT char-// acteristics are properly defined, the image processing software in the SDK will do// a better job of recreating the captured image on the output display.typedef struct{	DCXYChroma	RedChroma;			// Red phosphor characteristics	DCXYChroma	GrnChroma;			// Green phosphor characteristics	DCXYChroma	BluChroma;			// Blue phosphor characteristics	double		Gamma;				// CRT gamma value	double		WhiteTemp;			// CRT white point color temperature} DCCRTData, FAR *DCCRTDataPtr;// DCImgProcData is used by DCGetImageProcessing and DCSetImageProcessing to define// the image processing requirements for the images retrieved from DCGetCameraPicture// and DCProcNativePicture. The values defined in this structure are applied in the// host computer after the image is retrieved from the camera.typedef struct{//****THREAD*******THREAD**********THREAD*********THREAD*******// Because of VC++4.0 bug, the first item of the field should not be ENUM//   if the storage class is __declspec(thread).  #ifndef WIN32	DCImgType		ImageType;		// This defines the format of future output									// images.									// Default for PCs = DCRGBImage24									// Default for Macs = DCRGBImage32#endif	BOOL			RotateFlag;		// Rotating an image requires the application of									// a full frame buffer. Applications with limited									// memory may not want to allocate this buffer.									// This flag is used to enable or disable the									// allocation of the buffer.									// TRUE = Rotation enabled									// FALSE = Rotation disabled									// Default for DOS environments = FALSE									// Default for all other systems = TRUE	DCRotateImg		RotateAngle;	// The angle to rotate the image. This is ignored									// if rotation is disabled.									// Default = DCRotate0#ifdef WIN32	DCImgType		ImageType;		// This defines the format of future output									// images.									// Default for PCs = DCRGBImage24									// Default for Macs = DCRGBImage32#endif//****THREAD*******THREAD**********THREAD*********THREAD*******	BOOL			UseDefaultCRT;	// The SDK includes default CRT tables that are									// system dependent. The application can use the									// default tables or define its own CRT tables.									// This flag is used to enable or disable the									// default tables.									// TRUE = Use default CRT tables									// FALSE = Calculate new CRT tables									// Default = TRUE	DCWBMode		WhiteBalance;	// White balance adjustment	DCWBData		WBManual;		// Structure of white balance gain table. This is									// available when WhiteBalance is DCWBUseManual.	DCCRTData		CRTData;		// Structure of CRT tables to use for color corr-									// ection.									// This is ignored if the default CRT tables are									// being used.} DCImgProcData, FAR *DCImgProcDataPtr;// DCProgressCB is a structure that defines a callback routine that can be used by// DCGetCameraPicture, DCGetNativePictue and DCProcNativePictue.typedef struct{	DCProgressProc	ProgFunc;		// Pointer to the progress callback function. If									// progress information is not needed, this									// pointer can be set to NULL.//+d6p3 added	long			RefCon;			// Reference constant that will be passed to the ProgFunc.									// This is useful in multithreaded applications to identify the									// thread that made the call.//-d6p3 added} DCProgressCB, FAR *DCProgressCBPtr;// DCImageIOCB is used by DCGetCameraPicture, DCProcNativePicture, DCGetNativePicture// and DCGetNativePictInfo to give the application control over the image I/O and the// amount of memory allocated.typedef struct{	HCHARPTR		Buffer;			// Pointer to a buffer to use for I/O operation.	long			BufferSize;		// Number of bytes to transfer.	DCImageIOProc	IOFunc;			// Callback function for banded processing.//+d6p3 added	long			RefCon;			// Reference constant that will be passed to the IOFunc. This									// is useful in multithreaded applications to identify the thread									// that made the call.//-d6p3 added} DCImageIOCB, FAR *DCImageIOCBPtr;// DCOutputWindow is used by DCGetOutputWindow and DCSetOutputWindow to define a cus-// tomized output window for images retrieved from DCGetCameraPicture and// DCProcNativePicture. This structure is used to define an output window that is a// subset of the full image captured by the camera. If this function is not called,// the output window will assume default settings(see below).typedef struct{	short	HOffset;				// Defines the horizontal offset, in pixels, from									// the left edge of the captured image to the									// beginning of the output window.									// Default value = 0.	short	VOffset;				// Defines the vertical offset, in pixels, from									// the top edge of the captured image to the beg-									// inning of the output window.									// Default value = 0.	short	Width;					// Defines the width of the output window.									// 0 = Use the full, rotation-dependent width of									// the selected image.									// Default value = 0.	short	Height;					// Defines the height of the output window.									// 0 = Use the full, rotation-dependent height of									// the selected image.									// Default value = 0.	long	RowBytes;				// Defines the number of bytes between the begin-									// ning of one row of image data and the beginni-									// ng of the next row.									// 0 = Use the machine dependent default value.									// Default for 8 bit images = Width of the									// highresolution image with DCRotate0									// Default for Mac RGB images = Width of the									// highresolution image with DCRotate0 * 4	long	ThumbRowBytes;			// Defines the number of bytes between the begin-									// ning of one row of thumbnail image data and									// the beginning of the next row.									// 0 = Use the machine dependent default value.									// Default for 8 bit images = Width of the									// thumbnail image with DCRotate0									// Default for Mac RGB images = Width of the									// thumbnail image with DCRotate0 * 4} DCOutputWindow, FAR *DCOutputWindowPtr;// DCTime is used to store time information in the SDK. DCTime is defined with the// same field names as the ANSI C tm structure defined in time.h. It is designed to// allow DCTime to be easily copied to the ANSI C, but compiler specific, tm structu-// re so that it can be used to call standard ANSI C functions such as mktime, ascti-// me, and strftime.typedef	struct{	short		tm_sec;				// Seconds after the minute[0..59]	short		tm_min;				// Minutes after the hour[0..59]	short		tm_hour;			// Hours since midnight[0..23]	short		tm_mday;			// Day of the month[1..31]	short		tm_mon;				// Months since January[0..11]	short		tm_year;			// Years since 1900.	short		tm_wday;			// Days since Sunday[0..6]. This field is ignored									// when calling DCSetConfig to set the time in									// the camera.	short		tm_yday;			// Days since January[0..365] This field is									// ignored when calling DCSetConfig to set the									// time in the camera.	short		tm_isdst;			// Daylight Savings Time flag.  									// 1 = Daylight Savings Time in effect.									// 0 = Daylight Savings Time not in effect.									// -1 = Unknown.} DCTime, *DCTimePtr;// DCStatus contains status information that is common to all PC cameras. It is used// by DCGetStatus for generic camera support.typedef struct{	DCTime	Time;					// Current Time.	ULONG	FirmwareVersion;		// Version of camera firmware.	short	NumPictTaken;			// Number of pictures in the camera.	short	NumPictRemaining;		// Number of pictures that can still be taken and									// stored in the camera.	short	MemPictTaken;			// Number of pictures in the camera memory.	short	MemPictRemaining;		// Number of pictures that can still be taken and									// stored in the camera memory.	short	CardPictTaken;			// Number of pictures in the camera card.	short	CardPictRemaining;		// Number of pictures that can still be taken and									// stored in the camera card.	short	ThumbWidth;				// Width of a thumbnail if the current camera									// settings are used.	short	ThumbHeight;			// Height of a thumbnail if the current camera									// settings are used.	long	PictWidth;				// Width of a picture if the current camera									// settings are used.	long	PictHeight;				// Height of a picture if the current camera									// settings are used.} DCStatus, FAR *DCStatusPtr;// DCConfig contains generic configuration information that is common to all PC// cameras. It is used by DCGetConfig and DCSetConfig for generic camera support.// Most configuration fields are camera specific, so they are included in the camera// specific data structures.typedef struct{	DCTime		Time;				// Current time stored in the camera.	CHARPTR		CamId;				// A pointer to a text string that identifies the									// camera. This string must be allocated by the									// application, and it must be at least									// DCCamIDLength bytes in length.} DCConfig, FAR *DCConfigPtr;// DCPictInfo contains dimensions and compressed size of a specified picture along// with the thumbnail for the picture. This information can be used for buffer alloc-// ation when retrieving pictures from a camera.typedef struct{	short		PictNumber;			// Picture number of the image in the camera.									// -1 = number not known.	short		ThumbWidth;			// Thumbnail width.(pixels)	short		ThumbHeight;		// Thumbnail height.(pixels)	HCHARPTR	ThumbPtr;			// Pointer to the thumbnail image. application									// must allocate and deallocate for this pointer.									// The size of this pointer is depended by									// DCSetOutputWindow() function.									// NULL = thumbnail image not requested or avail-									// able.	long		PictWidth;			// Picture width (pixels)	long		PictHeight;			// Picture height (pixels)	long		PictCompSize;		// Picture compressed size (bytes)	long		PictMinBufIn;		// Minimum buffer size to allocate for image data									// input.	long		PictMinBufOut;		// Minimum buffer size to allocate for image data									// output.	DCTime		TimeStamp;			// Time when the picture was taken.} DCPictInfo, FAR *DCPictInfoPtr;//***********************************************************************************// Data Structures for DC40 Digital Camera Support//***********************************************************************************#define	DC40ThumbnailWidth				96#define	DC40ThumbnailHeight				64//**********************************// Enumerated Data Type Definitions//**********************************// DC40ExposureMode is used to control the current exposure mode of the DC40 camera.// The exposure is incremented in steps of 1/2 f-stop.typedef enum{	DC40ExpPlus2 = 1,	// Add 1.0 f-stop.	DC40ExpPlus1,		// Add 0.5 f-stop.	DC40ExpNormal,		// Use normal exposure.	DC40ExpMinus1,		// Subtract 0.5 f-stop.	DC40ExpMinus2		// Subtract 1.0 f-stop.} DC40ExposureMode;// DC40TimerMode is used to control current timer mode of the DC40 camera. The camera// can take a picture camera immediately, wait 10 seconds or wait 20 seconds.typedef	enum{	DC40TimerNoDelay	= 0,		// Take a picture immediate when the shutter									// relese is pressed.	DC40Timer10Sec,					// Wait until 10 seconds after the shutter release									// is pressed to take a picture.	DC40Timer20Sec					// Wait until 20 seconds after the shutter release									// is pressed to take a picture.} DC40TimerMode;// DC40FlashMode is used to control the current flash mode of the DC40 camera. The// camera can automatically flash as needed, always flash, or never flash.typedef	enum{	DC40FlashAuto		= 0,		// The camera will automatically determine if it									// should flash.//+d4 changed	DC40FlashOn,					// The camera will flash.//+d4 changed	DC40FlashOff					// The camera will not flash.} DC40FlashMode;// DC40PictureMode is used to control the image capture mode of the camera. The DC40// can capture two types of images, low compression images and high compression images.typedef	enum{	DC40HighResolution	= 0,		// With this setting, the camera will create a									// higher quality image, but it will require more									// memory in the camera and more disk space when									// the image is stored.	DC40Snapshot					// With this setting, the camera will compress									// the image to a smaller size so that more images									// can be stored in the camera. The image quality									// of these images will be lower.} DC40PictureMode;// DC40BatteryStatus is returned by the SDK to the application as a DC40Status// information.typedef	enum{	DC40BatteryOK		= 0,		// The battery is full power condition. When the									// AC adapter is used, this value is returned to									// the application.	DC40BatteryWeak,				// The battery is at a low power condition.	DC40BatteryEmpty				// The battery is almost empty.} DC40BatteryStatus;//**********************************// Structured Data Type Definitions//**********************************// DC40Status holds all DC40 specific status information.typedef struct{	DC40BatteryStatus	BatteryLevel;		// One of the value of the DC40BatteryStatus											// definition.	BOOL				BatteryCharger;		// TRUE if charge is on.	short				HiResRemaining;		// Number of high resolution images that can											// be taken.	short				LoResRemaining;		// Number of low resolution images that can											// be taken.} DC40Status, FAR *DC40StatusPtr;// DC40Config holds all DC40 specific configuration information.typedef struct{	short				SleepTimeout;		// The number of seconds of inactivity that											// the camera will wait before going to sleep.	BOOL				AcknowledgeMode;	// Controls the response mode for camera											// communication.											// TRUE = Acknowledge mode, FALSE = Mute mode.	DC40ExposureMode	DefExpMode;			// Default exposure mode. This will be											// effective after the camera is turned off.											// When the camera is turned on, this value											// is copied to the ExpMode field.	DC40TimerMode		DefTimerMode;		// Default timer mode. This will be effective											// after the camera is turned off. When the											// camera is turned on, this value is copied											// to the TimerMode field.	DC40FlashMode		DefFlashMode;		// Default flash mode. This will be effective											// after the camera is turned off. When the											// camera is turned on, this value is copied											// to the FlashMode field.	BOOL				UpDownMode;			// Flag for toggle the camera between count											// up and count down mode.											// TRUE = Count up mode, FALSE = Count down											// mode.	DC40ExposureMode	ExpMode;			// The current exposure mode of the camera.											// See the definition of DC40ExposureMode											// for more information and a list of											// possible values.	DC40TimerMode		TimerMode;			// The current timer mode of the camera.											// See the definition of DC40TimerMode											// for more information and a list of											// possible values.	DC40FlashMode		FlashMode;			// The current flash mode of the camera.											// See the definition of DC40FlashMode											// for more information and a list of											// possible values.	BOOL				BeepButton;			// Controls whether the camera beeps when the											// function buttons are pushed.											// TRUE = Beep, FALSE = No beep.	BOOL				BeepEvent;			// Controls whether the camera beeps for											// "events".											// TRUE = Beep, FALSE = No beep.	BOOL				DeleteLast;			// Controls whether the "Delete Last Image"											// option is currently enabled or disabled.											// TRUE = Enabled, FALSE = Disabled.	BOOL				DeleteAll;			// Controls whether the Delete All Images"											// options is currently enabled or disabled											// in the camera stand alone mode.											// TRUE = Enabled, FALSE = Disabled.	DC40PictureMode		PictMode;			// Controls the picture mode for the camera.											// See the definition of DC40PictureMode											// for more information and a list of											// possible values.	BOOL				ManualExpFlag;		// Controls whether the camera is in manual											// exposure mode or automatic exposure with											// compensation. If manual exposure is											// selected, the ManualExpTime and											// ManualFNumber fields of this structure											// are active. If automatic exposure is											// selected, the ExpMode field is active.											// TRUE = Manual exposure, FALSE = Automatic											// exposure	long				ManualExpTime;		// When ManulExpFlag = TRUE, this field controls											// the exposure time in microseconds.											// 20,000,000 = 20 seconds = The maximum exposure											// time for DC40.											// Not all exposure times are possible, so if an											// invalid tlime is specified, it will automatically											// be rounded to the nearest value time.											// To find the resulting exposure time, the											// applicaiton will have to call DCGetConfig.	short				ManualFNumber;		// When ManulExpFlag = TRUE, this field controls											// the F-Number of the camera for future image											// captures. The value of this field is 10											// times the desired F-Number.											// Example: 40 = f4.0											// Valid F-Numbers for the camera are f2.8, f3.0,											// f3.5, f4.0, f4.9, f6.3, f9.0, and f16.0. If											// other values are specified, the SDK will set											// to 28.} DC40Config, FAR *DC40ConfigPtr;                                // DC40PictInfo holds all DC40 camera specific picture information.typedef struct{	long				ExposureTime;		// Exposure time for this picture in microseconds.	BOOL				FlashUsed;			// Flag to tell whether a flash was used to take											// picture.	short				FNumber;			// 10 *the F-Number of the camera. The application											// should divide this number by 10 to calculate											// the actual F-Number.//+d4 changed	DCRotateImg			PictOrientation;	// One of the value of the DCRotateImg definition.//-d4 changed} DC40PictInfo, FAR *DC40PictInfoPtr;//***********************************************************************************// Data Structures for DC50 Digital Camera Support//***********************************************************************************// a1c4++; amada#define	DC50ThumbnailWidth				96#define	DC50ThumbnailHeight				64// a1c4--//**********************************// Enumerated Data Type Definitions//**********************************// DC50TimerMode is used to control taking a picture to the DC50 camera immediately// or wait 10 seconds.typedef	enum{	DC50TimerNoDelay	= 0,		// Take a picture immediately.	DC50Timer10Sec					// Take a picture after 10 seconds.} DC50TimerMode;// DC50FlashMode is used to control the current flash mode of the DC50 camera. The// camera can automatically flash as needed, always flash, or never flash.typedef	enum{	DC50FlashAuto		= 0,		// The camera will automatically determine if it									// should flash.	DC50FlashOn,					// The camera will flash.	DC50FlashOff					// The camera will not flash.} DC50FlashMode;// DC50PictureMode is used to control the image capture mode of the camera. The DC50// can capture three types of images, Best mode, Better mode and Good mode.typedef	enum{	DC50BestQuality		= 0,		// With this setting, the camera will create a									// best possible image quality and the largest									// image files.	DC50BetterQuality,				// With this setting, the camera will create									// images that are the same quality as the									// DC40 High Resolution mode.	DC50GoodQuality					// With this setting, the camera will create									// images that are the same quality as the									// DC40 Snapshot mode. This will create									// the smallest possible image files.} DC50PictureMode;// DC50BatteryStatus is returned by the SDK to the application as a DC50Status// information.typedef	enum{	DC50BatteryOK		= 0,		// The battery is full power condition. When the									// AC adapter is used, this value is returned to									// the application.	DC50BatteryWeak,				// The battery is at a low power condition.	DC50BatteryEmpty				// The battery is almost empty.} DC50BatteryStatus;// DC50ZoomPosition is returned by the SDK to the application as a DC50Config// information.typedef	enum{	DC50Zoom37mm		= 0,		// The zoom value is approximately 37mm.	DC50Zoom46mm,					// The zoom value is approximately 46mm.	DC50Zoom61mm,					// The zoom value is approximately 61mm.	DC50Zoom77mm,					// The zoom value is approximately 77mm.	DC50Zoom92mm,					// The zoom value is approximately 92mm.	DC50Zoom100mm,					// The zoom value is approximately 100mm.	DC50Zoom111mm					// The zoom value is approximately 110mm.} DC50ZoomPosition;// DC50FocusMode is used to control the focus of the lens. The camera can focus for// close-up pictures, or it can automatically focus using multiple zones or a// single zone.typedef enum{	DC50MultiZoneFocus	= 0,		// Automatically focus using multiple focus zones.	DC50SingleZoneFocus,			// Automatically focus using a single focus zone.	DC50CloseupFocus				// Focus for close-up pictures.} DC50FocusMode;//**********************************// Structured Data Type Definitions//**********************************// DC50Status holds all DC50 specific status information. Status information is data// that can be retrieved from the camera and cannot be changed by the application.typedef struct{	DC50BatteryStatus	BatteryLevel;		// One of the value of the DC50BatteryStatus											// definition.	BOOL				ACAdapter;			// TRUE if an AC adapter is connected.											// FALSE if an AC adapter is not connected or											// unknown.	BOOL				CardAvailable;		// TRUE if the PC card is inserted into the											// camera.											// FALSE if the PC card is not inserted into											// the camera.	short				MemFirstImageNum;	// Picture number in Camera memory.	short				MemNumberOfImages;	// Number of images in Camera memory. The valid											// picture number for pictures stored in Camera											// memory are MemFirstImageNum+MemNumberOfImages											// -1.	short				CardFirstImageNum;	// Picture number in PC card.	short				CardNumberOfImages;	// Number of images in PC card. The valid picture											// number for pictures stored in Camera memory											// are MemFirstImageNum+MemNumberOfImages-1.	short				LightValue;			// Measured light value.	unsigned short		ProgramStatus;		// This is not supported and always 0.	short				MemBestTaken;		// The number of best quality images current 											// stored in Camera memory.	short				MemBetterTaken;		// The number of better quality images current											// stored in Camera memory.	short				MemGoodTaken;		// The number of good quality images current											// stored in Camera memory.	short				MemBestRemaining;	// The number of additional best quality images											// that can be stored in Camera memory.	short				MemBetterRemaining;	// The number of additional better quality images											// that can be stored in Camera memory.	short				MemGoodRemaining;	// The number of additional good quality images											// that can be stored in Camera memory.	short				ATABestTaken;		// The number of best images currently stored on											// the PC card. If CardAvailable is FALSE, this											// field will be -1.	short				ATABetterTaken;		// The number of better images currently stored on											// the PC card. If CardAvailable is FALSE, this											// field will be -1.	short				ATAGoodTaken;		// The number of good images currently stored on											// the PC card. If CardAvailable is FALSE, this											// field will be -1.	short				ATABestRemaining;	// The minimum number of additional best quality											// images that can be stored on the PC card.											// If CardAvailable is FALSE, this field will be -1.	short				ATABetterRemaining;	// The minimum number of additional better quality											// images that can be stored on the PC card.											// If CardAvailable is FALSE, this field will be -1.	short				ATAGoodRemaining;	// The minimum number of additional good quality 											// images that can be stored on the PC card.											// If CardAvailable is FALSE, this field will be -1.	char				ATAVolumeName[12];	// The NULL-terminated name of the ATA volume.											// If CardAvailable is FALSE, this field will be -1.} DC50Status, FAR *DC50StatusPtr;// DC50Config holds all DC50 specific configuration information. Configuration information is// data that can be retrieved from the camera and can be changed and rewritten to the camera.typedef struct{	short				SleepTimeout;		// The range of valid values is 60..255.	DC50TimerMode		TimerDelay;			// One of the value of the DC50TimerMode definition.	DC50FlashMode		FlashMode;			// One of the value of the DC50FlashMode definition.	DC50PictureMode		PictQuality;		// One of the value of the DC50PictureMode definition.	DC50ZoomPosition	ZoomPosition;		// One of the value of the DC50ZoomPosition definition.	BOOL				ManualExpFlag;		// TRUE = Manual exposure mode.											// FALSE = Auto exposure with compensation.	long				ManualExpTime;		// The exposure time in microseconds.											// 20,000,000 = 20 seconds = The maximum exposure time.											// Any value between 5,700 and 20,000,000 can be stored											// when calling DCSetConfig, although it will be											// rounded to the nearest available supported value.											// To find the resulting exposure time, the applicaiton											// will have to call DCGetConfig.	short				ManualFNumber;		// F Number for the manual exposure. this is read only											// field. Automatically calculated by SDK.	short				AutoExpCompValue;	// For the DC50, the auto exposure compensation value											// is in the range from -7.5 E.V. to +7.5 E.V..	DC50FocusMode		FocusMode;			// One of the value of the DC50FocusMode definition.	short				ProgramMode;		// This is not supported and always 0.	BOOL				ManualExpUIFlag;	// Enable or disable manual exposure selection from the											// camera back panel LCD user interface.											// TRUE = the camera can select manual exposure mode											// from the LCD display on the camera. The manual											// exposure icon will be displayed after the exposure											// compensation value.											// False = The manual exposure icon on the LCD display											// is disabled which simplifies the LCD interface											// slightly.} DC50Config, FAR *DC50ConfigPtr;                                // DC50PictInfo holds all DC50 camera specific information about a specific picture.typedef struct{	DC50TimerMode		TimerMode;			// One of the value of the DC50TimerMode definition.	BOOL				FlashUsed;			// TRUE = Flash used.											// FALSE = Flash not used.	DC50FlashMode		FlashMode;			// One of the value of the DC50FlashMode definition.	DC50PictureMode		PictQuality;		// One of the value of the DC50PictureMode definition.	DC50ZoomPosition	ZoomPosition;		// One of the value of the DC50ZoomPosition definition.	BOOL				ManualExpFlag;		// TRUE = Manual exposure.											// FALSE = Automatic exposure.	long				ExposureTime;		// Exposure time for this picture in microseconds.	short				FNumber;			// 10 times the F-Number used for this picture.	DC50BatteryStatus	BatteryLevel;		// One of the value of the DC50BatteryStatus definition.	DCRotateImg			PictOrientation;	// One of the value of the DCRotateImg definition.	short				ProgramUsed;		// This is not supported and always 0.	DC50FocusMode		FocusMode;			// One of the value of the DC50FocusMode definition.	long				FocusPosition;		// Focus position in millimeters when the picture was											// taken. This value represents the distance from the											// camera to the subject.	short				LightValue;			// Measured light value when the picture was taken. The											// units for this value are millivolts(mV). This is the											// output of the CDS-cell used to measure the light level.	short				ExposureValue;		// Exposure value when the picture was taken.	short				AVData;				// "Flash-matic" value when the picture was taken.	char				ImageName[9];		// The name of the image. This is a NULL-terminated 8											// character DOS file name (without extension) of the											// stored image.} DC50PictInfo, FAR *DC50PictInfoPtr;//+d3 added// DC50PreviewInfo is used to give the application information about the image that will be// returned when DCPreviewGetInfo is called. This information can be used for buffer// allocation when retrieving images from the camera.typedef struct{	short			PictWidth;				// Preview picture width.(pixels)	short			PictHeight;				// Preview picture height.(pixels)	long			PictCompSize;			// Preview picture compressed size.(bytes)	long			PictMinBufIn;			// Minimum buffer size to allocate for image data input.	long			PictMinBufOut;			// Minimum buffer size to allocate for image data output.	DCImgType		PictType;				// Recommended type of image to be returned by											// DCPreviewGetPicture. The application must call											// DCSetImageProcessing to set the image type to this											// if it is desired. For DC50, the PictType is											// DCGrayImage8. If the current image type from											// DCGetImageProcessing is DCRGBImage24 or DCRGBImage32,											// then a RGB preview image will be returned by											// DCPreviewGetImage where red, green, and blue all have											// the same value.} DC50PreviewInfo, FAR *DC50PreviewInfoPtr;//+d3 added#ifdef __cplusplusextern "C" {#endif 						// __cplusplus#ifndef WINDOWS#if !(defined(powerc) || defined(__powerc) || defined(__POWERPC__))#pragma mpwc on				// at start of function declaration#endif#if defined(powerc) || defined(__powerc) || defined(__POWERPC__) || defined(__CFM68K__)#pragma import on#endif#endif// d5++ added for DC120; amada//***********************************************************************************// Definitions for DC120 Digital Camera Support//***********************************************************************************// a1c4++; amada#define	DC120ThumbnailWidth				80#define	DC120ThumbnailHeight			60// a1c4--#define DC120AvailableAlbumSize		(8*15)	// d6p2; amada#define DC120OneAlbumLength			15	// d6p2; amada#define DC120AlbumPictureSize		15	// d8p3; amada//**********************************// Enumerated Data Type Definitions//**********************************// DC120TimerMode is used to control taking a picture to the DC120 camera immediately// or wait 10 seconds.typedef	enum{	DC120TimerNoDelay	= 0,		// Take a picture immediately.	DC120Timer10Sec					// Take a picture after 10 seconds.} DC120TimerMode;// DC120FlashMode is used to control the current flash mode of the DC120 camera. The// camera can automatically flash as needed, always flash, or never flash.typedef	enum{	DC120FlashAuto		= 0,		// The camera will automatically determine if it									// should flash.	DC120FlashOn,					// The camera will flash.	DC120FlashOff					// The camera will not flash.} DC120FlashMode;// DC120PictureMode is used to control the image capture mode of the camera. The DC120// can capture three types of images, Best mode, Better mode and Good mode.typedef	enum{// b1c4++	DC120NoCompression		= 0,		// With this setting, the camera will create a									// best possible image quality and the largest									// image files.	DC120BestQuality,				// With this setting, the camera will create									// images that are the same quality as the									// DC40 High Resolution mode.	DC120BetterQuality,			// With this setting, the camera will create									// images that are ???									// 									// the smallest possible image files.	DC120GoodQuality				// With this setting, the camera will create									// images that are the same quality as the									// DC40 Snapshot mode. This will create									// the smallest possible image files.// b1c4--} DC120PictureMode;// DC120BatteryStatus is returned by the SDK to the application as a DC120Status// information.typedef	enum{	DC120BatteryOK		= 0,		// The battery is full power condition. When the									// AC adapter is used, this value is returned to									// the application.	DC120BatteryWeak,				// The battery is at a low power condition.	DC120BatteryEmpty				// The battery is almost empty.} DC120BatteryStatus;// DC120ZoomPosition is returned by the SDK to the application as a DC120Config// information.typedef	enum{	DC120Zoom37mm		= 0,		// The zoom value is approximately 37mm.	DC120Zoom46mm,					// The zoom value is approximately 46mm.	DC120Zoom61mm,					// The zoom value is approximately 61mm.	DC120Zoom77mm,					// The zoom value is approximately 77mm.	DC120Zoom92mm,					// The zoom value is approximately 92mm.	DC120Zoom100mm,					// The zoom value is approximately 100mm.	DC120Zoom111mm,					// The zoom value is approximately 110mm.// b1c5++; amada	DC120ZoomMacroPosition			// The zoom is macro setting. This is read-only									// and when the user sets the focus as									// DC120CloseupFocus, it is set automatically.// b1c5--} DC120ZoomPosition;// DC120FocusMode is used to control the focus of the lens. The camera can focus for// close-up pictures, or it can automatically focus using multiple zones or a// single zone.typedef enum{	DC120MultiZoneFocus	= 0,		// Automatically focus using multiple focus zones.	DC120SingleZoneFocus,			// Automatically focus using a single focus zone.	DC120CloseupFocus				// Focus for close-up pictures.} DC120FocusMode;// DC120DateFormat is used to decide the displaying format of// the date on camera back panel LCD. The camera shows date// on LCD with this setting.typedef enum {	DC120DayFirst	= 0,			// Date format is day/month/year (e.g., 3/11/97 for Nov.3 1997)	DC120MonthFirst,				// Date format is month/day/year (e.g., 11/3/97 for Nov.3 1997)	DC120YearFirst					// Date format is year.month.day (e.g., 97.11.3 for Nov.3 1997)} DC120DateFormat;// DC120OutputWidth is used to decide the width of the output image.typedef enum {	DC120OutputW1280	= 1280,		// Width of output image is 1280 pixels.	DC120OutputW960		= 960,		// Width of output image is 960 pixels.	DC120OutputW640		= 640,		// Width of output image is 640 pixels.	DC120OutputW320		= 320		// Width of output image is 320 pixels.} DC120OutputWidth;//**********************************// Structured Data Type Definitions//**********************************// DC120Status holds all DC120 specific status information. Status information is data// that can be retrieved from the camera and cannot be changed by the application.typedef struct{	DC120BatteryStatus	BatteryLevel;		// One of the value of the DC120BatteryStatus											// definition.	BOOL				ACAdapter;			// TRUE if an AC adapter is connected.											// FALSE if an AC adapter is not connected or											// unknown.	BOOL				CardAvailable;		// TRUE if the PC card is inserted into the											// camera.											// FALSE if the PC card is not inserted into											// the camera.	BOOL				CoverStatus;		// TRUE if the front cover of the camera is opened.											// FALSE if the front cover of the camera is closed											// and the camera cannot take a picture by DCTakePicture()											// function.	BOOL				FlashStatus;		// TRUE if the flash is charged.											// FALSE if the flash is not charged.	short				LightValue;			// Measured light value	short				MemNumImages;		// The number o fimages in Camera memory.// f1c2++; amada	short				MemNoCompRemaining;	// The number of additional no compression quality images											// that can be stored in Camera memory.	short				MemBestRemaining;	// The number of additional best quality images											// that can be stored in Camera memory.	short				MemBetterRemaining;	// The number of additional better quality images											// that can be stored in Camera memory.	short 				MemGoodRemaining;	// The number of additional good quality images											// that can be stored in Camera memory.// f1c2--	short				MemNumAlbums;		// The number of albums in Camera memory.	short				CardNumImages;		// The number of images in the PC card.// f1c2++; amada	short				CardNoCompRemaining;// The minimum number of additional no compression quality											// images that can be stored in the PC card.											// If CardAvailable is FALSE, this field is -1.	short				CardBestRemaining;	// The minimum number of additional best quality											// images that can be stored in the PC card.											// If CardAvailable is FALSE, this field is -1.	short				CardBetterRemaining;// The minimum number of additional better quality											// images that can be stored in the PC card.											// If CardAvailable is FALSE, this field is -1.	short				CardGoodRemaining;	// The minimum number of additional good quality											// images that can be stored in the PC card.											// If CardAvailable is FALSE, this field is -1.// f1c2--	short				CardNumAlbums;		// The number of albums in the PC card.											// If CardAvailable is FALSE, this field is -1.	char				CardVolumeName[12];	// The NULL-terminated name of the PC card volume name.											// If CardAvailable is FALSE, this field is 0.} DC120Status, FAR *DC120StatusPtr;// DC120Config holds all DC120 specific configuration information. Configuration information is// data that can be retrieved from the camera and can be changed and rewritten to the camera.typedef struct{	short				CaptureSleepTO;		// Sleep timeout value when the camera can capture images.											// The range of valid values is 60~255 sec. 											// When the camera is connected to the host computer,											// this value is used for the timeout by the camera with											// battery. If the AC adapter is connected to the camera,											// the camera does not sleep.	short				ReviewSleepTO;	DC120TimerMode		TimerDelay;			// One of the value of the DC120TimerMode definition.	DC120FlashMode		FlashMode;			// One of the value of the DC120FlashMode definition.	DC120PictureMode	PictQuality;		// One of the value of the DC120PictureMode definition.	DC120ZoomPosition	ZoomPosition;		// One of the value of the DC120ZoomPosition definition.	BOOL				ManualExpFlag;		// TRUE = Manual exposure mode.											// FALSE = Auto exposure with compensation.	long				ManualExpTime;		// The exposure time in microseconds.											// 20,000,000 = 20 seconds = The maximum exposure time.											// Any value between 5,700 and 20,000,000 can be stored											// when calling DCSetConfig, although it will be											// rounded to the nearest available supported value.											// To find the resulting exposure time, the applicaiton											// will have to call DCGetConfig.	short				ManualFNumber;		// F Number for the manual exposure. this is read only											// field. Automatically calculated by SDK.	short				AutoExpCompValue;	// For the DC120, the auto exposure compensation value											// is in the range from -7.5 E.V. to +7.5 E.V..	DC120FocusMode		FocusMode;			// One of the value of the DC120FocusMode definition.// a1c7++ deleted; amada/*	BOOL				ManualExpUIFlag;	// Enable or disable manual exposure selection from the											// camera back panel LCD user interface.											// TRUE = the camera can select manual exposure mode											// from the LCD display on the camera. The manual											// exposure icon will be displayed after the exposure											// compensation value.											// False = The manual exposure icon on the LCD display											// is disabled which simplifies the LCD interface											// slightly.*/// a1c7--	DC120DateFormat		DateFormat;			// One of the values of the DC120DateFormat definition.	BOOL				TimeFormat;			// If TRUE, it sets 24 hours for the time display											// If FALSE, it sets 12 hours for the time display	BOOL				DistanceDspFormat;	// If TRUE, it sets inch size for the distance display.											// If FALSE, it sets centimeter size for the distance display.	DC120FlashMode		DefFlashMode;		// One of the values of the DC120FlashMode definition.											// This setting changes default flash setting of the camera.} DC120Config, FAR *DC120ConfigPtr;                                // DC120PictInfo holds all DC120 camera specific information about a specific picture.typedef struct{	DC120TimerMode		TimerMode;			// One of the value of the DC120TimerMode definition.	BOOL				FlashUsed;			// TRUE = Flash used.											// FALSE = Flash not used.	DC120FlashMode		FlashMode;			// One of the value of the DC120FlashMode definition.	DC120PictureMode		PictQuality;		// One of the value of the DC120PictureMode definition.	DC120ZoomPosition	ZoomPosition;		// One of the value of the DC120ZoomPosition definition.	BOOL				ManualExpFlag;		// TRUE = Manual exposure.											// FALSE = Automatic exposure.	long				ExposureTime;		// Exposure time for this picture in microseconds.	short				FNumber;			// 10 times the F-Number used for this picture.	DC120BatteryStatus	BatteryLevel;		// One of the value of the DC120BatteryStatus definition.	DCRotateImg			PictOrientation;	// One of the value of the DCRotateImg definition.	DC120FocusMode		FocusMode;			// One of the value of the DC120FocusMode definition.	long				FocusPosition;		// Focus position in millimeters when the picture was											// taken. This value represents the distance from the											// camera to the subject.	short				LightValue;			// Measured light value when the picture was taken. The											// units for this value are millivolts(mV). This is the											// output of the CDS-cell used to measure the light level.	DCWBData			WBAuto;				// Auto white balance adjustment gain. If the application											// sets DCWBAuto, the SDK uses this value for image											// processing.	DCWBData			WBDayLight;			// DayLight white balance adjustment gain. If the application											// sets DCWBDayLight, the SDK uses this value for image											// processing.	DCWBData			WBIndoor;			// Indoor white balance adjustment gain. If the application											// sets DCWBIndoor, the SDK uses this value for image											// processing.	DCWBData			WBFluorescent;		// Fluorescent white balance adjustment gain. If the application											// sets DCWBFluorescent, the SDK uses this value for image											// processing.	char				ImageName[9];		// The name of the image. This is a NULL-terminated 8											// character DOS file name (without extension) of the											// stored image.} DC120PictInfo, FAR *DC120PictInfoPtr;// DC120AllAlbum holds all album names and number of// images of each album in the DC120 camera.typedef struct {// b1c4++; amada	char	AlbumName[DC120OneAlbumLength];	long	PictNum;// b1c4--} DC120AllAlbum, FAR *DC120AllAlbumPtr;// d5--//***********************************************************************************// Function Definitions//***********************************************************************************//***********************************************************************************// Camera Initialization Functions//// The camera initialization functions are called by the application to open and// close the necessary data structures for accessing the SDK functionality. They are://// 		DCOpenDriver// 		DCCloseDriver// 		DCOpenCamera// 		DCCloseCamera////***********************************************************************************// DCOpenDriver initializes all internal data structures to default values. It also// performs all system dependent functions required to connect a driver to an applic-// ation. DCOpenDriver initializes the Driver structure which may then be used to// open and close several cameras. When calling DCOpenDriver, the Driver structure// does not need to be initialized.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCOpenDriver(			SHORT FAR *	Version,		// This should be passed as the constant										// DCSDKVersion in DC25.H. The DC25SDK sets										// the created version number into this										// parameter. 			DCDriverPtr	Driver			// This is a system dependent structure that										// contains information about the open										// driver.		);// DCCloseDriver deallocates all memory allocated by the driver. It also performs all// system dependent functions required to disconnect the driver from the application.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCCloseDriver(			DCDriverPtr	Driver			// This is a system dependent structure that										// contains information about the open										// driver.		);// DCOpenCamera attempts to open a camera on a specified port and bit rate.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCOpenCamera(			DCCameraPtr	CameraData		// This structure contains information about										// a particular open camera. The Driver,										// CamType, PortNum, CamType2 and BitRate										// fields of this structure should be initia-										// lized before calling DCOpenCamera.		);// DCCloseCamera deallocates any memory allocated for camera specific data// structures, and terminates communications with the camera on the specified I/O// port.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCCloseCamera(			DCCameraPtr	CameraData		// Specifies the camera to use for this										// operation.		);//***********************************************************************************// Camera Control Functions//// The camera control functions are call be the application to control the current// status of an open camera. They are://// 		DCGetStatus// 		DCGetConfig// 		DCSetConfig// 		DCResetCamera//// If the opened CamType is DCNoCamera, these functions are not supported.////***********************************************************************************// DCGetStatus gets current status information from the camera specified by// CameraData.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCGetStatus(			DCCameraPtr	CameraData,		// Specifies the camera to use for this										// operation.			DCStatusPtr	GenericStatus,	// A pointer to a structure holding generic										// status information. If the pointer !=										// NULL, the structure is filled with current										// status information.			VOIDPTR		FullStatus		// A pointer to a structure holding camera										// specific status information. If the										// pointer != NULL, the structure is filled										// with current status information.		);// DCGetConfig gets current configuration information from the camera specified by// CameraData.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCGetConfig(			DCCameraPtr	CameraData,		// Specifies the camera to use for this										// operation.			DCConfigPtr	GenericConfig,	// A pointer to a structure holding generic										// configuration information. If the pointer										// != NULL, the structure is filled with										// current configuration information.			VOIDPTR		FullConfig		// A pointer to a structure holding camera										// specific configuration information. If the										// pointer != NULL, the structure is filled										// with current configuration information.		);// DCSetConfig sends configuration information to the camera specified by CameraData.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCSetConfig(			DCCameraPtr	CameraData,		// Specifies the camera to use for this										// operation.			DCConfigPtr	GenericConfig,	// A pointer to a structure holding generic										// configuration information. If the pointer										// != NULL, the configuration information is										// loaded into the camera.			VOIDPTR		FullConfig		// A pointer to a structure holding camera										// specific configuration information. If the										// pointer != NULL, the configuration										// information is loaded into the camera.		);// DCResetCamera sends a reset command to the camera specified by CameraData. The// reset command will reset the camera configuration settings to their default values.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCResetCamera(			DCCameraPtr	CameraData		// Specifies the camera to use for this										// operation.		);//***********************************************************************************// Image Processing Control Functions//// The image processing control functions give the application control over some of// the image processing functionality. They are://// 		DCGetImageProcessing// 		DCSetImageProcessing//		DCGetOutputWindow//		DCSetOutputWindow////***********************************************************************************// DCGetImageProcessing returns the current image processing settings for the camera// specified by CameraData.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCGetImageProcessing(			DCCameraPtr			CameraData,	// Specifies the camera to use for this											// operation.			DCImgProcDataPtr	IPData		// A pointer to a structure that will be											// filled with the current image process-											// ing settings.		);// DCSetImageProcessing sets the image processing values for future images retrieved// from the camera specified by CameraData.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCSetImageProcessing(			DCCameraPtr			CameraData,	// Specifies the camera to use for this											// operation.			DCImgProcDataPtr	IPData		// A pointer to a structure that is											// filled with new image processing											// settings.		);// DCGetOutputWindow returns the current output window settings for the camera// specified by CameraData.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCGetOutputWindow(			DCCameraPtr			CameraData,	// Specifies the camera to use for this											// operation.			DCOutputWindowPtr	WindowData	// A pointer to a structure that will be											// filled with the current output window											// settings.		);// DCSetOutputWindow sets the output window settings for the camera specified by// CameraData.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCSetOutputWindow(			DCCameraPtr			CameraData,	// Specifies the camera to use for this											// operation.			DCOutputWindowPtr	WindowData	// A pointer to a structure that will be											// filled with the current output window											// settings.		);//***********************************************************************************// Image Management Functions//// The image management functions control the images in the camera. They are://// 		DCTakePicture// 		DCDeletePicture//+f1c4 by kita// 		DCCopyMemToCard//-f1c4 by kita////***********************************************************************************// DCTakePicture commands the camera specified by CameraData to take a picture.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCTakePicture(			DCCameraPtr		CameraData,	// Specifies the camera to use for this										// operation.			DCCamMemType	CamMemType,	// One of the values defined in the										// DCCamMemType definition.			BOOL			ThumbFlag,	// Flag to inform the SDK whether it should										// return the thumbnail image as a part of										// the GenericInfo structure.			DCPictInfoPtr	GenericInfo,// A pointer to a structure holding generic										// picture information. If the pointer !=										// NULL, the structure is filled with inform-										// ation about the picture that was taken.			VOIDPTR			FullInfo	// A pointer to a structure holding camera										// specific picture information. If the										// pointer != NULL, the structure is filled										// with information about the picture that										// was taken.		);// DCDeletePicture will delete a picture from the camera memory.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCDeletePicture(			DCCameraPtr		CameraData,	// Specifies the camera to use for this										// operation.			DCCamMemType	CamMemType,	// One of the values defined in the										// DCCamMemType definition.			short			AlbumNum,	// Number of the album in the camera.			short			PictNum		// Picture in camera memory to be deleted.										// DCDeleteAll = Delete All Images that are										// currently accessible from the camera.		);// DCCopyMemToCard copies an image from Camera memory to the PC card.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCCopyMemToCard(			DCCameraPtr		CameraData,	// Specifies the camera to use for this oper-										// ation. This structure should have been										// initialized by a previous call to										// DCOpenCamera.			short			AlbumNum,	// Number of the album in the camera.			short			PictNum		// The number of the image in Camera memory										// to copy to the PC card.										// DCCopyAllImages = copy all images from										// Camera memory to PC card.		);			//***********************************************************************************// Image Retrieval Functions//// The image retrieval functions allow the application to access the images stored in// the camera. They are:////+f1c4 by kita// 		DCGetCameraPictInfo// 		DCGetNativeCameraType// 		DCGetNativePictInfo// 		DCGetCameraPicture// 		DCGetNativePicture// 		DCProcNativePicture// 		DCGetCameraPictureAsJPEG// 		DCProcNativePictureAsJPEG//-f1c4 by kita////***********************************************************************************// DCGetCameraPictInfo retrieves information about the picture specified by PictNum// from the camera specified by CameraData.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCGetCameraPictInfo(			DCCameraPtr		CameraData,		// Specifies the camera to use for this											// operation.			DCCamMemType	CamMemType,		// One of the values defined in the											// DCCamMemType definition.			short			AlbumNum,		// Number of the album in the camera.			short			PictNum,		// Picture number in the camera for which											// information is retrieved.			BOOL			ThumbFlag,		// Flag to inform the SDK whether it											// should return the thumbnail image as a											// part of the GenericInfo structure.			DCPictInfoPtr	GenericInfo,	// A pointer to a structure holding											// generic picture information. If the											// pointer != NULL, the structure is											// filled with information about the											// requested picture.			VOIDPTR			FullInfo		// A pointer to a structure holding											// camera specific picture information.											// If the pointer != NULL, the structure											// is filled with information about the											// requested picture.		);// DCGetNativeCameraType retrieves type CameraType for the native picture specified// by the Input I/O interface.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCGetNativeCameraType(			DCCameraPtr		CameraData,		// Specifies the camera to use for this											// operation. This must be a valid											// DCCameraData structure even if there											// in no camera connected to the computer.			DCImageIOCBPtr	Input,			// Interface for full buffer or callback											// image I/O.			DCCameraTypePtr	CameraType		// Output value specifying the type of											// camera that was used to create a											// native file.		);// DCGetNativePictInfo retrieves information from the native picture specified by the// Input I/O interface.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCGetNativePictInfo(			DCCameraPtr		CameraData,		// Specifies the camera to use for this											// operation. This must be a valid											// DCCameraData structure even if no											// camera connected to the computer(see											// DCOpenCamera).			DCImageIOCBPtr	Input,			// Interface for full buffer or callback											// image I/O.			BOOL			ThumbFlag,		// Flag to inform the SDK whether it											// should return the thumbnail image as a											// part of the GenericInfo structure.			DCPictInfoPtr	GenericInfo,	// A pointer to a structure holding											// generic picture information. If the											// pointer != NULL, the structure is											// filled with information about the											// requested picture.			VOIDPTR			FullInfo		// A pointer to a structure holding											// camera specific picture information.											// If the pointer != NULL, the structure											// is filled with information about the											// requested picture.		);// DCGetCameraPicture reads a picture from the camera specified by CameraData,// progress it, and returns the output image to the application.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCGetCameraPicture(			DCCameraPtr		CameraData,		// Specifies the camera to use for this											// operation. This should have been											// initialized by a previous call to											// DCOpenCamera.			DCCamMemType	CamMemType,		// One of the values defined in the											// DCCamMemType definition.			short			AlbumNum,		// Number of the album in the camera.			DCPictInfoPtr	Picture,		// Information about the picture being											// retrieved. This should have been											// initialized by a previous call to											// DCGetCameraPictInfo.			DCImageIOCBPtr	Input,			// A pointer to a structure containing IO											// processing information for input data.											// The IOFunc field of this DCImageIOCB											// structure must be NULL.			DCImageIOCBPtr	Output,			// A pointer to a structure containing IO											// processing information for output											// data. The IOFunc field of this											// DCImageIOCB structure must be NULL.			DCProgressCBPtr	Progress		// A pointer to a structure containing a											// progress callback function.		);// DCGetNativePicture reads a picture from the camera specified by CameraData and// returns the image in native(camera specific) format to the application.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCGetNativePicture(			DCCameraPtr		CameraData,		// Specifies the camera to use for this											// operation. This should have been											// initialized by a previous call to											// DCOpenCamera. 			DCCamMemType	CamMemType,		// One of the values defined in the											// DCCamMemType definition.			short			AlbumNum,		// Number of the album in the camera.			DCPictInfoPtr	Picture,		// Information about the picture being											// retrieved. This should have been											// initialized by a previous call to											// DCGetCameraPictInfo.			DCImageIOCBPtr	Output,			// A pointer to a structure containing IO											// processing information for output											// data.			DCProgressCBPtr	Progress		// A pointer to a structure containing a											// progress callback function.		);// DCProcNativePicture reads a native mode image provided by the application,// processes it, and returns the output image to the application.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCProcNativePicture(			DCCameraPtr		CameraData,		// Specifies the camera to use for this											// operation. This should have been											// initialized by a previous call to											// DCOpenCamera.			DCPictInfoPtr	Picture,		// Information about the picture being											// retrieved. This should have been											// initialized by a previous call to											// DCGetNativePictInfo.			DCImageIOCBPtr	Input,			// A pointer to a structure containing IO											// processing information for input data.											// The IOFunc field of this DCImageIOCB											// structure must be NULL.			DCImageIOCBPtr	Output,			// A pointer to a structure containing IO											// processing information for output data.											// The IOFunc field of this DCImageIOCB											// structure must be NULL.			DCProgressCBPtr	Progress		// A pointer to a structure containing a											// progress callback function.		);// DCGetCameraPictureAsJPEG prepares a JPEG compressed image after SDK reads a picture// from the camera specified by CameraData, processes it, and returns the output image// to the application#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCGetCameraPictureAsJPEG(			DCCameraPtr		CameraData,		// Specifies the camera to use for this											// operation. This should have been											// initialized by a previous call to											// DCOpenCamera.			DCCamMemType	CamMemType,		// One of the values defined in the											// DCCamMemType definition.			short			AlbumNum,		// Number of the album in the camera.			DCPictInfoPtr	Picture,		// Information about the picture being											// retrieved. This should have been											// initialized by a previous call to											// DCGetCameraPictInfo.			DCJPEGCompLevel	CompLevel,		// This indicates a compression level											// to JPEG, it is one of DCJPEGCompLevel											// definition.			long			*JPEGSize,		// Pointer of the actual JPEGSize. When the											// application saves the JPEG data into											// hard disk, it can use this value.			DCImageIOCBPtr	Input,			// A pointer to a structure containing IO											// processing information for input data.											// The IOFunc field of this DCImageIOCB											// structure must be NULL.			DCImageIOCBPtr	Output,			// A pointer to a structure containing IO											// processing information for output data.											// The IOFunc field of this DCImageIOCB											// structure must be NULL.			DCProgressCBPtr	Progress		// A pointer to a structure containing a											// progress callback function.		);// DCGetNativePictureAsJPEG prepares a JPEG compressed image from the stored native data,// processes it, and returns the output image to the application#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCProcNativePictureAsJPEG(			DCCameraPtr		CameraData,		// Specifies the camera to use for this											// operation. This should have been											// initialized by a previous call to											// DCOpenCamera.			DCPictInfoPtr	Picture,		// Information about the picture being											// retrieved. This should have been											// initialized by a previous call to											// DCGetCameraPictInfo.			DCJPEGCompLevel	CompLevel,		// This indicates a compression level											// to JPEG, it is one of DCJPEGCompLevel											// definition.			long			*JPEGSize,		// Pointer of the actual JPEGSize. When the											// application saves the JPEG data into											// hard disk, it can use this value.			DCImageIOCBPtr	Input,			// A pointer to a structure containing IO											// processing information for input data.											// The IOFunc field of this DCImageIOCB											// structure must be NULL.			DCImageIOCBPtr	Output,			// A pointer to a structure containing IO											// processing information for output data.											// The IOFunc field of this DCImageIOCB											// structure must be NULL.			DCProgressCBPtr	Progress		// A pointer to a structure containing a											// progress callback function.		);//***********************************************************************************// Preview Image Functions//// The preview image functions are only supported by DC50 camera. when the CamType or// SpecificCamType is DC50, these functions are available. Otherwise, the SDK returns// error code to the application. They are://// 		DCPreviewGetInfo// 		DCPreviewGetPicture// 		DCPreviewStore// 		DCPreviewErase////***********************************************************************************// DCPreviewGetInfo returns information about how preview mode is supported for the// camera.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCPreviewGetInfo(			DCCameraPtr			CameraData,	// Specifies the camera to use for this											// operation.  This structure should have											// been initialized by a previous call											// to DCOpenCamera.			VOIDPTR				PreviewInfo	// Pointer to an output structure that											// returns information about the type of											// preview supported by the camera and the											// dimensions of the preview image.											// Please note that PreviewInfo->PictType											// is a recommended value only. If the											// application wants to use the recommended											// value, it should call DCSetImageProcessing											// to define the picture type.		);// DCPreviewGetPicture reads a preview image from the camera, and returns the output// image to the application.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCPreviewGetPicture(			DCCameraPtr			CameraData,	// Specifies the camera to use for this operation.											// This structure should have been initialized											// by a previous call to DCOpenCamera. 			DCImageIOCBPtr		Input,		// A pointer to a structure containing IO processing											// information for input data.			DCImageIOCBPtr		Output,		// A pointer to a structure containing IO processing											// information for output data.			DCProgressCBPtr		Progress	// A pointer to a structure containing a progress											// callback function.		);// DCPreviewStore commands the camera to store the current preview image.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCPreviewStore(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.											// This structure should have been initialized by											// a previous call to DCOpenCamera.			DCCamMemType	CamMemType,		// One of the values defined in the											// DCCamMemType definition.			BOOL			ThumbFlag,		// Flag to inform the SDK whether it should return											// the thumbnail image as a part of the GenericInfo											// structure.			DCPictInfoPtr	GenericInfo,	// A pointer to a structure holding generic picture											// information. If the pointer != NULL, the structure											// is filled with information about the picture that											// was taken.			VOIDPTR			FullInfo		// A pointer to a structure holding camera specific											// picture information. If the pointer != NULL, the											// structure is filled with information about the											// picture that was taken.		);// DCPreviewErase commands the camera to discard the image currently captured for// preview without saving it.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCPreviewErase(			DCCameraPtr		CameraData		// Specifies the camera to use for this operation.											// This structure should have been initialized by 											// a previous call to DCOpenCamera.		);//***********************************************************************************// Album Management Functions//// The album management functions are only supported by DC120 camera. Album is similar// to the directory for the Windows or the other folder for the Macintosh. when the// CamType or SpecificCamType is DC120, these functions are available. Otherwise, the// SDK returns error code to the application. They are://// 		DCAlbumGetAvailable// 		DCAlbumSetAvailable// 		DCAlbumSetActive// 		DCAlbumGetAllName// 		DCAlbumErase// 		DCAlbumChangeName// 		DCAlbumMoveImage// 		DCAlbumGetPictureName////***********************************************************************************// DCAlbumGetAvailable gets names of current available albums from the camera specified// by CameraData#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCAlbumGetAvailable(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.			HCHARPTR		AvailableAlbum	// A pointer to an available album that will be											// filled with the current settings.		);// DCAlbumSetAvailable sets names of current available albums from the camera specified// by CameraData#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCAlbumSetAvailable(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.			HCHARPTR		AvailableAlbum	// A pointer to an available album that will be											// filled with the current settings.		);// DCAlbumSetActive sets an active album in the camera specified by CameraData. The next taken// picture will be stored under the album by this setting.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCAlbumSetActive(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.			short			ActiveAlbum		// Number of active album.		);// DCAlbumGetAllName gets all album names and number of images of each album from the camera// specified by CameraData and CamMemType.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCAlbumGetAllName(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.			DCCamMemType	CamMemType,		// One of the values defined in the											// DCCamMemType definition.			VOIDPTR			AllAlbum		// A pointer to a structure for all album names											// and number of each album. If AllAlbum == NULL,											// the SDK returns to the application.		);// DCAlbumErase erases an album that includes all images under it from the camera specified by// CameraData and CamMemType.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCAlbumErase(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.			DCCamMemType	CamMemType,		// One of the values defined in the											// DCCamMemType definition.			short			AlbumNum		// A pointer to a structure for all album names											// Number of album.		);// DCAlbumChangeName changes an album name in the camera specified by CameraData and CamMemType.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCAlbumChangeName(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.			DCCamMemType	CamMemType,		// One of the values defined in the											// DCCamMemType definition.			short			AlbumNum,		// Number of album to change.			HCHARPTR		AlbumName		// A pointer of new album name.		);// DCAlbumMoveImage moves an image from an album to other album in the camera specified by// CameraData and CamMemType.#ifdef MACINTOSHextern pascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCAlbumMoveImage(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.			DCCamMemType	CamMemType,		// One of the values defined in the											// DCCamMemType definition.			short			PictNum,		// Number of image that is album based number of											// source album.			short			FromAlbumNum,	// Number of album that is source album.			short			ToAlbumNum		// Number of album that is destination album.		);// d6p5++ added; amada// DCAlbumGetPictureName retrieves all picture names under the specified aAlbumNum#ifdef MACINTOSHpascal OSErr#endif#ifdef WINDOWS//+d8 changedextern OSErr SDKLIBAPI far pascal//-d8 changed#endif		DCAlbumGetPictureName(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.			DCCamMemType	CamMemType,		// One of the values defined in the DCCamMemTyp definition.			short			AlbumNum,		// Number of album to acquire picture name.			HCHARPTR		PictName		// A pointer of all picture names under the specified AlbumNum.		);// d6p5--#ifndef WINDOWS#if defined(powerc) || defined(__powerc) || defined(__POWERPC__) || defined(__CFM68K__)#pragma import reset#endif#if !(defined(powerc) || defined(__powerc) || defined(__POWERPC__))#pragma mpwc off	// at end of function declaration#endif#if defined(powerc) || defined (__powerc) || defined(__POWERPC__)#pragma options align=reset#endif#endif#ifdef __cplusplus}#endif 	// __cplusplus#endif	// _DC_SDK_LIB_