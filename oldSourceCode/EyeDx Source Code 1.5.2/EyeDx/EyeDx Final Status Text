Current Status of the EyeDx SoftwareRemaining Tasks for 2.0General StatusThe DC265/DC290 camera is currently supported using Run From Card or Disk mode. JPEG Exif header information is parsed to obtain as much information about the image as is possible. Not all information that is available with KDC images is available for JPEG/Exif. Notibly, when the DC265 is in manual focus mode (required for the flash adaptor that EyeDx provides), the focus distance is always 105 meters. The software current rejects this value and says that focus distance information is not available. This forces the pupil size algorithm to fall back to default values, rather than calculating the size based on the recorded distance.DC265/DC290-specific analysis parameters have not been implemented. The data structure and lookup is implemented based on camera model,, but the specific values are copies of the DC120 values. These values must be determined empirically and coded into the data structures.  No other code changes other than putting the values into the table should be required.To add a new camera model to the system, a new class based on the CEyeDxCamera object class can be created which implements the specific handing of the camera I/O. Such a class can actually handle multiple camera models if several models operate in a similar manner. For example, the CEyeDxDigitaCamera object handles both the DC265 and DC290 cameras, since they are based on the common Digita environment. They call the Digita Interface Library to perform I/O, and use the JPEG Image class for image handling. The object notes the specific model internally (i.e. 265 or 290) so that camera-specific analysis parameters can be selected based on camera model. This allows cameras that share common protocols (such as Digita) to still have unique analysis parameters per camera model.The DC120 camera class handles only that type of camera, and uses the KDC image object. It calls the Kodak DC120 SDK. The Digita camera class uses a protocol SDK that I developed using the Digita Host Interface Protocol (see the PDF file that describes this file), using a public domain software package as the initial basis for the implementation. Note that the public domain package has numerous errors, as does the protocol document. I will note errors in a separate document. The currently-implemented Digita Interface Library D(IL) is a completely different implementation than the public domain code, and is fully object oriented. Only two include files that describe some of the protocol data structures and constants are used from the older package. The package fully implements the Digita protocol except for handling of the more complete array type structures that are returned when querying some camera attributes. These were not required for the EyeDx implementation. The DIL currently implements only serial I/O - USB support was to be implemented next. The calling application doesn’t need to know which interface is used - the class hides this by using a connection class to detect on which port the camera is connected. The connection information is passed back to the calling program so that it can be saved as a preference for the next time the camera is opened. This preference is tried first, and then if the camera is not found there, then a search takes place on the other available ports.MacintoshAdditional testing of the Digita interface library.The code running under Classic serial I/O has not been tested. Recommend requiring use of Open Transport for all installed systems.The serial handling has a bug that was not fixed. If, after a connection has been previously made, the computer tries reestablishing communications before the camera performs it normal connection timeout, the computer gets garbage instead of the correct protocol startup message (the beacon). I have confirmed by monitoring the external serial lines that the camera is sending back the correct byte sequence at 9600 baud, but the computer is receiving garbage. It is possible that the computer is not resetting the port’s baud rate correctly from the higher rate used in the previous connection. The current fix is to reduce the camera’s timeout to the minimum value just before a connection is closed, and then always waiting more than that amount of time before attempting to connect. This is not ideal in that it slows down the connection process.My modifications to the serial interface library have been sent to the author. He may or may not incorporate them into the public release. I modified the code in several ways:- Added support for turning on and off the DTR line under program control.- Allowing sending of timed breaks.- Modifying the serial port specification structure to be portable between platforms, so that the main class and calling application source code can be more portable.- Code that looks up available serial ports returns the count.WindowsImplementation of the serial I/O functions for both Windows 95 and Windows 98. The public domain package that I used for the Digita interface uses functions available only in Windows 98 for asynchronous I/O. This includes CancelIO and the read and write routines. The CancelIO function isn’t available at all in Windows 95, and is presently commented-out. My assumption is that closing the device at the end of the connection will flush any pending characters.The read and write routines link under Windows 95 but they are NOPs. To support both 95 and 98, the older style of asynchronous I/O must be implemented. If only 98 will be supported in the future, then the existing code can be used as-is, with the CancelIO function re-enabled. This serial code hasn’t been extensively tested. Contact the author for more information and possible updates. I modified the serial port library code as described under the Macintosh section to support common serial port structures between platforms. Lookup of available serial ports by parsing the registry is now implemented. The available COMn names are returned in a structure similar to that used in the Mac version.