// LicenseLIb.h//// This file defines the data structures and constants used for the software-based// EyeDx License scheme.//// Created by Merle F. McClelland, 5 April 1999//// The license is a 96 bit number, encoded using standard Base64 (MIME) encoding.// For processing, the 96 bit number is divided into two 48 bit numbers, which can// be processed using long long math.  These components are called "A" and "B".// Minimum length of the customer ID stringconst long		LicenseMinCustomerIDLen = 4;// Length of the encoded license stringconst long		LicenseStringLen 		= 16;const long		LicenseStringBufferLen	= LicenseStringLen + 1;// Current license format version codeconst long 		LicenseCurrentVers		= 1;// Current license type codesconst long		LicenseTypeStandard		= 1;const long		LicenseTypeDemo			= 2;// Constants for the encoded licenseconst char		LicenseCharInvalid		= '=';const long long LicenseCharShift		= 5;const long long	LicenseCharMask			= 0x00000000001f;const long		LicenseCharMaxBin		= ((1 << LicenseCharShift) - 1);const long		LicenseStrDigitsPerWord = 8;const long		LicenseCheckCharPos		= 7;const long long	LicenseNibbleMask		= 0xf;const long long LicenseNibbleShift		= 4;// These masks are used to strip-off bits that don't belong to this// particular component, as well as the shift value. Note that the masks// as defined are to be applied after shifting down is performed, or before// shifting up (during encoding)const long long	LicenseBitsMaskA		= 0x0003ffffffff;const long long LicenseShiftA			= 6;const long long	LicenseBitsMaskB		= 0x007fffffffff;// Masks and shift values for the individual fields in each component. Masks// are defined to be appropriate for use after the data is shifted down.const long long	LicenseASNShift			= 1;const long long LicenseASNMask			= 0x0001ffffffff;const long long	LicenseAResShift		= 0;const long long	LicenseAResMask			= 0x000000000001;const long long	LicenseBExpShift		= 23;const long long LicenseBExpMask			= 0x00000000ffff;const long		LicenseMaxIncr			= ((1 << 12) - 1);const long		LicenseIncMultiplier	= 10;const long		LicenseIncMaximum		= LicenseIncMultiplier * 4000;		const long long	LicenseBIncShift		= 11;const long long	LicenseBIncMask			= 0x000000000fff;const long long	LicenseBVersShift		= 8;const long long	LicenseBVersMask		= 0x000000000003;const long		LicenseMaxType			= ((1 << 3) - 1);const long long	LicenseBTypeShift		= 5;const long long	LicenseBTypeMask		= 0x000000000007;const long long	LicenseBResShift		= 4;const long long	LicenseBResMask			= 0x000000000001;const long long	LicenseBCheckShift		= 0;const long long	LicenseBCheckMask		= 0x00000000000f;// Currently, the reserved fields must contain specific patterns (all zeros)const long long	LicenseAResPattern		= 0x000000000000;const long long	LicenseBResPattern		= 0x000000000000;// Masks and shift vakues for the date fields. These are defined based on an// already-shifted and masked SNDate or ExpDate field.const long		LicenseDateYearOffset	= 1998;const long		LicenseMaxYear			= ((1 << 7) - 1);const long long	LicenseADateYearShift	= 9;const long long LicenseADateYearMask	= 0x00000000007f;const long long	LicenseADateMonthShift	= 5;const long long LicenseADateMonthMask	= 0x00000000000f;const long long	LicenseADateDayShift	= 0;const long long LicenseADateDayMask		= 0x00000000001f;	// Since the License SN also contains a date in the same format as the expiration// field, we provide additional shifts and masks to access the individual components// of the SN Field. These are defined based on an already-shifted and masked SN field!const long long	LicenseASNDateShift		= 17;const long long LicenseASNDateMask		= 0x00000000ffff;const long long	LicenseASNTimeShift		= 0;const long long LicenseASNTimeMask		= 0x00000001ffff;// These constants define invalid valiues for each field. These values are used// in the constructor to initialize the internal variables, so that we can detect if// all of the fields have been set.const short		LicenseYearInvalid		= 0;const short		LicenseMonthInvalid		= 0;const short		LicenseDayInvalid		= 0;const short		LicenseTypeInvalid		= 0;const long		LicenseIncrInvalid		= 0;const short		LicenseVersionInvalid	= 0;// This class defines the data contained in the licenseclass EyeDxLicenseInfo{	public:	EyeDxLicenseInfo();		// These routines get and set the fields in the license		long long 	GetSerialNumber() { return ((LicenseA >> LicenseASNShift) & LicenseASNMask); };		short 		GetType() { return Type; };		short 		GetExpYear() { return ExpYear; };	short 		GetExpMonth() { return ExpMonth; };	short 		GetExpDay() { return ExpDay; };		long		GetExpDateCode() { return ((LicenseB >> LicenseBExpShift) & LicenseBExpMask); };		static void	DecodeDateCode(long dateCode, short &year, short &month, short &day);	static long CreateTodayAsDateCode();		short 		GetSerialNumberYear() { return SNYear + LicenseDateYearOffset; };	short	 	GetSerialNumberMonth() { return SNMonth; };	short 		GetSerialNumberDay() { return SNDay; };	long		GetSerialNumberTime() { return SNTime; };		long		GetIncrement() { return (Increment  * LicenseIncMultiplier); };	short		GetVersion() { return Version; };	bool 		SetType(short);		bool 		SetExpYear(short);	bool 		SetExpMonth(short);	bool 		SetExpDay(short);		bool 		SetSerialNumberYear(short);	bool	 	SetSerialNumberMonth(short);	bool 		SetSerialNumberDay(short);	bool		SetSerialNumberTime(long);		bool		SetIncrement(long);	//bool		SetVersion(short);		// This routine is a utility function which will take a license string	// and test it to see if it is encoded properly. It does not validate the	// actual contents.		bool		IsValidLicenseString(char *licenseString);		bool		IsValidCustomerIDString(char *customerID);	// These are the encoding and decoding routines.	bool		DecodeLicense(char *licenseString, char *customerID);	bool		EncodeLicense(char *licenseString, char *customerID);		bool		UpdateLicense(char *licenseString, char *customerID);		bool		FormatSerialNumber(char *licenseString);	private:	void		CalcEncoderValues(char *customerID, long long &EncodeA, long long &EncodeB);	short		Base32ToBinary(char character);	char		BinaryToBase32(short bits);			long long	LicenseA;		short		SNYear;	short		SNMonth;	short		SNDay;	long		SNTime;	short		Type;			long long	LicenseB;	short		ExpYear;	short		ExpMonth;	short		ExpDay;	long		Increment;	short		Version;	short		CheckCode;};