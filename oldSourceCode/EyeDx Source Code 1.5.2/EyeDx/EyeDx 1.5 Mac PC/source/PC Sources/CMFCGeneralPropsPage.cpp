// main.cp#include <stdio.h>#include <windows.h>#include <wingdi.h>#include <winbase.h>#include <winuser.h>#include <process.h>#include "resource.h"#include "globals.h"#include "main.h"#if defined (WIN32)	#define IS_WIN32	TRUE#else	#define IS_WIN32	FALSE#endifIMPLEMENT_DYNCREATE(CMFCGeneralPropsPage, CPropertyPage)BEGIN_MESSAGE_MAP( CMFCGeneralPropsPage, CPropertyPage )ON_NOTIFY_EX(TTN_NEEDTEXT, 0, OnToolTipText)ON_WM_SIZE()END_MESSAGE_MAP()CEyeDxBooleanType CMFCGeneralPropsPage::OnToolTipText(UINT, NMHDR* pNMHDR, LRESULT*){	TOOLTIPTEXT *pTTT = (TOOLTIPTEXT *) pNMHDR;	if (!(pTTT->uFlags & TTF_IDISHWND))	// the ID must be a handle to a window		return FALSE;			UINT uID = pNMHDR->idFrom;	uID = ::GetDlgCtrlID((HWND)uID);			CString strTipText;		// Attempt to load a ToolTip string that corresponds to the control's ID		if(!strTipText.LoadString(uID))		return FALSE;		// Stuff text into the ToolTip, 80 characters maximum		strncpy(pTTT->lpszText, strTipText, 80);	return TRUE;}CEyeDxBooleanType CMFCGeneralPropsPage::OnInitDialog(){#ifdef DEBUG_PROPERTIESAfxMessageBox("B1", IDOK);#endif	CPropertyPage::OnInitDialog();			m_ctlSaveImages = (CButton *) GetDlgItem(IDC_SAVEIMAGES);	m_ctlUseSessions = (CButton *) GetDlgItem(IDC_USESESSIONS);	m_ctlAutoCameraAutoStart = (CButton *) GetDlgItem(IDC_AUTOSTART);	m_ctlSaveImages->SetCheck(m_SaveImages ? BST_CHECKED : BST_UNCHECKED);	m_ctlAfterAnalysis = (CComboBox *) GetDlgItem(IDC_AFTERANALYSIS);		m_ctlAfterAnalysis->SetExtendedUI(TRUE);	#ifdef DEBUG_PROPERTIESAfxMessageBox("B2", IDOK);#endif	// Note that the values are slightly different between Mac and Windows. 0 is Do Not Display on Windows.	m_ctlAfterAnalysis->AddString("Do Not Display");	m_ctlAfterAnalysis->AddString("Display in Browser");	m_ctlAfterAnalysis->AddString("Display in Summary Window");	m_ctlAfterAnalysis->SetCurSel(m_DisplayReport);	m_ctlReportFormat = (CComboBox *) GetDlgItem(IDC_REPORTFORMAT);	m_ctlReportFormat->SetExtendedUI(TRUE);		m_ctlReportFormat->AddString("Standard EyeDx Format");	m_ctlReportFormat->AddString("Custom Format");	m_ctlReportFormat->SetCurSel(m_ReportFormat);	m_ctlAdjReport = (CButton *) GetDlgItem(IDC_ADJREPORT);	m_ctlAdjReport->SetCheck(m_AdjReport ? BST_CHECKED : BST_UNCHECKED);	m_ctlAutoCameraAutoStart->SetCheck(m_AutoCameraAutoStart ? BST_CHECKED : BST_UNCHECKED);#ifdef DEBUG_PROPERTIESAfxMessageBox("B3", IDOK);#endif	// If a session is active, we don't allow them to change the status!	if (*m_SessionName == CommonStringLiteral_(kDefaultSessionName))		m_ctlUseSessions->EnableWindow(TRUE);	else	{		CEyeDxLongStringType theLabel;				m_ctlUseSessions->GetWindowText(theLabel);		theLabel += " (Session currently active)";		m_ctlUseSessions->SetWindowText(theLabel);		m_ctlUseSessions->EnableWindow(FALSE);	}			#ifdef DEBUG_PROPERTIESAfxMessageBox("B5", IDOK);#endif	// Indicate the current preference either way		m_ctlUseSessions->SetCheck(m_UseSessions ? BST_CHECKED : BST_UNCHECKED);	m_ctlCameraRate = (CButton *) GetDlgItem(IDC_CAMERARATE);	// Previously, High Speed was defined as 230400 bps. Now it is 115200 bps. So we do a	// conversion. Actually, we force it to be one of the two valid settings.		if ((m_CameraRate != DCBitRate57600) && ((m_CameraRate != DCBitRate115200)))		m_CameraRate = DCBitRate115200;			m_ctlCameraRate->SetCheck((m_CameraRate == DCBitRate115200) ? BST_CHECKED : BST_UNCHECKED);#ifdef DEBUG_PROPERTIESAfxMessageBox("B6", IDOK);#endif	EnableToolTips(TRUE);		// Finally, add all of the controls to the resizer object	#ifdef DEBUG_PROPERTIESAfxMessageBox("B7", IDOK);#endif	m_Resizer.Add(this, IDC_SAVEIMAGES, RESIZE_LOCKLEFT | RESIZE_LOCKTOP);	m_Resizer.Add(this, IDC_USESESSIONS, RESIZE_LOCKLEFT | RESIZE_LOCKTOP);	m_Resizer.Add(this, IDC_AFTERANALYSIS, RESIZE_LOCKLEFT | RESIZE_LOCKTOP);	m_Resizer.Add(this, IDC_REPORTFORMAT, RESIZE_LOCKLEFT | RESIZE_LOCKTOP);	m_Resizer.Add(this, IDC_ADJREPORT, RESIZE_LOCKLEFT | RESIZE_LOCKTOP);	m_Resizer.Add(this, IDC_CAMERARATE, RESIZE_LOCKLEFT | RESIZE_LOCKTOP);	m_Resizer.Add(this, IDC_REPORTINGOPTIONSGB, RESIZE_LOCKLEFT | RESIZE_LOCKTOP);	m_Resizer.Add(this, IDC_RUNOPTIONSGB, RESIZE_LOCKLEFT | RESIZE_LOCKTOP);	m_Resizer.Add(this, IDC_GENPREFSAFTERLABEL, RESIZE_LOCKLEFT | RESIZE_LOCKTOP);	m_Resizer.Add(this, IDC_GENPREFSFORMATLABEL, RESIZE_LOCKLEFT | RESIZE_LOCKTOP);	#ifdef DEBUG_PROPERTIESAfxMessageBox("B8", IDOK);#endif	return TRUE;}void CMFCGeneralPropsPage::OnOK(){	m_DisplayReport = m_ctlAfterAnalysis->GetCurSel();	m_ReportFormat = (EyeDxReportFormat) m_ctlReportFormat->GetCurSel();	m_AdjReport = ((m_ctlAdjReport->GetCheck() == BST_CHECKED) ? kAdjustName : kDontAdjustName);	m_SaveImages = ((m_ctlSaveImages->GetCheck() == BST_CHECKED) ? kSaveImages : kDontSaveImages);	m_UseSessions = ((m_ctlUseSessions->GetCheck() == BST_CHECKED) ? kUseSessions : kNoSessions);	m_CameraRate = ((m_ctlCameraRate->GetCheck() == BST_CHECKED) ? DCBitRate115200 : DCBitRate57600);	m_AutoCameraAutoStart = ((m_ctlAutoCameraAutoStart->GetCheck() == BST_CHECKED) ? kAutoStart : kNoAutoStart);}void CMFCGeneralPropsPage::DoDataExchange(CDataExchange *pDX){	CPropertyPage::DoDataExchange(pDX);}void CMFCGeneralPropsPage::OnSize(UINT nType, int cx, int cy) {	CPropertyPage::OnSize(nType, cx, cy);	// Resize!	m_Resizer.Resize(this);	}