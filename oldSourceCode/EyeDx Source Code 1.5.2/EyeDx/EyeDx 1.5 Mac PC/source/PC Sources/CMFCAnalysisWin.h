// CMFCAnalysisWin.h#pragma once// A minimal MFC application.// Various constants that define the sizes and positions of disk window// elements// All of the sizes and positions of window elements must be based on the default// font size for the window. This is because the user may run with large fonts enabled// in the display setup, both through the Appearance setting as well as the display // adaptor setting. This makes things really confusing, since the EyeDx window is// supposed to be nominally 400x400 pixels. But we're working with character cell// widths and heights, instead, and the width to height ratio may not be constant,// depending on the font selected. I just used the default Windows font as the basis// for these values. The default font's cell size is 7x12 pixels. We could get really// anal and calculate the exact ratio between cell size and widths or heights, but I// won't bother. These approximations are good enough.#define ANALYSIS_LEFT_MARGIN					3#define ANALYSIS_RIGHT_MARGIN					ANALYSIS_LEFT_MARGIN#define ANALYSIS_VIEW_WIDTH						24#define ANALYSIS_VIEW_HEIGHT					7.8// Progress caption at the top of the window#define	ANALYSIS_PROGRESS_CAPTION_WIDTH(w)		(ANALYSIS_MAIN_VIEW_WIDTH(w) - 10 - 1)#define ANALYSIS_PROGRESS_CAPTION_HEIGHT		2#define	ANALYSIS_PROGRESS_CAPTION_X				(ANALYSIS_LEFT_MARGIN)#define	ANALYSIS_PROGRESS_CAPTION_Y				0.75// Progress bar to the right of the progress caption#define	ANALYSIS_PROGRESS_BAR_WIDTH(w)			(ANALYSIS_MAIN_VIEW_WIDTH(w) - ANALYSIS_PROGRESS_CAPTION_WIDTH(w) - 1)#define ANALYSIS_PROGRESS_BAR_HEIGHT			1#define	ANALYSIS_PROGRESS_BAR_X(w)				((w) - ANALYSIS_RIGHT_MARGIN - ANALYSIS_PROGRESS_BAR_WIDTH(w))#define	ANALYSIS_PROGRESS_BAR_Y					0.75// The Thumbnail Views#define	ANALYSIS_UP_VIEW_WIDTH					(ANALYSIS_VIEW_WIDTH)#define ANALYSIS_UP_VIEW_HEIGHT					(ANALYSIS_VIEW_HEIGHT)#define	ANALYSIS_UP_VIEW_X(w)					((w) - (ANALYSIS_VIEW_WIDTH / 2.0))#define	ANALYSIS_UP_VIEW_Y						3.25// The X value is subtracted from the width of the window to get the real X#define	ANALYSIS_SIDE_VIEW_WIDTH				(ANALYSIS_VIEW_WIDTH)#define ANALYSIS_SIDE_VIEW_HEIGHT				(ANALYSIS_VIEW_HEIGHT)#define	ANALYSIS_SIDE_VIEW_X(w)					((w) - (ANALYSIS_VIEW_WIDTH / 2.0))#define	ANALYSIS_SIDE_VIEW_Y					3.25// The Image Captions#define	ANALYSIS_UP_CAPTION_WIDTH				(ANALYSIS_VIEW_WIDTH)#define ANALYSIS_UP_CAPTION_HEIGHT				1.25#define	ANALYSIS_UP_CAPTION_X(w)				((w) - (ANALYSIS_UP_CAPTION_WIDTH / 2.0))#define	ANALYSIS_UP_CAPTION_Y					12// The X value is subtracted from the width of the window to get the real X#define	ANALYSIS_SIDE_CAPTION_WIDTH				(ANALYSIS_VIEW_WIDTH)#define ANALYSIS_SIDE_CAPTION_HEIGHT			1.25#define	ANALYSIS_SIDE_CAPTION_X(w)				((w) - (ANALYSIS_SIDE_CAPTION_WIDTH / 2.0))#define	ANALYSIS_SIDE_CAPTION_Y					12// The Main Animation View#define	ANALYSIS_MAIN_VIEW_WIDTH(w)				((w) - ANALYSIS_LEFT_MARGIN - ANALYSIS_RIGHT_MARGIN)#define ANALYSIS_MAIN_VIEW_HEIGHT				21#define	ANALYSIS_MAIN_VIEW_X					(ANALYSIS_LEFT_MARGIN)#define	ANALYSIS_MAIN_VIEW_Y					3// Forward declarationclass CMainWindow;class CMFCAnalysisWin : public CWnd{	public:			CMFCAnalysisWin(CRect *posRect, CMainWindow *myParent, int SaveFullInputImages, int AdjustReportName, 						EyeDxReportFormat reportFormat,						CStringArray *userTextBlocks, AnalysisResults *pResults);			protected:			virtual	void 	PostNcDestroy();		afx_msg	int		OnCreate(LPCREATESTRUCT);		afx_msg CEyeDxBooleanType	OnToolTipText(UINT, NMHDR* pNMHDR, LRESULT*);		afx_msg	void	OnClose();		afx_msg void	StartAnalysis(UINT wParam, LONG lParam);		DECLARE_MESSAGE_MAP()			private:			CMainWindow		*m_Parent;				int				m_SaveFullInputImages;						int				m_cxChar;		int				m_cyChar;				UINT			m_MessageToSend;			CStatic			m_ctlProgressCaption;		CProgressCtrl	m_ctlProgressBar;				CEyeDxDibStatic	m_ctlUpView;		CEyeDxDibStatic	m_ctlSideView;		CStatic			m_ctlUpCaption;		CStatic			m_ctlSideCaption;				CEyeDxDibStatic	m_ctlMainView;				CFont			m_ctlFont;				CEyeDxBooleanType	m_AdjReport;				EyeDxReportFormat m_ReportFormat;				AnalysisResults	*m_Results;				CStringArray	*m_UserTextBlocks;				CEyeDxVariableList	*m_VariableList;};