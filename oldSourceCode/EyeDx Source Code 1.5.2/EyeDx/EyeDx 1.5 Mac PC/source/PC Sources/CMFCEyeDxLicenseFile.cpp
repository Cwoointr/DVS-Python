// ===========================================================================//	CMFCMFCEyeDxLicenseFile.cp - based on UWindowState by  ©1994 J. Rodden, DD/MF & Associates// ===========================================================================// Utilities for saving and restoring the EyeDx application's preferences.//// All rights reserved. You may use this code in any application, recognition// would be appreciated but is not required.#include <string.h>#include <stdio.h>#include <stdlib.h>#include "globals.h"#include "CMFCEyeDxLicenseFile.h"// ===========================================================================// This constructor is used to create the invisible license file as defined by the// specified FSSpec. This would be used for the backup file.// Use the alternative version that takes a filename to create the primary licenses file// in the Preferences folder.// This constructor is used to create the invisible license file inside the Preferences folder.// Use the alternative version that takes a FSSpec to create the backup licenses file.CMFCEyeDxLicenseFile::CMFCEyeDxLicenseFile(LPCTSTR lpszFileName, UINT nOpenFlags)					: CFile(lpszFileName, nOpenFlags){	// We make the file invisible - can't use the CFile class SetStatus function	// as it crashes! So we just use plain old Windows	DWORD theAttributes = ::GetFileAttributes(lpszFileName);	theAttributes |= FILE_ATTRIBUTE_HIDDEN;	::SetFileAttributes(lpszFileName, theAttributes);}void CMFCEyeDxLicenseFile::SaveLicense(LicenseData *inLicenseData){	// Make sure it's the current version		inLicenseData->version = kMISCVers1;		// -----------------------------------------	// Store the license data		SeekToBegin();		Write(inLicenseData, sizeof(LicenseData));		Flush();}// ===========================================================================voidCMFCEyeDxLicenseFile::LoadLicense(LicenseData *inLicenseData){	LicenseData	theLicenseData;		SeekToBegin();	// -----------------------------------------	// Get saved license data			int numBytes = Read(&theLicenseData, sizeof(LicenseData));				// Clear the structure and set defaults		memset(inLicenseData, 0, sizeof(LicenseData));		// Set the resource to invalid values so we can detect that no license exists		inLicenseData->version = kMISCVers1;	inLicenseData->expDate = 0L;				inLicenseData->lastUseDate = 0L;	inLicenseData->availableRuns = 0L;		inLicenseData->serialNumberLow = 0L;	inLicenseData->serialNumberHigh = 0L;	inLicenseData->checksum = 0L;			// -----------------------------------------	// Restore license	if ( numBytes == sizeof(LicenseData) )		{			if (theLicenseData.version == kMISCVers1)			*inLicenseData = theLicenseData;			// Copy the structure		}}