#pragma once#include "globals.h"const int kCEyeDxPropertiesFirstSchema = 1;const int kCEyeDxPropertiesSecondSchema = 2;const int kCEyeDxPropertiesCurrentSchema = 3;// These strings are used to save and restore preferences in the Registry. // NOTE: These are for backwards compatibility ONLY.class CEyeDxProperties : public CObject{	DECLARE_SERIAL(CEyeDxProperties)public:		// Constructors								// Must have a default constructor for serialization															CEyeDxProperties();									// Destructor								~CEyeDxProperties();		void					Serialize(CArchive &);		// Accessor member functions		int						GetDisplayReport() { return m_DisplayReport; };	CEyeDxBooleanType		GetAdjustReport() { return m_AdjReport; };	CEyeDxBooleanType		GetSaveImages() { return m_SaveImages; };	DCBitRate				GetCameraRate() { return m_CameraRate; };	DCPortNum				GetCameraPort() { return m_CameraPort; };	EyeDxReportFormat		GetReportFormat() { return m_ReportFormat; };	CEyeDxBooleanType		GetUseSessions() { return m_UseSessions; };	int						GetPromptingStyle() { return m_PromptingStyle; };	CEyeDxBooleanType		GetAutoCameraAutoStart() { return m_AutoCameraAutoStart; };			// There are no corresponding Set functions for these as the caller can manipulate the arrays	// directly		CStringArray			*GetDefaultTextBlocks() { return &m_DefaultTextBlocks; };	CStringArray			*GetUserTextBlocks() { return &m_UserTextBlocks;	 };		CEyeDxVariableList		*GetVariableList() { return m_VariableList; };		void					SetDisplayReport(int theDisplayReport) { m_DisplayReport = theDisplayReport; };	void					SetAdjustReport(CEyeDxBooleanType theAdjReport) { m_AdjReport = theAdjReport; };	void					SetSaveImages(CEyeDxBooleanType theSaveImages) { m_SaveImages = theSaveImages; };	void					SetCameraRate(DCBitRate theCameraRate) { m_CameraRate = theCameraRate; };	void					SetCameraPort(DCPortNum theCameraPort) { m_CameraPort = theCameraPort; };	void					SetReportFormat(EyeDxReportFormat theReportFormat) { m_ReportFormat = theReportFormat; };	void					SetUseSessions(CEyeDxBooleanType theUseSessions) { m_UseSessions = theUseSessions; };	void					SetPromptingStyle(int thePromptingStyle) { m_PromptingStyle = thePromptingStyle; };	void					SetAutoCameraAutoStart(CEyeDxBooleanType theAutoStartOption) { m_AutoCameraAutoStart = theAutoStartOption; };		protected:private:		// These are preferences loaded at startup, and saved on close		int						m_DisplayReport;	CEyeDxBooleanType		m_AdjReport;	CEyeDxBooleanType		m_SaveImages;	DCBitRate				m_CameraRate;	DCPortNum				m_CameraPort;	EyeDxReportFormat		m_ReportFormat;	CEyeDxBooleanType		m_UseSessions;	int						m_PromptingStyle;	CEyeDxBooleanType		m_AutoCameraAutoStart;			CStringArray			m_DefaultTextBlocks;	CStringArray			m_UserTextBlocks;		CEyeDxVariableList		*m_VariableList;	CEyeDxVariableList		*m_TempVariableList;};extern CEyeDxProperties *gGlobalProperties;