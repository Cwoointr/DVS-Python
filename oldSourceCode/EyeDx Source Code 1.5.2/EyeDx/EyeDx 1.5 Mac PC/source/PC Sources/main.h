// main.h#pragma once#if defined (WIN32)	#define IS_WIN32	TRUE#else	#define IS_WIN32	FALSE#endif#include <stdio.h>#include <unistd.h>#include <stdlib.h>#include <string.h>#include <fcntl.h>#include <windows.h>#include <afxwin.h>         // MFC core and standard components#include <afxext.h>         // MFC extensions#include <afxcview.h>#ifndef _AFX_NO_AFXCMN_SUPPORT#include <afxcmn.h>         // MFC support for Windows 95 Common Controls#endif // _AFX_NO_AFXCMN_SUPPORT#include <wingdi.h>#include <winbase.h>#include <winuser.h>//#include <process.h>#include "resource.h"#include "CEyeDxDib.h"#include "CEyeDxDibStatic.h"#include "CEyeDxTextBlock.h"#include "globals.h"#include "EyeDxMFCMessages.h"#include "CEyeDxVariables.h"#include "LicenseLib.h"#include "CMFCEyeDxLicenseFile.h"#include "FileVersion.h"#include "comdate.h"#include "CMFCCameraImageSelectDlg.h"#include "CMFCAnalysisWin.h"#include "CMFCRunWin.h"#include "CMFCRunFromCameraWin.h"#include "CMFCRunFromCameraAutoWin.h"#include "CMFCRunFromDiskWin.h"#include "CMFCAboutDialog.h"#include "CMFCPropertiesDlg.h"//#include "CMFCReportLayoutDlg.h"#include "CMFCEditVariableDlg.h"#include "CMFCDefineChoicesDlg.h"#include "CMFCLicenseStatusDlg.h"#include "CMFCLicenseExpiredDlg.h"#include "CMFCLicenseEntryDlg.h"#include "CMFCCameraSetupDlg.h"#include "CMFCGetReportNameDlg.h"#include "CMFCAnotherSubjectDlg.h"#include "CMFCTakePictureDlg.h"#include "CMFCVerifyPictureDlg.h"#include "CMFCSummaryDlg.h"#include "CMFCSummaryZoomDlg.h"#include "CMFCVerifyZoomDlg.h"#include "CMFCErasePictureDlg.h"#include "CEyeDxProperties.h"#include "CMFCPromptForVariableDlg.h"#include "CMFCGetSessionNameDlg.h"#include "CMFCStartupSessionDlg.h"#include "CMFCShutdownSessionDlg.h"#include "CMFCSplashDlg.h"#include "CMFCPasswordDlg.h"// A minimal MFC application.// Various constants that define the sizes and positions of main window// elements// All of the sizes and positions of window elements must be based on the default// font size for the window. This is because the user may run with large fonts enabled// in the display setup, both through the Appearance setting as well as the display // adaptor setting. This makes things really confusing, since the EyeDx window is// supposed to be nominally 400x400 pixels. But we're working with character cell// widths and heights, instead, and the width to height ratio may not be constant,// depending on the font selected. I just used the default Windows font as the basis// for these values. The default font's cell size is 7x12 pixels. We could get really// anal and calculate the exact ratio between cell size and widths or heights, but I// won't bother. These approximations are good enough.#define	EYEDX_WIN_WIDTH			57			// In terms of default character cell width#define	EYEDX_WIN_HEIGHT		25			// In terms of default character cell height#define MAIN_BUTTON_WIDTH		24			// In terms of default character cell width#define MAIN_BUTTON_HEIGHT		1.8			// In terms of default character cell height#define MAIN_BUTTON_X			2			// In terms of default character cell width#define	MAIN_SESSION_BUTTON_Y	1			// In terms of default character cell height#define	MAIN_CAMERA_BUTTON_Y	4			// In terms of default character cell height#define	MAIN_DISK_BUTTON_Y		7			// In terms of default character cell height#define	MAIN_REPORTS_BUTTON_Y	10			// In terms of default character cell height#define	MAIN_ABOUT_BUTTON_Y		13			// In terms of default character cell height#define	MAIN_EXIT_BUTTON_Y		16			// In terms of default character cell heightclass CMainApp : public CWinApp{public:	virtual CEyeDxBooleanType InitInstance();};struct FilePathPairList{	char	theSrcPath[MAX_PATHNAME_CHARS];	char	theDstPath[MAX_PATHNAME_CHARS];};					class CMainWindow : public CWnd{public:	CMainWindow();	void					SetParentPosition(CRect * rect);	void					CleanupUpImage();	void					CleanupSideImage();	void					CleanupImages();	void					CreateReportPath(CString &thePath, CString *theSessionName, AnalysisResults *theResults);	void					CreateSubdirs(CEyeDxWindowType	*theWindow);	void					HandleExportReports(BOOL flattenReports);		LicenseStatus			GetLicenseStatus();	LicenseError			DecrementLicenseCounter();	LicenseError			UpdateLicense(EyeDxLicenseInfo *theLicense);	LicenseError			EncodeLicenseFileData(LicenseData *inLicenseData);	LicenseError			DecodeLicenseFileData(LicenseData *inLicenseData);	LicenseError			LoadLicense();	LicenseError			SaveLicense();	LicenseError			UpdateLicenseCounter(EyeDxReferralCode theResult);	void					SetLicenseStatusCaption(CStatic *theCaption);	void					GetLicenseExpDateString(CString &theString);	void					GetLicenseCountString(CString &theString);		void					HandleSummaryZoom(CWnd *pParentWnd, 									CEyeDxLongStringType *theName, 								  	CEyeDxHandleType theImage, 								  	int theMainImageRows,								  	int theMainImageCols,								  	CEyeDxHandleType theRightEyeImage,								  	CEyeDxHandleType theLeftEyeImage,								  	int theEyeImageRows,								  	int theEyeImageCols);								  	EyeDxNextStepCode		HandleSummaryDisplay(CWnd *pParentWnd, CMainWindow *pMainWnd, 											AnalysisResults *theAnalysisResults,											CEyeDxBooleanType showRetakeOptions);	void					SaveSessionStatus();	void					ApplyNow(CMFCPropertiesDlg *pPs);		protected:	CEyeDxBooleanType					initialized;		virtual	void 			PostNcDestroy();	CEyeDxBooleanType					PreTranslateMessage(MSG *pMsg);	afx_msg void			OnSetFocus(CWnd *pOldWnd);		afx_msg	CEyeDxBooleanType			OnEraseBkgnd(CDC *pDC);	afx_msg CEyeDxBooleanType			OnToolTipText(UINT, NMHDR* pNMHDR, LRESULT*);	afx_msg	int				OnCreate(LPCREATESTRUCT);	afx_msg void			OnSessionButtonClicked();	afx_msg	void			OnCameraButtonClicked();	afx_msg	void			OnDiskButtonClicked();	afx_msg	void			OnReportsButtonClicked();	afx_msg	void			OnAboutButtonClicked();	afx_msg	void			OnExitButtonClicked();		afx_msg	void			OnOkButtonClicked(UINT wParam, LONG lParam);	afx_msg	void			OnCancelButtonClicked(UINT wParam, LONG lParam);	afx_msg	void			OnAnalysisComplete(UINT wParam, LONG lParam);	afx_msg	void			OnExportReports();	afx_msg	void			OnFlattenReports();	afx_msg	void			OnAdvancedFeatures();		afx_msg	void			HandleSplashDialog();	HACCEL					m_hAccel;		DECLARE_MESSAGE_MAP()private:	void 					ReportCopyError(int errorCode, CString theActionString, CString theFileString);	OSErr 					ParseForSRCTags(CFile *copyReportFile, 											char *ptr, 											FilePathPairList **theFilePathPairList, 											long *theFilePathListCount, 											CString theSrcDir, 											CString dstSimagesPath, CString dstEyesPath,											BOOL flattenReports);							void					LoadPreferences();	void					SavePreferences();		void					HandleProperties();		int						HandleLicenseEntry(enum LicenseStatus theStatus, CEyeDxBooleanType exitPrompt);	void					HandleLicenseExpired(enum LicenseStatus theStatus);	void					HandleLicenseDisplay(enum LicenseStatus theStatus);		void					DisplayLicense();	int						EnterLicense();		CMFCRunWin				*m_RunWin;	CMFCAnalysisWin			*m_AnalysisWin;	int						m_cxChar;	int						m_cyChar;		// These are the buttons in the main window		CButton					m_ctlExitButton;	CButton					m_ctlAboutButton;	CButton					m_ctlReportsButton;	CButton					m_ctlDiskButton;	CButton					m_ctlCameraButton;	CButton					m_ctlSessionButton;			// This indicates whether the Run From Disk initial directory has been set	// to the default EyeDx/Pimages directory the first time through.	// We do this once per invocation, so that the user can navigate to whatever	// directory they want, and we won't change that setting.		// The Run From Disk window will set this variable appropriately.		CEyeDxBooleanType					m_DirectorySet;		CEyeDxBooleanType		m_FirstTimeAutoStart;		char					m_DefaultPimagesDir[MAX_PATHNAME_CHARS];	char					m_DefaultreportsDir[MAX_PATHNAME_CHARS];		AnalysisResults			m_Results;	// The license information - this information is kept in sync by the member	// functions that load, test, and save the license information.		long					mLicenseCount;	long					mLicenseExpDateCode;	long long				mLicenseSN;	long					mLicenseLastUse;			CMFCEyeDxLicenseFile	*mPrimaryLicense;	CMFCEyeDxLicenseFile	*mBackupLicense;};extern CMainApp gMainApp;