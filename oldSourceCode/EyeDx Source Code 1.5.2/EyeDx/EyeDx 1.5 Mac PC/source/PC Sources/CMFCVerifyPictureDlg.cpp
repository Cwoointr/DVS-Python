// main.cp#include "main.h"BEGIN_MESSAGE_MAP( CMFCVerifyPictureDlg, CDialog )ON_NOTIFY_EX(TTN_NEEDTEXT, 0, OnToolTipText)ON_BN_CLICKED(IDD_VERIFY_PICTURE_RETAKE_BUTTON, OnRetakePressed)ON_BN_CLICKED(IDD_VERIFY_PICTURE_ZOOM_BUTTON, OnZoomPressed)END_MESSAGE_MAP()CEyeDxBooleanType CMFCVerifyPictureDlg::OnToolTipText(UINT, NMHDR* pNMHDR, LRESULT*){	TOOLTIPTEXT *pTTT = (TOOLTIPTEXT *) pNMHDR;	if (!(pTTT->uFlags & TTF_IDISHWND))	// the ID must be a handle to a window		return FALSE;			UINT uID = pNMHDR->idFrom;	uID = ::GetDlgCtrlID((HWND)uID);			CString strTipText;		// Attempt to load a ToolTip string that corresponds to the control's ID		if(!strTipText.LoadString(uID))		return FALSE;		// Stuff text into the ToolTip, 80 characters maximum		strncpy(pTTT->lpszText, strTipText, 80);	return TRUE;}CEyeDxBooleanType CMFCVerifyPictureDlg::OnInitDialog(){	CDialog::OnInitDialog();	CenterWindow();			EnableToolTips(TRUE);		m_hBadBitmap.LoadMappedBitmap(ID_BAD_QUALITY_BITMAP);	m_hGoodBitmap.LoadMappedBitmap(ID_GOOD_QUALITY_BITMAP);	m_hCautionBitmap.LoadMappedBitmap(ID_CAUTION_QUALITY_BITMAP);	m_ctlResultsCaption = (CStatic *) GetDlgItem(IDD_VERIFY_PICTURE_CAPTION);	m_ctlNameCaption = (CStatic *) GetDlgItem(IDD_VERIFY_PICTURE_FILENAME_CAPTION);	m_ctlQualityCaption = (CStatic *) GetDlgItem(IDD_VERIFY_PICTURE_QUALITY_CAPTION);	m_ctlThumbnail.SubclassDlgItem(IDD_VERIFY_PICTURE_VIEW, this);	m_ctlOkButton = (CButton*) (GetDlgItem(IDOK));		m_ctlTopBitmap = (CStatic*) (GetDlgItem(IDD_VERIFY_PICTURE_TOP_BITMAP));		m_ctlSideBitmap = (CStatic*) (GetDlgItem(IDD_VERIFY_PICTURE_SIDE_BITMAP));		m_ctlZoomButton.SubclassDlgItem(IDD_VERIFY_PICTURE_ZOOM_BUTTON, this);	m_ctlZoomButton.LoadBitmaps("ZoomButtonU", "ZoomButtonD", "ZoomButtonF", NULL);	m_hTopOfHeadSidewaysBitmap.LoadMappedBitmap(ID_TOP_OF_HEAD_SIDEWAYS_BITMAP);	m_hTopOfHeadNormalBitmap.LoadMappedBitmap(ID_TOP_OF_HEAD_NORMAL_BITMAP);	CString theString;			m_MainWindowCaption->GetWindowText(theString);	m_ctlNameCaption->SetWindowText(theString);	m_ctlThumbnail.CopyBitmapData(m_MainWindowView);	// If the location is "Side", then we change the Ok button to say "Run Analysis"		CString theButtonName;	if (m_Location == kSideOrientation)	{		m_ctlSideBitmap->ShowWindow(SW_SHOW);		m_ctlSideBitmap->SetBitmap(m_hTopOfHeadSidewaysBitmap);		m_ctlTopBitmap->ShowWindow(SW_HIDE);		theButtonName = "Run Analysis";	}	else	{		m_ctlTopBitmap->ShowWindow(SW_SHOW);		m_ctlTopBitmap->SetBitmap(m_hTopOfHeadNormalBitmap);		m_ctlSideBitmap->ShowWindow(SW_HIDE);		theButtonName = "Continue";	}	m_ctlOkButton->SetWindowText(theButtonName);			 		m_MainWindowQualityBitmap->ShowWindow(SW_SHOW);	// If the quality isn't what we should be using, warn the user		unsigned long thePictQuality;		thePictQuality = CheckPictInfo(m_PictInfo);		if (thePictQuality != 0)	{			CString theErrorString;				if (thePictQuality & kNotBestQuality)			theErrorString +=  "The picture was not taken with the recommended 'Best' image quality setting. ";				if (thePictQuality & kNoFlash)			theErrorString += "The flash was not on. ";					if (thePictQuality & kNotZoomed)			theErrorString += "The camera was not zoomed all the way in. ";					if (thePictQuality & kBadFocusMode) 			theErrorString += "The camera focus mode was incorrect (should be multispot). ";					if (thePictQuality & kSubjectTooClose)			theErrorString += "Subject was too close to camera. ";					if (thePictQuality & kSubjectTooFar)			theErrorString += "Subject was too far from camera. ";		if (thePictQuality & kBadOrientation)			theErrorString += "Picture orientation setting not correct (should be no rotation). ";		theErrorString += " Analysis may produce incorrect results. EyeDx recommends you retake the picture.";		m_MainWindowQualityBitmap->SetBitmap(m_hCautionBitmap);		 	m_ctlResultsCaption->SetWindowText(theErrorString);	}	else	{		CString thePromptString = "The picture settings and distance appear to be OK. If the picture is oriented correctly and the subject is properly looking at the camera, press ";		thePromptString += theButtonName;		thePromptString += ". Otherwise, retake the picture.";				m_ctlResultsCaption->SetWindowText(thePromptString);		m_MainWindowQualityBitmap->SetBitmap(m_hGoodBitmap);		}			return TRUE;}void CMFCVerifyPictureDlg::OnRetakePressed(){	EndDialog(IDD_VERIFY_PICTURE_RETAKE_BUTTON);}void CMFCVerifyPictureDlg::OnZoomPressed(){	CMFCVerifyZoomDlg rdlg(this, m_MainWindow, m_Location, m_VariableList, m_MainWindowView, m_MainWindowCaption, m_ImageAlreadyDownloaded);										        rdlg.DoModal();	}