// main.cp#include "main.h"#if defined (WIN32)	#define IS_WIN32	TRUE#else	#define IS_WIN32	FALSE#endifBEGIN_MESSAGE_MAP( CMFCLicenseEntryDlg, CDialog )ON_NOTIFY_EX(TTN_NEEDTEXT, 0, OnToolTipText)END_MESSAGE_MAP()CEyeDxBooleanType CMFCLicenseEntryDlg::OnToolTipText(UINT, NMHDR* pNMHDR, LRESULT*){	TOOLTIPTEXT *pTTT = (TOOLTIPTEXT *) pNMHDR;	if (!(pTTT->uFlags & TTF_IDISHWND))	// the ID must be a handle to a window		return FALSE;			UINT uID = pNMHDR->idFrom;	uID = ::GetDlgCtrlID((HWND)uID);			CString strTipText;		// Attempt to load a ToolTip string that corresponds to the control's ID		if(!strTipText.LoadString(uID))		return FALSE;		// Stuff text into the ToolTip, 80 characters maximum		strncpy(pTTT->lpszText, strTipText, 80);	return TRUE;}CEyeDxBooleanType CMFCLicenseEntryDlg::OnInitDialog(){	CDialog::OnInitDialog();	CenterWindow();			m_ctlPrompt = (CStatic *) GetDlgItem(IDC_LICENSE_ENTRY_PROMPT);	EnableToolTips(TRUE);		switch (m_Status)	{	case LicenseStatusNotInstalled:		m_ctlPrompt->SetWindowText("You must install a license to use the EyeDx software.");		break;	case LicenseStatusExpiredDate:		m_ctlPrompt->SetWindowText("Your license has passed its expiration date.");		break;	case LicenseStatusExpiredCount:		m_ctlPrompt->SetWindowText("Your license has no analysis runs available.");		break;	case LicenseStatusExpiredBoth:		m_ctlPrompt->SetWindowText("Your license has passed its expiration date and has no analysis runs available.");		break;	case LicenseStatusDateOutOfRange:		m_ctlPrompt->SetWindowText("The system clock appears to have been set back. Setting the clock to the correct date will re-enable your license if valid");		break;	case LicenseStatusValid:		m_ctlPrompt->SetWindowText("Your license is valid. You may install a new license to extend the expiration date or increase the number of analysis runs.");		break;	}		m_ctlCancelButton = (CButton *) GetDlgItem(IDCANCEL);	m_ctlCodeField1 = (CEdit *) GetDlgItem(IDC_LICENSE_ENTRY_FIELD1);	m_ctlCodeField1->SetLimitText(4);	m_ctlCodeField2 = (CEdit *) GetDlgItem(IDC_LICENSE_ENTRY_FIELD2);	m_ctlCodeField2->SetLimitText(4);	m_ctlCodeField3 = (CEdit *) GetDlgItem(IDC_LICENSE_ENTRY_FIELD3);	m_ctlCodeField3->SetLimitText(4);	m_ctlCodeField4 = (CEdit *) GetDlgItem(IDC_LICENSE_ENTRY_FIELD4);	m_ctlCodeField4->SetLimitText(4);	m_ctlCustomerID = (CEdit *) GetDlgItem(IDC_LICENSE_ENTRY_CUSTID_FIELD);		m_ctlBogusField = (CEdit *) GetDlgItem(IDC_LICENSE_ENTRY_BOGUS_FIELD);		if (!m_exitPrompt)		m_ctlCancelButton->SetWindowText("Cancel");		return TRUE;}void CMFCLicenseEntryDlg::OnOK(){	CEyeDxBooleanType done = false;		// Here we validate the entered license. This done by concatenating the	// entered license code segments, and passing that and the customer ID to the	// license object. It will tell us if the license is valid.		CEyeDxBooleanType validEntry = true;		CString theBogusStr;	CString theLicenseStr;	CString theFieldStr;		// We pretend that the bogus field has to be entered. We do this by just checking for	// a non-empty string. Of course, if they don't enter a valid value, it won't be caught.		m_ctlBogusField->GetWindowText(theBogusStr);			// Now, validate the entered license string	m_ctlCodeField1->GetWindowText(theFieldStr);	theLicenseStr = theLicenseStr + theFieldStr;					m_ctlCodeField2->GetWindowText(theFieldStr);	theLicenseStr = theLicenseStr + theFieldStr;		m_ctlCodeField3->GetWindowText(theFieldStr);	theLicenseStr = theLicenseStr + theFieldStr;	m_ctlCodeField4->GetWindowText(theFieldStr);	theLicenseStr = theLicenseStr + theFieldStr;		// Get the customer ID and validate it		CString theCustomerIDStr;		m_ctlCustomerID->GetWindowText(theCustomerIDStr);								EyeDxLicenseInfo *theLicense = new EyeDxLicenseInfo();	if (!theLicense->IsValidLicenseString((char *)theLicenseStr))	{		MessageBox("Invalid license code. You must enter all four digits of each segment."			"Upper and lower case are important", AfxGetAppName());	}	else if (!theLicense->IsValidCustomerIDString((char *)theCustomerIDStr))	{		MessageBox("Invalid customer ID. You must enter at least 4 characters, and upper and lower case are important.", AfxGetAppName());	}	else if (theBogusStr.GetLength() == 0)	{		MessageBox("You left the Zip/Postal Code field blank!", AfxGetAppName());	}	else	{		// Decode the license TODO - this should give better feedback on exact reasons for debugging				if (!theLicense->DecodeLicense((char *)theLicenseStr, (char *)theCustomerIDStr))		{			MessageBox("Invalid license ID.", AfxGetAppName());		}		else		{			// Save the license information for future use. If a valid license is already			// installed, then try to update it. If the user is attempting to re-install			// the same license, we will get an error here, and the existing license will			// not be changed.										LicenseError theStatus = m_Parent->UpdateLicense(theLicense);			if (theStatus == kLicenseReuseError)			{				MessageBox("Sorry. You cannot reuse an old license."							  "Please obtain a new license from EyeDx, Inc.", AfxGetAppName());			}			else if (theStatus == kLicenseNewOlderThanInstalledError)			{				MessageBox("Sorry. You have entered a license that has an older expiration date than the currently-installed license." 						   "Please contact EyeDx, Inc. customer service.", AfxGetAppName());			}			else if (theStatus == kLicenseExpiredError)			{				MessageBox("Sorry. You have entered an expired license." "Please obtain a new license from EyeDx, Inc.", AfxGetAppName());			}			else if (theStatus != kLicenseNoError)			{				CString theErrorCode;								theErrorCode.Format("Sorry. Error %d occurred during license installation. Please contact EyeDx customer service.", theStatus);				MessageBox(theErrorCode, AfxGetAppName());			}					else			{				done = true;			}		}	}		delete theLicense;		// We call the base class function to end the dialog only if the entries are ok. If they	// are not, we simply return.		if (done)		CDialog::OnOK();}