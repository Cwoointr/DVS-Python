/////////////////////////////////////////////////////////////////////////////// Copyright (C) 1998 by Jorge Lodos// All rights reserved//// Distribute and use freely, except:// 1. Don't alter or remove this notice.// 2. Mark the changes you made//// Send bug reports, bug fixes, enhancements, requests, etc. to://    lodos@cigb.edu.cu/////////////////////////////////////////////////////////////////////////////// PreviewFileDlg.cpp : implementation file//#define WINDOWS#include "stdafx.h"#include "resource.h"#include "CEyeDxDib.h"#include "CEyeDxDibStatic.h"#include "PreviewFileDlg.h"#include "globals.h"#include <dlgs.h>#ifdef _DEBUG#define new DEBUG_NEW#undef THIS_FILEstatic char THIS_FILE[] = __FILE__;#endif/////////////////////////////////////////////////////////////////////////////// CPreviewFileDlgIMPLEMENT_DYNAMIC(CPreviewFileDlg, CFileDialog)CPreviewFileDlg::CPreviewFileDlg(BOOL bOpenFileDialog, LPCTSTR lpszDefExt, LPCTSTR lpszFileName,		DWORD dwFlags, LPCTSTR lpszFilter, CWnd* pParentWnd) :		CFileDialog(bOpenFileDialog, lpszDefExt, lpszFileName, dwFlags, lpszFilter, pParentWnd){	m_ofn.Flags |= (OFN_EXPLORER | OFN_ENABLETEMPLATE);	m_ofn.lpTemplateName = MAKEINTRESOURCE(IDD_FILEOPENPREVIEW);  m_bPreview = TRUE;}BEGIN_MESSAGE_MAP(CPreviewFileDlg, CFileDialog)	//{{AFX_MSG_MAP(CPreviewFileDlg)	ON_BN_CLICKED(IDC_PREVIEW, OnPreview)	ON_WM_QUERYNEWPALETTE()	ON_WM_PALETTECHANGED()	ON_WM_SETFOCUS()	//}}AFX_MSG_MAPEND_MESSAGE_MAP()BOOL CPreviewFileDlg::OnInitDialog() {	CFileDialog::OnInitDialog();		m_DIBStaticCtrl.SubclassDlgItem(IDC_IMAGE, this);		m_QualityText.SubclassDlgItem(IDC_QUALITY, this);		GetDlgItem(IDC_PREVIEW)->SendMessage(BM_SETCHECK, (m_bPreview) ? 1 : 0);		return TRUE;  // return TRUE unless you set the focus to a control	              // EXCEPTION: OCX Property Pages should return FALSE}void CPreviewFileDlg::OnFileNameChange() {	CFileDialog::OnFileNameChange();	if (m_bPreview)	{		m_DIBStaticCtrl.RemoveDib(); // no preview		m_QualityText.SetWindowText("");		DC120PictInfo	thePictInfo;		unsigned char *theThumbData;				if (GetPathName() && (strcmp(GetPathName(), "") != 0))		{							// Check to see if the selected item is really a file						CFileStatus status;								if (CFile::GetStatus(GetPathName(), status) == TRUE)			{								// Check to see if the file is a directory								if ((status.m_attribute & CFile::directory) == 0)				{					FILE *fileptr = fopen(GetPathName(), "rb");					if (fileptr)					{						if (ReadIconFromFile(fileptr, &theThumbData, &thePictInfo))						{							m_DIBStaticCtrl.SetImageFromRaw24Bit(theThumbData, THUMB_HEIGHT, THUMB_WIDTH); // the control will handle errors				 										switch (thePictInfo.PictQuality)							{							case DC120NoCompression:								m_QualityText.SetWindowText("Quality: No Compression");								break;							case DC120BestQuality:								m_QualityText.SetWindowText("Quality: Best (recommended)");								break;							case DC120BetterQuality:								m_QualityText.SetWindowText("Quality: Better");								break;							case DC120GoodQuality:								m_QualityText.SetWindowText("Quality: Good");								break;							}				    							}					}				}			}		}	}}void CPreviewFileDlg::OnFolderChange() {	CFileDialog::OnFolderChange();	m_DIBStaticCtrl.RemoveDib();}void CPreviewFileDlg::OnPreview() {	m_bPreview = !m_bPreview;	if (!m_bPreview)	{		m_DIBStaticCtrl.RemoveDib(); // no preview		m_QualityText.SetWindowText("");	}	else	{		m_DIBStaticCtrl.RemoveDib(); // no preview		m_QualityText.SetWindowText("");		DC120PictInfo	thePictInfo;		unsigned char *theThumbData;				if (GetPathName() && (strcmp(GetPathName(), "") != 0))		{			// Check to see if the selected item is really a file						CFileStatus status;								if (CFile::GetStatus(GetPathName(), status) == TRUE)			{				// Check to see if the file is a directory								if ((status.m_attribute & CFile::directory) == 0)				{					FILE *fileptr = fopen(GetPathName(), "rb");										if (fileptr)					{						if (ReadIconFromFile(fileptr, &theThumbData, &thePictInfo))						{							m_DIBStaticCtrl.SetImageFromRaw24Bit(theThumbData, THUMB_HEIGHT, THUMB_WIDTH); // the control will handle errors				 										switch (thePictInfo.PictQuality)							{							case DC120NoCompression:								m_QualityText.SetWindowText("Quality: No Compression");								break;							case DC120BestQuality:								m_QualityText.SetWindowText("Quality: Best (recommended)");								break;							case DC120BetterQuality:								m_QualityText.SetWindowText("Quality: Better");								break;							case DC120GoodQuality:								m_QualityText.SetWindowText("Quality: Good");								break;							}				    							}					}				}			}		}	}}BOOL CPreviewFileDlg::OnQueryNewPalette() {	m_DIBStaticCtrl.SendMessage(WM_QUERYNEWPALETTE);	// redo the palette if necessary	return CFileDialog::OnQueryNewPalette();}void CPreviewFileDlg::OnPaletteChanged(CWnd* pFocusWnd) {	CFileDialog::OnPaletteChanged(pFocusWnd);	m_DIBStaticCtrl.SendMessage(WM_PALETTECHANGED, (WPARAM)pFocusWnd->GetSafeHwnd());	// redo the palette if necessary}void CPreviewFileDlg::OnSetFocus(CWnd* pOldWnd) {	CFileDialog::OnSetFocus(pOldWnd);	m_DIBStaticCtrl.SendMessage(WM_QUERYNEWPALETTE);	// redo the palette if necessary}#ifdef _DEBUGvoid CPreviewFileDlg::Dump(CDumpContext& dc) const{	CFileDialog::Dump(dc);	if (m_bPreview)		dc << "preview is enabled\n";	else		dc << "preview is disabled\n";}#endif //_DEBUG