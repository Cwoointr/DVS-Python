// main.cp#include <stdio.h>#include <windows.h>#include <wingdi.h>#include <winbase.h>#include <winuser.h>#include <process.h>#include "resource.h"#include "globals.h"#include "CMFCReportLayoutDlg.h"#if defined (WIN32)	#define IS_WIN32	TRUE#else	#define IS_WIN32	FALSE#endifBEGIN_MESSAGE_MAP( CMFCReportLayoutDlg, CDialog )ON_NOTIFY_EX(TTN_NEEDTEXT, 0, OnToolTipText)ON_CBN_SELCHANGE(IDC_LAYOUTCUSTOMTEXTTYPE, OnTextType)ON_BN_CLICKED(IDC_LAYOUTREVERTTOSAVED, OnRevert)ON_BN_CLICKED(IDC_LAYOUTSETTODEFAULT, OnSetDefault)END_MESSAGE_MAP()BOOL CMFCReportLayoutDlg::OnToolTipText(UINT, NMHDR* pNMHDR, LRESULT*){	TOOLTIPTEXT *pTTT = (TOOLTIPTEXT *) pNMHDR;	if (!(pTTT->uFlags & TTF_IDISHWND))	// the ID must be a handle to a window		return FALSE;			UINT uID = pNMHDR->idFrom;	uID = ::GetDlgCtrlID((HWND)uID);			CString strTipText;		// Attempt to load a ToolTip string that corresponds to the control's ID		if(!strTipText.LoadString(uID))		return FALSE;		// Stuff text into the ToolTip, 80 characters maximum		strncpy(pTTT->lpszText, strTipText, 80);	return TRUE;}void CMFCReportLayoutDlg::SetDefineTextCaption(){	switch (m_CurrentDefineTextMenuItem)	{	case kReportLayoutHeaderText:		m_HTMLFormat->SetWindowText("Displayed as bold, centered, large font");		m_EditText->SetFont(&m_timesRomanBoldFont);		break;	case kReportLayoutIntroductionText:	case kReportLayoutPassResultText:	case kReportLayoutReferResultText:	case kReportLayoutRetakeResultText:	case kReportLayoutFooterText:		m_HTMLFormat->SetWindowText("Displayed as normal font");		m_EditText->SetFont(&m_timesRomanNormalFont);		break;	}}BOOL CMFCReportLayoutDlg::OnInitDialog(){	CDialog::OnInitDialog();	CenterWindow();			m_ctlTextType = (CComboBox *) GetDlgItem(IDC_LAYOUTCUSTOMTEXTTYPE);		m_EditText = (CEdit *) GetDlgItem(IDC_LAYOUTCUSTOMTEXTEDIT);		// We create a 10 point Times Roman normal and a 12 point bold font to use in the edit control, 	// so that the user will see approximately what they would in the report.		CClientDC theDC(this);		int nHeight = -((theDC.GetDeviceCaps(LOGPIXELSY) * 10) / 72);	m_timesRomanNormalFont.CreateFont(nHeight, 0, 0, 0, FW_NORMAL, 0, 0, 0,		DEFAULT_CHARSET, OUT_CHARACTER_PRECIS, CLIP_CHARACTER_PRECIS,		DEFAULT_QUALITY, DEFAULT_PITCH | FF_DONTCARE, "Times New Roman");			nHeight = -((theDC.GetDeviceCaps(LOGPIXELSY) * 12) / 72);	m_timesRomanBoldFont.CreateFont(nHeight, 0, 0, 0, FW_BOLD, 0, 0, 0,		DEFAULT_CHARSET, OUT_CHARACTER_PRECIS, CLIP_CHARACTER_PRECIS,		DEFAULT_QUALITY, DEFAULT_PITCH | FF_DONTCARE, "Times New Roman");			m_EditText->SetFont(&m_timesRomanNormalFont);		m_HTMLFormat = (CStatic *) GetDlgItem(IDC_LAYOUTTEXTHTMLFORMAT);		m_ctlTextType->SetExtendedUI(TRUE);		m_ctlTextType->AddString("Header");	m_ctlTextType->AddString("Introduction");	m_ctlTextType->AddString("Pass Result");	m_ctlTextType->AddString("Refer Result");	m_ctlTextType->AddString("Retake Result");	m_ctlTextType->AddString("Footer");		m_CurrentDefineTextMenuItem = kReportLayoutHeaderText;	m_ctlTextType->SetCurSel(m_CurrentDefineTextMenuItem);		// Make copies of the current user text		m_TempUserTextBlocks.Copy(*m_UserTextBlocks);			m_EditText->SetWindowText(m_TempUserTextBlocks[m_CurrentDefineTextMenuItem]);	SetDefineTextCaption();	EnableToolTips(TRUE);		return TRUE;}void CMFCReportLayoutDlg::OnTextType(){			CString theText;		m_EditText->GetWindowText(theText);		// This will throw away the previous text block and set it to the new one		m_TempUserTextBlocks[m_CurrentDefineTextMenuItem] = theText;		if (theText.GetLength() > kWarnAboutLongOptionalFmt1Text)		MessageBox("The number of characters you have entered may cause the report to print on more than one page.\nRun an analysis and test printing.", AfxGetAppName());		// Now, get the newly-selected item, and load it		m_CurrentDefineTextMenuItem = m_ctlTextType->GetCurSel();		m_EditText->SetWindowText(m_TempUserTextBlocks[m_CurrentDefineTextMenuItem]);		SetDefineTextCaption();}void CMFCReportLayoutDlg::OnOK(){	CString theText;		m_EditText->GetWindowText(theText);		// This will throw away the previous text block and set it to the new one		m_TempUserTextBlocks[m_CurrentDefineTextMenuItem] = theText;		if (theText.GetLength() > kWarnAboutLongOptionalFmt1Text)		MessageBox("The number of characters you have entered may cause the report to print on more than one page.\nRun an analysis and test printing.", AfxGetAppName());			// For each of the text block types, discard the previous text, and save the new text		m_UserTextBlocks->Copy(m_TempUserTextBlocks);	CDialog::OnOK();}void CMFCReportLayoutDlg::OnRevert(){	// Just set the text back to what they had previously entered				m_EditText->SetWindowText(m_TempUserTextBlocks[m_CurrentDefineTextMenuItem]);}void CMFCReportLayoutDlg::OnSetDefault(){	// Just set the text back to what they had previously entered				m_EditText->SetWindowText(m_DefaultTextBlocks->GetAt(m_CurrentDefineTextMenuItem));}