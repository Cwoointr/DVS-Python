// main.cp#include <stdio.h>#include <windows.h>#include <wingdi.h>#include <winbase.h>#include <winuser.h>#include <process.h>#include "resource.h"#include "globals.h"#include "FileVersion.h"#include "CEyeDxDib.h"#include "CEyeDxDibStatic.h"#include "CMFCCameraImageSelectDlg.h"#include "CMFCAnalysisWin.h"#include "CMFCRunWin.h"#include "CMFCRunFromCameraWin.h"#include "CMFCRunFromDiskWin.h"#include "CMFCAboutDialog.h"#include "CMFCPropertiesDlg.h"#include "EyeDxMFCMessages.h"#include "main.h"#if defined (WIN32)	#define IS_WIN32	TRUE#else	#define IS_WIN32	FALSE#endif// a background image is loaded at startup and kept hereextern int				EYEDX_BKGND_DISPLAY_ROWS, EYEDX_BKGND_DISPLAY_COLS;	// display windowextern unsigned char	*eyedx_background_image;				// display dataextern CMainApp gMainApp;BEGIN_MESSAGE_MAP( CMFCAboutDialog, CDialog )ON_WM_ERASEBKGND()ON_NOTIFY_EX(TTN_NEEDTEXT, 0, OnToolTipText)END_MESSAGE_MAP()CEyeDxBooleanType CMFCAboutDialog::OnInitDialog(){	CDialog::OnInitDialog();	CenterWindow();		m_Version.SubclassDlgItem(IDC_ABOUT_VERSION, this);	m_Patent.SubclassDlgItem(IDC_ABOUT_PATENT, this);	m_Address.SubclassDlgItem(IDC_ABOUT_ADDRESS, this);	m_Phone.SubclassDlgItem(IDC_ABOUT_PHONE, this);	m_Email.SubclassDlgItem(IDC_ABOUT_EMAIL, this);	m_Email_Link.SubclassDlgItem(IDC_ABOUT_EMAIL_LINK, this);	m_WWW.SubclassDlgItem(IDC_ABOUT_WWW, this);	m_WWW_Link.SubclassDlgItem(IDC_ABOUT_WWW_LINK, this);	m_Ack.SubclassDlgItem(IDC_ABOUT_ACK, this);	m_Credits.SubclassDlgItem(IDC_ABOUT_CREDITS, this);		m_Version.SetBkMode(TRANSPARENT);	m_Patent.SetBkMode(TRANSPARENT);	m_Address.SetBkMode(TRANSPARENT);	m_Phone.SetBkMode(TRANSPARENT);	m_Email.SetBkMode(TRANSPARENT);	m_WWW.SetBkMode(TRANSPARENT);	m_Ack.SetBkMode(TRANSPARENT);	m_Credits.SetBkMode(TRANSPARENT);	m_Version.SetTextColor(RGB(255,255,255));	m_Patent.SetTextColor(RGB(255,255,255));	m_Address.SetTextColor(RGB(255,255,255));	m_Phone.SetTextColor(RGB(255,255,255));	m_Email.SetTextColor(RGB(255,255,255));	m_WWW.SetTextColor(RGB(255,255,255));	m_Ack.SetTextColor(RGB(255,255,255));	m_Credits.SetTextColor(RGB(255,255,255));	// Set up the links		m_Email_Link.SetURL("mailto:info@eyedx.com");	m_WWW_Link.SetURL("http://www.eyedx.com");		// We don't care to show a "visited" status, since this is an About Box		m_Email_Link.SetColours(RGB(255,255,255), RGB(255,255,255));	m_WWW_Link.SetColours(RGB(255,255,255), RGB(255,255,255));		m_Email_Link.SetUnderline(TRUE);	//m_Email_Link.SetLinkCursor(AfxGetApp()->LoadCursor(IDC_HAND));	m_Email_Link.SetAutoSize(TRUE);	m_WWW_Link.SetUnderline(TRUE);	//m_WWW_Link.SetLinkCursor(AfxGetApp()->LoadCursor(IDC_HAND));	m_WWW_Link.SetAutoSize(TRUE);	// Set the version number based on the application's resource setting		CString versionString;	CString theApplication;	CFileVersion version;			theApplication.Format("%s%s.EXE", DataPath, gMainApp.m_pszExeName);					if (version.Open(theApplication) == TRUE)	{		versionString.Format("%s %s", version.GetProductVersion(), version.GetLegalCopyright());		version.Close();		}	else		versionString.Format("Windows Version \xa9 1997, 1998, 1999 EyeDx, Inc.");	m_Version.SetWindowText(versionString);	EnableToolTips(TRUE);			return TRUE;}CEyeDxBooleanType CMFCAboutDialog::OnEraseBkgnd(CDC *pDC){		BITMAPINFOHEADER	bm_info_header;	BITMAPINFO			bm_info;		CRect rect;		GetClientRect(&rect);			bm_info_header.biSize=sizeof(BITMAPINFOHEADER); 	bm_info_header.biWidth=EYEDX_BKGND_DISPLAY_COLS;	bm_info_header.biHeight=-EYEDX_BKGND_DISPLAY_ROWS; 	bm_info_header.biPlanes=1;	bm_info_header.biBitCount=24; 	bm_info_header.biCompression=BI_RGB; 	bm_info_header.biSizeImage=0; 	bm_info_header.biXPelsPerMeter=0; 	bm_info_header.biYPelsPerMeter=0;	bm_info_header.biClrUsed=0; 	bm_info_header.biClrImportant=0;	// bm_info.bmiColors=NULL;	bm_info.bmiHeader=bm_info_header;	StretchDIBits(pDC->GetSafeHdc(),					0, 0, rect.right-rect.left, rect.bottom-rect.top, 					0, 0, EYEDX_BKGND_DISPLAY_COLS,EYEDX_BKGND_DISPLAY_ROWS,					eyedx_background_image,					&bm_info,					DIB_RGB_COLORS,					SRCCOPY);	return TRUE;}CEyeDxBooleanType CMFCAboutDialog::OnToolTipText(UINT, NMHDR* pNMHDR, LRESULT*){	TOOLTIPTEXT *pTTT = (TOOLTIPTEXT *) pNMHDR;	if (!(pTTT->uFlags & TTF_IDISHWND))	// the ID must be a handle to a window		return FALSE;			UINT uID = pNMHDR->idFrom;	uID = ::GetDlgCtrlID((HWND)uID);		printf("uID = %d\n", uID);	CString strTipText;		// Attempt to load a ToolTip string that corresponds to the control's ID		if(!strTipText.LoadString(uID))		return FALSE;		printf("strTipText = %s\n", strTipText);	// Stuff text into the ToolTip, 80 characters maximum		strncpy(pTTT->lpszText, strTipText, 80);	return TRUE;}