// CMFCRunFromCameraAutoWin.h#pragma once// Various constants that define the sizes and positions of disk window// elements// All of the sizes and positions of window elements must be based on the default// font size for the window. This is because the user may run with large fonts enabled// in the display setup, both through the Appearance setting as well as the display // adaptor setting. This makes things really confusing, since the EyeDx window is// supposed to be nominally 400x400 pixels. But we're working with character cell// widths and heights, instead, and the width to height ratio may not be constant,// depending on the font selected. I just used the default Windows font as the basis// for these values. The default font's cell size is 7x16 pixels. We could get really// anal and calculate the exact ratio between cell size and widths or heights, but I// won't bother. These approximations are good enough.#define AUTO_CAMERA_BUTTON_HEIGHT					2#define	AUTO_CAMERA_BUTTON_WIDTH					21#define AUTO_CAMERA_LEFT_MARGIN					3#define AUTO_CAMERA_RIGHT_MARGIN					AUTO_CAMERA_LEFT_MARGIN#define AUTO_CAMERA_CENTER_GAP						4#define	AUTO_CAMERA_INDENTED_MARGIN				(AUTO_CAMERA_LEFT_MARGIN + 4)#define AUTO_CAMERA_VIEW_WIDTH						24#define AUTO_CAMERA_VIEW_HEIGHT					7.8// Progress caption at the top of the window - Note that these overlap some other window elements - only// one set is shown at a time#define	AUTO_CAMERA_MAIN_VIEW_WIDTH(w)				((w) - AUTO_CAMERA_LEFT_MARGIN - AUTO_CAMERA_RIGHT_MARGIN)#define	AUTO_CAMERA_PROGRESS_CAPTION_WIDTH(w)		(AUTO_CAMERA_MAIN_VIEW_WIDTH(w) - 10 - 1)#define AUTO_CAMERA_PROGRESS_CAPTION_HEIGHT		2#define	AUTO_CAMERA_PROGRESS_CAPTION_X				(AUTO_CAMERA_LEFT_MARGIN)#define	AUTO_CAMERA_PROGRESS_CAPTION_Y				0.75// Progress bar to the right of the progress caption#define	AUTO_CAMERA_PROGRESS_BAR_WIDTH(w)			(AUTO_CAMERA_MAIN_VIEW_WIDTH(w) - AUTO_CAMERA_PROGRESS_CAPTION_WIDTH(w) - 1)#define AUTO_CAMERA_PROGRESS_BAR_HEIGHT			1#define	AUTO_CAMERA_PROGRESS_BAR_X(w)				((w) - AUTO_CAMERA_RIGHT_MARGIN - AUTO_CAMERA_PROGRESS_BAR_WIDTH(w))#define	AUTO_CAMERA_PROGRESS_BAR_Y					0.75// Progress captions at the top of the window#define	AUTO_CAMERA_UP_PROGRESS_CAPTION_WIDTH		(AUTO_CAMERA_VIEW_WIDTH)#define AUTO_CAMERA_UP_PROGRESS_CAPTION_HEIGHT		1.25#define	AUTO_CAMERA_UP_PROGRESS_CAPTION_X(w)		((w) - (AUTO_CAMERA_UP_PROGRESS_CAPTION_WIDTH / 2.0))#define	AUTO_CAMERA_UP_PROGRESS_CAPTION_Y			0.75// The X value is subtracted from the width of the window to get the real X#define	AUTO_CAMERA_SIDE_PROGRESS_CAPTION_WIDTH	(AUTO_CAMERA_VIEW_WIDTH)#define AUTO_CAMERA_SIDE_PROGRESS_CAPTION_HEIGHT	1.25#define	AUTO_CAMERA_SIDE_PROGRESS_CAPTION_X(w)		((w) - (AUTO_CAMERA_SIDE_PROGRESS_CAPTION_WIDTH / 2.0))#define	AUTO_CAMERA_SIDE_PROGRESS_CAPTION_Y		0.75// Progress bars below the progress captions#define	AUTO_CAMERA_UP_PROGRESS_BAR_WIDTH			(AUTO_CAMERA_VIEW_WIDTH)#define AUTO_CAMERA_UP_PROGRESS_BAR_HEIGHT			1#define	AUTO_CAMERA_UP_PROGRESS_BAR_X(w)			((w) - (AUTO_CAMERA_UP_PROGRESS_BAR_WIDTH / 2.0))#define	AUTO_CAMERA_UP_PROGRESS_BAR_Y				2// The X value is subtracted from the width of the window to get the real X#define	AUTO_CAMERA_SIDE_PROGRESS_BAR_WIDTH		(AUTO_CAMERA_VIEW_WIDTH)#define AUTO_CAMERA_SIDE_PROGRESS_BAR_HEIGHT		1#define	AUTO_CAMERA_SIDE_PROGRESS_BAR_X(w)			((w) - (AUTO_CAMERA_SIDE_PROGRESS_BAR_WIDTH / 2.0))#define	AUTO_CAMERA_SIDE_PROGRESS_BAR_Y			2// The Thumbnail Views#define	AUTO_CAMERA_UP_VIEW_WIDTH					(AUTO_CAMERA_VIEW_WIDTH)#define AUTO_CAMERA_UP_VIEW_HEIGHT					(AUTO_CAMERA_VIEW_HEIGHT)#define	AUTO_CAMERA_UP_VIEW_X(w)					((w) - (AUTO_CAMERA_UP_VIEW_WIDTH / 2.0))#define	AUTO_CAMERA_UP_VIEW_Y						3.25// The X value is subtracted from the width of the window to get the real X#define	AUTO_CAMERA_SIDE_VIEW_WIDTH				(AUTO_CAMERA_VIEW_WIDTH)#define AUTO_CAMERA_SIDE_VIEW_HEIGHT				(AUTO_CAMERA_VIEW_HEIGHT)#define	AUTO_CAMERA_SIDE_VIEW_X(w)					((w) - (AUTO_CAMERA_SIDE_VIEW_WIDTH / 2.0))#define	AUTO_CAMERA_SIDE_VIEW_Y					3.25// The Quality Icons#define	AUTO_CAMERA_UP_QUALITY_ICON_WIDTH			(2)#define AUTO_CAMERA_UP_QUALITY_ICON_HEIGHT			(2)#define	AUTO_CAMERA_UP_QUALITY_ICON_X(w)			((w) - (AUTO_CAMERA_UP_VIEW_WIDTH / 2.0))#define	AUTO_CAMERA_UP_QUALITY_ICON_Y				12// The X value is subtracted from the width of the window to get the real X#define	AUTO_CAMERA_SIDE_QUALITY_ICON_WIDTH		(2)#define AUTO_CAMERA_SIDE_QUALITY_ICON_HEIGHT		(2)#define	AUTO_CAMERA_SIDE_QUALITY_ICON_X(w)			((w) - (AUTO_CAMERA_SIDE_VIEW_WIDTH / 2.0))#define	AUTO_CAMERA_SIDE_QUALITY_ICON_Y			12// The Image Captions#define	AUTO_CAMERA_UP_CAPTION_WIDTH				(AUTO_CAMERA_VIEW_WIDTH - AUTO_CAMERA_UP_QUALITY_ICON_WIDTH - 1)#define AUTO_CAMERA_UP_CAPTION_HEIGHT				1.25#define	AUTO_CAMERA_UP_CAPTION_X(w)				((w) + (AUTO_CAMERA_UP_VIEW_WIDTH / 2.0) - (AUTO_CAMERA_UP_CAPTION_WIDTH))#define	AUTO_CAMERA_UP_CAPTION_Y					12// The X value is subtracted from the width of the window to get the real X#define	AUTO_CAMERA_SIDE_CAPTION_WIDTH				(AUTO_CAMERA_VIEW_WIDTH - AUTO_CAMERA_SIDE_QUALITY_ICON_WIDTH - 1)#define AUTO_CAMERA_SIDE_CAPTION_HEIGHT			1.25#define	AUTO_CAMERA_SIDE_CAPTION_X(w)				((w) + (AUTO_CAMERA_SIDE_VIEW_WIDTH / 2) - (AUTO_CAMERA_SIDE_CAPTION_WIDTH))#define	AUTO_CAMERA_SIDE_CAPTION_Y					12// The Label for the Report Name Field#define AUTO_CAMERA_NAME_CAPTION_WIDTH				27#define AUTO_CAMERA_NAME_CAPTION_HEIGHT			1.25#define	AUTO_CAMERA_NAME_CAPTION_X(w)				((w) - ((AUTO_CAMERA_NAME_CAPTION_WIDTH + AUTO_CAMERA_NAME_DISPLAY_WIDTH + 1) / 2.0))#define	AUTO_CAMERA_NAME_CAPTION_Y					14#define AUTO_CAMERA_NAME_CAPTION_LABEL				"Report Name or ID Number:"// The Report Name Caption#define AUTO_CAMERA_NAME_DISPLAY_WIDTH			21#define AUTO_CAMERA_NAME_DISPLAY_HEIGHT			1.25#define	AUTO_CAMERA_NAME_DISPLAY_X(w)			(AUTO_CAMERA_NAME_CAPTION_X(w) + AUTO_CAMERA_NAME_CAPTION_WIDTH + 1)#define	AUTO_CAMERA_NAME_DISPLAY_Y				14// This is the session status caption at the bottom of the window - its X position is the// same as the cancel button#define AUTO_CAMERA_SESSION_CAPTION_X(w)		((w) - (AUTO_CAMERA_SESSION_CAPTION_WIDTH / 2.0))#define	AUTO_CAMERA_SESSION_CAPTION_Y			25#define AUTO_CAMERA_SESSION_CAPTION_WIDTH		48#define AUTO_CAMERA_SESSION_CAPTION_HEIGHT		1.25#define AUTO_CAMERA_SESSION_CAPTION_LABEL		""enum eOrientation { kUpOrientation = 1, kSideOrientation = 2 };enum ePictureVerifyStatus { kPictureVerifyCancel, kPictureVerifyRetake, kPictureVerifyOK };// Forward declarationclass CMainWindow;class CMFCRunFromCameraAutoWin : public CMFCRunWin{	public:			CMFCRunFromCameraAutoWin(CRect *posRect, CMainWindow *myParent, 								CEyeDxBooleanType *DirectorySet, char *DefaultImagesDir,								CEyeDxBooleanType pAdjustName, int pDisplayReport,								EyeDxReportFormat reportFormat,								CStringArray *userTextBlocks,								DCPortNum *pPortNum, DCBitRate pConnectionRate);				int						GetReportName();				CEyeDxBooleanType		OpenCamera(CStatic *theStatusCaption);				CEyeDxBooleanType		SetCameraPictureParams(CStatic *theStatusCaption);		CEyeDxBooleanType		PromptForAndTakePicture(enum eOrientation theOrientation,															DCPictInfo *theGenericPictInfo,													DC120PictInfo *thePictInfo, 												    CEyeDxDibStatic *theMainWindowView, 												    CStatic *theMainWindowCaption,										    		EyeDxNextStepCode theResult);												    		enum ePictureVerifyStatus	VerifyPicture(enum eOrientation Location, 													CEyeDxVariableList *pVariableList,													DCPictInfo *theGenericPictInfo,													DC120PictInfo *thePictInfo, 												    CEyeDxDibStatic *theMainWindowView, 												    CStatic *theMainWindowCaption,												    CStatic *theMainWindowQualityIcon,										   			CEyeDxBooleanType *theImageAlreadyDownloaded);												    		CEyeDxBooleanType		DownloadPictures(EyeDxNextStepCode theResult, 													CEyeDxBooleanType upImageAlreadyDownloaded, 													CEyeDxBooleanType sideImageAlreadyDownloaded);				CEyeDxBooleanType		CleanupCameraAutoMode();				int						HandleAnotherSubjectPrompt();				int						HandleDeletePicture(CEyeDxCaptionType *theProgressCaption, 													DCPictInfo *theGenericPictInfo);			protected:		CEyeDxBooleanType					initialized;			virtual	afx_msg	int		OnCreate(LPCREATESTRUCT);		virtual void 			OnClose();		CEyeDxBooleanType		CameraAutoLoop();				void					HandleRunFromCameraAuto(UINT wParam, LONG lParam);										    		EyeDxNextStepCode		AnalyzeImages(CEyeDxBooleanType SaveFullInputImages,						    								CEyeDxBooleanType showRetakeOptions,						   									CEyeDxBooleanType cleanupImages,						   									EyeDxNextStepCode imagesToAnalyze = kNextStepContinue);				DECLARE_MESSAGE_MAP()		private:		CEyeDxBooleanType		m_AdjustName;		int						m_DisplayReport;		EyeDxReportFormat		m_ReportFormat;				DCPortNum				*m_PortNum;		DCBitRate				m_ConnectionRate;		CStatic					m_ctlProgressCaption;		CProgressCtrl			m_ctlProgressBar;				CBitmap					m_hBadBitmap;		CBitmap					m_hCautionBitmap;		CBitmap					m_hGoodBitmap;		CBitmap					m_hBatteryOKBitmap;		CBitmap					m_hBatteryWeakBitmap;		CBitmap					m_hBatteryEmptyBitmap;		CBitmap					m_hCameraUpBitmap;		CBitmap					m_hCameraSideBitmap;				CStringArray			*m_UserTextBlocks;				CEyeDxVariable			*m_SessionNameVariable;				AnalysisResults 		m_AnalysisResults;};