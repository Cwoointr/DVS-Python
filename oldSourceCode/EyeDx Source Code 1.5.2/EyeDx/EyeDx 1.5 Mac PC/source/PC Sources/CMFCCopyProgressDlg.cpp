/////////////////////////////////////////////////////////////////////////////// Copyright (C) 1998 by Jorge Lodos// All rights reserved//// Distribute and use freely, except:// 1. Don't alter or remove this notice.// 2. Mark the changes you made//// Send bug reports, bug fixes, enhancements, requests, etc. to://    lodos@cigb.edu.cu/////////////////////////////////////////////////////////////////////////////// PreviewFileDlg.cpp : implementation file//#define WINDOWS#include "stdafx.h"#include "resource.h"#include "CMFCCopyProgressDlg.h"#include <dlgs.h>/////////////////////////////////////////////////////////////////////////////// CMFCCopyProgressDlgIMPLEMENT_DYNAMIC(CMFCCopyProgressDlg, CDialog)CMFCCopyProgressDlg::CMFCCopyProgressDlg(BOOL *CancelPressed){	CancelPressedPtr = CancelPressed;}BEGIN_MESSAGE_MAP(CMFCCopyProgressDlg, CDialog)ON_NOTIFY_EX(TTN_NEEDTEXT, 0, OnToolTipText)END_MESSAGE_MAP()BOOL CMFCCopyProgressDlg::OnInitDialog() {	CDialog::OnInitDialog();	CenterWindow();		EnableToolTips(TRUE);			return TRUE;}void CMFCCopyProgressDlg::OnCancel() {	*CancelPressedPtr = TRUE;		// This will make the window go away, but not destroy it. The parent will	// do that for us.		CDialog::OnCancel();}void CMFCCopyProgressDlg::SetActionText(CString str){	m_ActionCtrl = (CStatic *) GetDlgItem(IDC_COPY_PROGRESS_ACTION);			m_ActionCtrl->SetWindowText(str);} void CMFCCopyProgressDlg::SetStepText(CString str){	m_StepCtrl = (CStatic *) GetDlgItem(IDC_COPY_PROGRESS_STEP);			m_StepCtrl->SetWindowText(str);} BOOL CMFCCopyProgressDlg::OnToolTipText(UINT, NMHDR* pNMHDR, LRESULT*){	TOOLTIPTEXT *pTTT = (TOOLTIPTEXT *) pNMHDR;	if (!(pTTT->uFlags & TTF_IDISHWND))	// the ID must be a handle to a window		return FALSE;			UINT uID = pNMHDR->idFrom;	uID = ::GetDlgCtrlID((HWND)uID);		CString strTipText;		// Attempt to load a ToolTip string that corresponds to the control's ID		if(!strTipText.LoadString(uID))		return FALSE;		// Stuff text into the ToolTip, 80 characters maximum		strncpy(pTTT->lpszText, strTipText, 80);	return TRUE;}