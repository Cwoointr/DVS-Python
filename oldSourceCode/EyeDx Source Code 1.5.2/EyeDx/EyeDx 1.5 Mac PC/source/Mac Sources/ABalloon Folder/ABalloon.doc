 A PowerPlant Attachment Class for Balloon Help©1998 by James W. Walker  <mailto:jwwalker@kagi.com>Version 1.3IntroductionI’ve always been annoyed by applications that don’t bother to implement balloon help, and I was flabbergasted to discover that there was no obvious way to do balloon help in PowerPlant windows.  I later found that several people has posted their own solutions in the contributed classes archive at the Metrowerks web site.  Here is another one, which has advantages over any others I have seen.  ABalloon does not require you to write or modify any code (except to register the class), works with default buttons, and even works with nested panes.  Optionally, you can make the balloons appear automatically, when you pause the mouse cursor over something of interest.Permission is granted for use of ABalloon free of charge, other than acknowledgement of	James W. Walker in any program using ABalloon (perhaps in an About box or in accompanying documentation).   The source code may not be sold for profit without permission.Automatic BalloonsBalloon help, in its original form, has several problems that have limited its popularity:  New users might not know it exists, it’s a bit of a bother to turn on and off, and once you turn it on, it wants to tell you about everthing, not just the one thing you wondered about.  Making balloons appear automatically when the mouse pauses over a control alleviates all of these problems.  This behavior is similar to the “tool tips” seen in some Windows and Mac applications, but a balloon gives a little more room for an informative description.  I’m not sure of the ideal time delay between pausing the mouse and the appearance of a balloon, but it’s probably between 1 and 2 seconds.In some situations, you may want to make balloons appear automatically for certain panes, rather than enabling automatic balloons for all panes that have ABalloon attachments.  In that case, you can attach an instance of the subclass AAutoBalloon to the pane.Changes to your CodeWarrior ProjectCopy ABalloon.cp and ABalloon.h into your project’s source hierarchy.  Add ABalloon.cp to your project.  In the source file in which you register PowerPlant classes, #include "ABalloon.h" and sayRegisterClass_(ABalloon);If you use the AAutoBalloon subclass, you must register it also.  You must compile with RTTI turned on in the C/C++ language settings.If you want global automatic balloons, call ABalloon::EnableAutoPop, somewhere in your startup code.  If you don’t like the default delay time of 60 ticks (about 1 second), also call ABalloon::SetAutoPopDelay.  You may also choose to call ABalloon::EnableControlKeyPop() if you want balloons to appear immediately when the control key is down.Using ABalloon in ConstructorFirst, place the file “ABalloon CTYP” in Constructor’s “Custom Types” folder.  The next time you launch Constructor, you should see ABalloon and AAutoBaloon in the Attachments section of the Catalog window. Open a PowerPlant window in which you want to write some balloon help.  Choose “Show Object Hierarchy” from the layout menu.  Drag ABalloon from the Catalog, and drop it so that it attaches to a pane that should have help balloons.  For instance, if you are assigning balloons to a checkbox, you should see something like this: If you want an individual balloon to appear automatically regardless of the global setting, you can attach AAutoBalloon instead of ABalloon.You’ll also need to create a String List resource containing the text that you want your balloons to show.  Let's say, for the sake of argument, that you create a string list resource with an ID of 228.  You will then enter that number in the Property Inspector window for the ABalloon attachment that you dropped into the hierarchy.  For each state that makes sense for the pane, assign the index of a string in the string list.  The Property Inspector will look something like this: You need not make any changes above the gray line that says ABalloon.  If some of the 4 states will never occur, you may leave the string index at 0.  You may also use the same string index for more than one item, for instance the “off, disabled” and “on, disabled” balloons will often be the same.If you are assigning a balloon that does not change states, like a caption, you probably want to put the string index on the line titled “off, enabled”, and leave the other 3 lines at 0.  In ABalloon, “off” means that the pane’s GetValue() method returns 0, and “on” means that GetValue() returns anything else.  Note that LPane’s implementation of GetValue() returns 0, so panes that are not controls are usually “off”.  Of course, “enabled” means that the IsEnabled() method returns true.Suggestions for SubclassesIf you have more states, or different states, than the ones I provided, you will probably want to override ComputeStringIndex.  To position the balloon’s tip more precisely, override ComputeTip.   If you want your balloons to display something other than strings, e.g., styled text or pictures, you will need to override ShowBalloon.