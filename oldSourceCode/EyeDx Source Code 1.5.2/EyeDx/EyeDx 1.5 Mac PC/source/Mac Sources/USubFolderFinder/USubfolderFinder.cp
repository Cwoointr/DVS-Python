// ===========================================================================//	USubfolderFinder.cp				© 1995, ƒric Forget. All rights reserved.// ===========================================================================//	//	************************************************************************//	*                                                                      *//	*	Before using this code you should read the "License Agreement"     *//	*	document and agree with it.                                        *//	*                                                                      *//	************************************************************************////	USubfolderFinder return the dirID and vRefNum for a named subfolder in//	the same folder than the application.////	This class could be useful if used in combination with LFolderWatcher//	(a separate package).//// ---------------------------------------------------------------------------////	Instruction Notes://	-----------------////	1) At the beginning of the application call:////			USubfolderFinder::Initialize();////	2) For each folder which you need the info, call:////			USubfolderFinder::FindFolderNamed();//// ---------------------------------------------------------------------------#include	"USubfolderFinder.h"// ---------------------------------------------------------------------------//		¥ Static members// ---------------------------------------------------------------------------AliasHandle		USubfolderFinder::sApplicationAliasH = nil;// ---------------------------------------------------------------------------//		¥ Initialize// ---------------------------------------------------------------------------voidUSubfolderFinder::Initialize(FSSpec *theSpec){	FSSpec		applSpec;	OSErr		theErr = noErr;		if (theSpec != nil)	{		applSpec = *theSpec;	}	else	{		StringPtr	applName = LMGetCurApName();		theErr = ::FSMakeFSSpec(0, 0, applName, &applSpec);		if (theErr != noErr) 			return;	}		::NewAliasMinimal(&applSpec, &sApplicationAliasH);}// ---------------------------------------------------------------------------//		¥ FindFolderNamed// ---------------------------------------------------------------------------OSErrUSubfolderFinder::FindFolderNamed(	Str255		inFolderName,	Int32		&outDirID,	Int16		&outVRefNum){	FSSpec			spec;	Boolean			wasChanged;	OSErr			rval;			Assert_(sApplicationAliasH != nil);		if((rval = ::ResolveAlias(nil, sApplicationAliasH, &spec, &wasChanged)) == noErr) {				CInfoPBRec		cBlock;		Int32			createdDirID = 0;						cBlock.dirInfo.ioCompletion		= nil;		cBlock.dirInfo.ioNamePtr		= inFolderName;		cBlock.dirInfo.ioFDirIndex		= 0;		cBlock.dirInfo.ioVRefNum		= spec.vRefNum;		cBlock.dirInfo.ioDrDirID		= spec.parID;						if((rval = ::PBGetCatInfoSync(&cBlock)) != noErr) {#if __PowerPlant__ < 0x01200000						::CopyPStr(inFolderName, spec.name);#else			LString::CopyPStr(inFolderName, spec.name);#endif						if((rval = ::FSpDirCreate(&spec, smSystemScript, &createdDirID)) == noErr) {							outVRefNum = spec.vRefNum;				outDirID = createdDirID;			}				} else {					outVRefNum = spec.vRefNum;			outDirID = cBlock.dirInfo.ioDrDirID;		}	}		return rval;}// ---------------------------------------------------------------------------//		¥ DoesFolderNamedExist// ---------------------------------------------------------------------------OSErrUSubfolderFinder::DoesFolderNamedExist(	Str255		inFolderName){	FSSpec			spec;	Boolean			wasChanged;	OSErr			rval;			Assert_(sApplicationAliasH != nil);		if((rval = ::ResolveAlias(nil, sApplicationAliasH, &spec, &wasChanged)) == noErr) {				CInfoPBRec		cBlock;		Int32			createdDirID = 0;						cBlock.dirInfo.ioCompletion		= nil;		cBlock.dirInfo.ioNamePtr		= inFolderName;		cBlock.dirInfo.ioFDirIndex		= 0;		cBlock.dirInfo.ioVRefNum		= spec.vRefNum;		cBlock.dirInfo.ioDrDirID		= spec.parID;						// If this returns noErr, then the folder exists				rval = ::PBGetCatInfoSync(&cBlock);	}		return rval;}