// =================================================================================//	CPreferenceWindow.cp					©1996-1998 Metrowerks Inc. All rights reserved.// =================================================================================//	This file contains the starter code for the Preferences and Report Layout window// members of CDocumentApp//#include <stdio.h>#include <unistd.h>#include <stdlib.h>#include <string.h>#include <fcntl.h>// This file includes the global variables used to interface with the C code// ported from the PC. It also defines some of the debugging macros#include "globals.h"#include "CDocumentApp.h"#include <NumberFormatting.h>#include <UTextTraits.h>#include <LWindow.h>#include <LGroupBox.h>#include <UResourceMgr.h>#include "EyeDxMacConstants.h"#include "CEyeDxPrefs.h"#include "DC120.h"#include <OSUtils.h>static DCBitRate kMenuItemToBitRates[] ={	DCBitRateAuto,		// There is no item 0	DCBitRateAuto, 		// Item 1	DCBitRate57600, 	// Item 2	DCBitRate115200, 	// Item 3	DCBitRate230400		// Item 4};Boolean CDocumentApp::HandlePreferences(){	Boolean theResult = false;	// Create the dialog handler.	StDialogHandler theHandler( PPob_PreferencesDialog, this );	// Get the dialog.	LWindow *theDialog;	theDialog = theHandler.GetDialog();	Assert_( theDialog != nil );		CEyeDxPopupMenuType *theReportDisplayMenu = dynamic_cast<CEyeDxPopupMenuType*> (theDialog->FindPaneByID(kPreferencesReportDisplay));	ThrowIfNil_( theReportDisplayMenu );		CEyeDxPopupMenuType *theBrowserMenu = dynamic_cast<CEyeDxPopupMenuType*> (theDialog->FindPaneByID(kPreferencesReportBrowser));	ThrowIfNil_( theBrowserMenu );		CEyeDxCheckBoxType *theReportNameCheckbox = dynamic_cast<CEyeDxCheckBoxType*> (theDialog->FindPaneByID(kPreferencesReportAdjustName));	ThrowIfNil_( theReportNameCheckbox );		CEyeDxPopupMenuType *theFormatMenu = dynamic_cast<CEyeDxPopupMenuType*> (theDialog->FindPaneByID(kPreferencesReportFormat));	ThrowIfNil_( theFormatMenu );		CEyeDxCheckBoxType *theUseSessionsCheckbox = dynamic_cast<CEyeDxCheckBoxType*> (theDialog->FindPaneByID(kPreferencesUseSessions));	ThrowIfNil_( theUseSessionsCheckbox );		CEyeDxCheckBoxType *theCameraSaveFilesCheckbox = dynamic_cast<CEyeDxCheckBoxType*> (theDialog->FindPaneByID(kPreferencesCameraSaveFiles));	ThrowIfNil_( theCameraSaveFilesCheckbox );		CEyeDxPopupMenuType *theCameraSpeedMenu = dynamic_cast<CEyeDxPopupMenuType*> (theDialog->FindPaneByID(kPreferencesCameraRateMenu));	ThrowIfNil_( theCameraSpeedMenu );		CEyeDxButtonType *theCancelButton = dynamic_cast<CEyeDxButtonType*> (theDialog->FindPaneByID(kPreferences_Cancel));	ThrowIfNil_( theCancelButton );		// Temporarily stop listening so we don't get messages when we set the values		StopListening();	// Set the values of the buttons to the current selection. Since the buttons are in a button	// group, setting one will automatically turn off the other.		switch (mBrowserCreatorCode)	{	case kUnknownType:		mBrowserCreatorCode = kNetscapeCreator;				// Force the user to hit ok!				theCancelButton->Disable();		// fall through to the next case			case kNetscapeCreator:		theBrowserMenu->SetValue(kPreferencesNetscapeRB);		break;	case kExplorerCreator:		theBrowserMenu->SetValue(kPreferencesExplorerRB);		break;	}	theCameraSaveFilesCheckbox->SetValue(mCameraPrefs.saveFiles);		theCameraSaveFilesCheckbox->Enable();		// Note that we use a case statement here instead of an if statement. Eventually, there	// will be various combinations of displayOption and formatOption settings. Also note that	// the default value of the displayOption is "0" (kDisplayReport), so we can't just set the	// checkbox value to the value of the preference flag (inverted sense).		switch (mReportPrefs.displayOption)	{	case kDisplaySummary:				theReportDisplayMenu->SetValue(kPreferencesReportSummary);		break;			case kDisplayReport:				theReportDisplayMenu->SetValue(kPreferencesReportDoDisplay);		break;			case kDontDisplayReport:				theReportDisplayMenu->SetValue(kPreferencesReportNone);		break;	}		switch (mReportPrefs.adjustName)	{	case kAdjustName:				theReportNameCheckbox->SetValue(Button_On);		break;			case kDontAdjustName:				theReportNameCheckbox->SetValue(Button_Off);		break;	}		switch (mReportPrefs.formatOption)	{	case kStandardReportFormat:		theFormatMenu->SetValue(kPreferencesReportStandard);		break;	case kCustomReportFormat1:		theFormatMenu->SetValue(kPreferencesReportCustom1);		break;	}		switch (mReportPrefs.useSessions)	{	case kNoSessions:		theUseSessionsCheckbox->SetValue(Button_Off);		break;	case kUseSessions:		theUseSessionsCheckbox->SetValue(Button_On);		break;	}		// If a session is active, we don't allow them to change the status!	CEyeDxVariable *theSessionNameVariable = mVariableList.GetVariableByName(CommonStringLiteral_(kCEyeDxVariableSESSIONNAME));	ThrowIfNil_( theSessionNameVariable );	CEyeDxLongStringType *theSessionName = theSessionNameVariable->GetValue();		if (*theSessionName == CommonStringLiteral_(kDefaultSessionName))		theUseSessionsCheckbox->Enable();	else	{		CEyeDxLongStringType theLabel;				theUseSessionsCheckbox->GetDescriptor(theLabel);		theLabel.Append("\p (Session currently active)");		theUseSessionsCheckbox->SetDescriptor(theLabel);		theUseSessionsCheckbox->Disable();	}				switch (mCameraPrefs.portSpeed)	{	case DCBitRateAuto:		theCameraSpeedMenu->SetValue(1);		break;			case DCBitRate57600:		theCameraSpeedMenu->SetValue(2);		break;		case DCBitRate115200:		theCameraSpeedMenu->SetValue(3);		break;		case DCBitRate230400:		theCameraSpeedMenu->SetValue(4);		break;	default:		// For those we don't recognize, we just set the speed to Auto		theCameraSpeedMenu->SetValue(1);		break;	}		StartListening();	// Make the dialog visible.	theDialog->Show();		while ( true ) 	{		// Handle dialog messages.		MessageT theMessage = theHandler.DoDialog();		if ( theMessage == msg_Cancel ) 		{			// Just break out of the loop.			break;		}		else if (theMessage == msg_SelectFormat)		{			switch (theFormatMenu->GetValue())			{			case kPreferencesReportStandard:				break;			case kPreferencesReportCustom1:				break;			}		}		else if ( theMessage == msg_OK ) 		{			// Get the value of the radio buttons that specify the browser to use			theResult = true;						switch (theBrowserMenu->GetValue())			{			case kPreferencesNetscapeRB:				mBrowserCreatorCode = kNetscapeCreator;				break;							case kPreferencesExplorerRB:				mBrowserCreatorCode = kExplorerCreator;				break;			}						mPreferences->SaveBrowserPref(mBrowserCreatorCode);							// Now update the global that tells us whether to save the full images, and also			// write the resource out to the preferences file. Note that the CameraPrefs is a			// structure that currently has one non-reserved field: saveFiles, which is a long			// boolean value.				mCameraPrefs.saveFiles = SaveFullImages = theCameraSaveFilesCheckbox->GetValue();						// And we also save the user's choice for camera connection rate by looking up			// the speed code						mCameraPrefs.portSpeed = kMenuItemToBitRates[theCameraSpeedMenu->GetValue()];				mPreferences->SaveCameraPrefs(&mCameraPrefs);	 			// The ReportPrefs structure has three fields, but only two (displayOption) and 			// adjustName are currently set by the user. The other (formatOption) defaults to kStandardReportFormat,  			// and we just leave it alone for now. At some point other report formats will exist,			// and we will support them here. Also note that the checkbox boolean sense is inverted			// with respect to the flag in the resource. This is because we use the default "0" value			// for backward compatibility.						switch (theReportDisplayMenu->GetValue())			{			case kPreferencesReportSummary:								mReportPrefs.displayOption = kDisplaySummary;				break;							case kPreferencesReportDoDisplay:				mReportPrefs.displayOption = kDisplayReport;				break;							case kPreferencesReportNone:				mReportPrefs.displayOption = kDontDisplayReport;				break;			}				switch (theReportNameCheckbox->GetValue())			{			case true:				mReportPrefs.adjustName = kAdjustName;				break;						case false:				mReportPrefs.adjustName = kDontAdjustName;				break;			}						switch (theFormatMenu->GetValue())			{			case kPreferencesReportStandard:				mReportPrefs.formatOption = kStandardReportFormat;				break;			case kPreferencesReportCustom1:				mReportPrefs.formatOption = kCustomReportFormat1;							break;			}			switch (theUseSessionsCheckbox->GetValue())			{			case true:				mReportPrefs.useSessions = kUseSessions;				break;			case false:				mReportPrefs.useSessions = kNoSessions;							break;			}			mPreferences->SaveReportPrefs(&mReportPrefs);							break;		}	}	return theResult;}