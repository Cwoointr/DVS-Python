#pragma once#include <math.h>#include <LCommander.h>#include <LApplication.h>#include <LPushButton.h>#include <LStaticText.h>#include <LProgressBar.h>#include <LPopupButton.h>#include <LGADialog.h>const UInt16	kProgressDialogID = 30331;	// id of our ‘PPob’const PaneIDT	kStopButton 		= 7;const PaneIDT	kCaption1ID 		= 'cap1';const PaneIDT	kCaption2ID 		= 'cap2';const PaneIDT	kCaption3ID 		= 'cap0';const PaneIDT	kBackgroundPane		= 3;const PaneIDT	kProgressBarID 		= 4;const PaneIDT	kTimeWordsCapt 		= 5;const PaneIDT	kTimeCapt 			= 6;const MessageT	kStopButtonMsg		= 'stop';class LProgressDialog: public LGADialog {public:		enum { class_ID = 'mPrD' };						LProgressDialog(Str255 inActivity, LCommander *inSuperCommander);						~LProgressDialog();						LProgressDialog( LStream *inStream );	static LProgressDialog*						newLProgressDialog (LCommander *inCommander = nil);	void				SetActionDescriptor(Str255 inAction);	void 				SetStepDescriptor(Str255 inStep);	void 				SetCountDescriptor(Str255 inCount);	void				SetTitle(Str255 inTitle);	void				SetValues(SInt32 inMin, SInt32 inMax, SInt32 inCur);	void				ThisMuchCompleted(SInt32 inCur);	void				CompletedThisMuchMore(SInt32 inThisMuchMore);	void				Progress(SInt32 inCur=0);	// zero is for indeterminate case	void				GetValues(SInt32 &outMin, SInt32 &outMax, SInt32 &outCur);	virtual void		ListenToMessage(MessageT inMessage,	void *ioParam);	inline void			SetIncrements(short inNum) {mNumIncrements = inNum;};	void				SpinPattern();	void				PauseCycle();	Boolean				CancelClicked() { return mCancelClicked; };	protected:	virtual void		FinishCreateSelf();	protected:	LApplication			*mTheApp;	LPushButton				*mStopButton;	LStaticText				*mCaption1;	LStaticText				*mCaption2;	LStaticText				*mCaption3;	LStaticText				*mTimeCaption;	LStaticText				*mTimeWordsCaption;	LProgressBar			*mProgressBar;	SInt32					mMinValue, mMaxValue;	// * start and end value	SInt32					mCurValue;				// * current value	unsigned long			mTimeAtMinValPlus;		// tick count after first increment	short					mValAtMinValPlus;		// value of first increment	short					mNumIncrements;			// number of times to change thermometer	short					mCurIter;	Boolean					mSpinning;	Boolean					mRateSet;	Boolean					mCancelClicked;};