#pragma once#include <UReanimator.h>#include "LProgressDialog.h"// ---------------------------------------------------------------------------------//		¥ LProgressDialog()		[static]// ---------------------------------------------------------------------------------LProgressDialog*LProgressDialog::newLProgressDialog(LCommander *inCommander){	LProgressDialog *thePD = nil;	RegisterClass_(LProgressDialog);	if (inCommander != nil)		thePD = (LProgressDialog *) LWindow::CreateWindow( kProgressDialogID, inCommander);	else		thePD = (LProgressDialog *) LWindow::CreateWindow( kProgressDialogID, LCommander::GetTopCommander() );	ThrowIfNil_( thePD );	return thePD;}// ---------------------------------------------------------------------------------//		¥ LProgressDialog(LStream *)// ---------------------------------------------------------------------------------LProgressDialog::LProgressDialog(	LStream *inStream )		: LGADialog( inStream ){	mCaption1 = nil;	mCaption2 = nil;	mCaption3 = nil;	mProgressBar = nil;	mMinValue = mMaxValue = mCurValue = 0;	mTimeAtMinValPlus = 0;	mValAtMinValPlus = 0;	mNumIncrements = 50;	mCurIter = 1;	mRateSet = false;	mCancelClicked = false;}// ---------------------------------------------------------------------------------//		¥ ~LProgressDialog// ---------------------------------------------------------------------------------LProgressDialog::~LProgressDialog(){}// ---------------------------------------------------------------------------------//		¥ FinishCreateSelf// ---------------------------------------------------------------------------------voidLProgressDialog::FinishCreateSelf(){	mTheApp = (LApplication *) LCommander::GetTopCommander();	mCaption1 = (LStaticText *) FindPaneByID(kCaption1ID);	mCaption2 = (LStaticText *) FindPaneByID(kCaption2ID);	mCaption3 = (LStaticText *) FindPaneByID(kCaption3ID);	mTimeCaption = (LStaticText *) FindPaneByID(kTimeCapt);	mTimeWordsCaption = (LStaticText *) FindPaneByID(kTimeWordsCapt);	mProgressBar = (LProgressBar *) FindPaneByID(kProgressBarID);	mStopButton = (LPushButton *) FindPaneByID(kStopButton);		// link this to it's controls	UReanimator::LinkListenerToControls(this, (LView *) this, kProgressDialogID);		SetCancelButton(kStopButton);		LGADialog::FinishCreateSelf();}// ---------------------------------------------------------------------------------//		¥ SetTitle// ---------------------------------------------------------------------------------voidLProgressDialog::SetTitle(Str255 inTitle){	SetDescriptor(inTitle);}// ---------------------------------------------------------------------------------//		¥ SetActionDescriptor// ---------------------------------------------------------------------------------voidLProgressDialog::SetActionDescriptor(Str255 inAction){	mCaption1->SetDescriptor(inAction);}// ---------------------------------------------------------------------------------//		¥ SetActionDescriptor// ---------------------------------------------------------------------------------voidLProgressDialog::SetStepDescriptor(Str255 inAction){	mCaption2->SetDescriptor(inAction);}// ---------------------------------------------------------------------------------//		¥ SetActionDescriptor// ---------------------------------------------------------------------------------voidLProgressDialog::SetCountDescriptor(Str255 inAction){	mCaption3->SetDescriptor(inAction);}// ---------------------------------------------------------------------------------//		¥ SetValues// ---------------------------------------------------------------------------------voidLProgressDialog::SetValues(SInt32 inMin, SInt32 inMax, SInt32 inCur){	if (inMin == 0 && inMax == 0) {		mSpinning = true;		mProgressBar->SetIndeterminateFlag(true);		mTimeCaption->Hide();		mTimeWordsCaption->Hide();	} else {		mSpinning = false;		mTimeCaption->Show();		mTimeWordsCaption->Show();		mProgressBar->SetIndeterminateFlag(false);		mProgressBar->SetMinValue(inMin);		mProgressBar->SetMaxValue(inMax);		mMinValue = inMin;		mMaxValue = inMax;		mCurValue = inCur;		mTimeAtMinValPlus = 0;		mValAtMinValPlus = 0;		mRateSet = false;		mTimeCaption->SetDescriptor("\punknown");		ThisMuchCompleted(inCur);	}	UpdatePort();}// ---------------------------------------------------------------------------------//		¥ GetValues// ---------------------------------------------------------------------------------voidLProgressDialog::GetValues(SInt32 &outMin, SInt32 &outMax, SInt32 &outCur){	outMin = mMinValue;	outMax = mMaxValue;	outCur = mCurValue;}#include <stdio.h>// ---------------------------------------------------------------------------------//		¥ ThisMuchCompleted// ---------------------------------------------------------------------------------voidLProgressDialog::ThisMuchCompleted(SInt32 inCur){	mTheApp->ProcessNextEvent();	if (!mRateSet) {		mTimeAtMinValPlus = ::TickCount();		mValAtMinValPlus = inCur;		mRateSet = true;	} else if (inCur != mCurValue) {		mCurValue = inCur;		unsigned long curTicks = ::TickCount();		double_t ticksToFinish =  (double_t)(curTicks - mTimeAtMinValPlus) * (mMaxValue - inCur) / (inCur - mValAtMinValPlus);		float_t secsToFinish = ticksToFinish / 60.0;		short	timeToFinish_hrs = secsToFinish / 3600.0;		short	timeToFinish_mins = fmod((double_t)(secsToFinish), (double_t)(3600.0)) / 60;		short	timeToFinish_secs = secsToFinish - 60*timeToFinish_mins - 3600*timeToFinish_hrs;		char Str[60];		sprintf(Str, "%02hi:%02hi:%02hi", timeToFinish_hrs, timeToFinish_mins, timeToFinish_secs);		mTimeCaption->SetDescriptor(c2pstr(Str));		mProgressBar->SetValue(inCur);	}}// ---------------------------------------------------------------------------------//		¥ Progress (read as verb: pro-GRESS)// ---------------------------------------------------------------------------------voidLProgressDialog::Progress(SInt32 inCur){	if (!mRateSet) {		ThisMuchCompleted(inCur);	} else if (mMaxValue < mNumIncrements) {		ThisMuchCompleted(inCur);	// do every time	} else if ((inCur % (mMaxValue / mNumIncrements)) == 0) {		ThisMuchCompleted(inCur);	// do mNumIncrements times	}}// * Making progress incrementallyvoid LProgressDialog::CompletedThisMuchMore(SInt32 inThisMuchMore){	ThisMuchCompleted(mCurValue + inThisMuchMore);}// ---------------------------------------------------------------------------//		¥ ListenToMessage// ---------------------------------------------------------------------------//	Respond to messages from BroadcastersvoidLProgressDialog::ListenToMessage(	MessageT	inMessage,	void		*ioParam){	long value = *((long *) ioParam);	switch (inMessage) {		case kStopButtonMsg:	// to get this message, we must have already paused			// reset the button states first before throwing			// Hide Stop			if (!mSpinning) {				// Show Time				mTimeCaption->Show();			}			mProgressBar->Start();	// does nothing if determinate			mCancelClicked = true;		break;	}}