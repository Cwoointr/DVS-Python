// =================================================================================//	CDocumentApp.h	 				©1996-1998 Metrowerks Inc. All rights reserved.// =================================================================================#pragma once#include <PP_Prefix.h>#include <LDocApplication.h>#include <LTextGroupBox.h>#include "CMyGWorldView.h"#include "LProgressBar.h"#include "CEyeDxPrefs.h"#include "USubFolderFinder.h"#include <LIconControl.h>#include "DC120.h"#include "LicenseLib.h"#include "CEyeDxLicenseFile.h"#include "CEyeDxVariables.h"#include "TArray.h"#include <LStdControl.h>#include <LTextTableView.h>#include <LScrollerView.h>#include <LMultiPanelView.h>#include <LTableSingleRowSelector.h>enum eOrientation { kUpOrientation = 1, kSideOrientation = 2 };enum ePictureVerifyStatus { kPictureVerifyCancel, kPictureVerifyRetake, kPictureVerifyOK };const long		kRunThreshold = 300000;class CDocumentApp : 	public PP_PowerPlant::LDocApplication, 						public PP_PowerPlant::LListener, 						public PP_PowerPlant::LBroadcaster{public:							CDocumentApp();			// constructor registers PPobs	virtual 				~CDocumentApp();		// stub destructor		virtual void			ListenToMessage( MessageT inMessage,											 void *ioParam );protected:	virtual void						StartUp();				// override startup functions#if FALSE		// this overriding method is called when the FileMenu ->Open items is selected.	virtual void						OpenDocument( FSSpec *inMacFSSpec );		// this method creates a new instance of a document	virtual PP_PowerPlant::LModelObject *MakeNewDocument();		// this method displays the StandardFile Open dialog	virtual void						ChooseDocument();		// this method prints the open document	virtual void						PrintDocument( FSSpec *inMacFSSpec );#endif	// Basic Session Management Routines		virtual void						CreateFolders();		virtual void						SaveSessionStatus();		virtual void						CancelToClose();		// Preferences Routines		virtual Boolean						HandlePreferences();		virtual void						UpdateVariableList(CEyeDxVariableList *theVariableList, 															CEyeDxBooleanType updateVariableMenu,									 					    CEyeDxBooleanType showHidden,									 						CEyeDxVariable *reselectVariable = nil);		virtual void						UpdateExportVariableList(CEyeDxVariableList *theExportedVariableList, 																 CEyeDxBooleanType updateMenuAsWell,																 CEyeDxBooleanType showHidden,  																 long itemToSelect = 0);																 	virtual Boolean						HandleEditVariable(CEyeDxVariable *theVariable, 															CEyeDxBooleanType newVariable = false, 															CEyeDxBooleanType showHidden = false);		// About Dialog and Splash Screen Routines		virtual	void						HandleAbout();			virtual	void						HandleSplashScreen();		// Report Management Routines			virtual OSErr						OpenReport(FSSpec *theReportSpec);	virtual void						HandleExportReports(bool flattenReports);		// Auto Camera Mode Routines		virtual void						HandleSummaryZoom(CEyeDxLongStringType *theName, 												  CEyeDxHandleType theImage, 												  int theMainImageRows,												  int theMainImageCols,												  CEyeDxHandleType theRightEyeImage,												  CEyeDxHandleType theLeftEyeImage,												  int theEyeImageRows,												  int theEyeImageCols);							  	virtual EyeDxNextStepCode			HandleSummaryDisplay(AnalysisResults *theAnalysisResults,													 FSSpec *theReportSpec,												 	 CEyeDxBooleanType showRetakeOptions = false);		virtual CEyeDxBooleanType			CameraAutoLoop();		virtual	void						HandleRunFromCameraAuto();		virtual	MessageT					HandleCameraSetup(CEyeDxBooleanType autoStartMode);	virtual	CEyeDxBooleanType			GetReportName();		virtual	CEyeDxBooleanType			OpenCamera(CEyeDxCaptionType *theStatusCaption);		virtual	CEyeDxBooleanType			PromptForAndTakePicture(enum eOrientation theOrientation, 											DCPictInfo *theGenericPictInfo,											DC120PictInfo *thePictInfo, 										    CEyeDxViewType *theMainWindowView, 										    CEyeDxCaptionType *theMainWindowCaption,										    EyeDxNextStepCode theResult);		virtual void						HandleVerifyZoom(enum eOrientation Location, 										    CEyeDxViewType *theMainWindowView, 										    CEyeDxCaptionType *theMainWindowCaption,										    CEyeDxBooleanType *theImageAlreadyDownloaded);							  								virtual	enum ePictureVerifyStatus	VerifyPicture(enum eOrientation Location, 											DCPictInfo *theGenericPictInfo,											DC120PictInfo *thePictInfo, 										    CEyeDxViewType *theMainWindowView, 										    CEyeDxCaptionType *theMainWindowCaption,										    CEyeDxIconType *theMainWindowQualityIcon,										    CEyeDxBooleanType *theImageAlreadyDownloaded);										    	virtual	CEyeDxBooleanType			SetCameraPictureParams(CEyeDxCaptionType *theStatusCaption);		virtual	CEyeDxBooleanType			DownloadPictures(EyeDxNextStepCode theResult, 														CEyeDxBooleanType upImageAlreadyDownloaded, 														CEyeDxBooleanType sideImageAlreadyDownloaded);		virtual	MessageT					HandleAnotherSubjectPrompt();	virtual	CEyeDxBooleanType			CleanupCameraAutoMode();	virtual CEyeDxBooleanType			HandleDeleteImage(void *theWindow,										 CEyeDxCaptionType *theProgressCaption,				 						 DCPictInfo *theGenericPictInfo);				 						 	// General Management Routines				 						 	virtual void						HideMoveShow(LWindow *toHide, LWindow *toShow);		virtual Boolean						ObeyCommand(CommandT, void*);		virtual	void						FindCommandStatus(CommandT inCommand, 											Boolean 	&outEnabled,											Boolean		&outUsesMark,											Char16		&outMark,											Str255		outName);												virtual Boolean						HandleKeyPress(const EventRecord &inKeyEvent);	// Image Management and Analysis Routines												virtual void 						CleanupUpImage(CEyeDxViewType *theUpView);	virtual void 						CleanupSideImage(CEyeDxViewType *theSideView);	virtual void 						CleanupImages(CEyeDxViewType *theUpView, 											CEyeDxViewType *theSideView);	virtual EyeDxNextStepCode 			AnalyzeImages(LWindow *theWindow, 						    				CEyeDxViewType *theUpView,						    				CEyeDxViewType *theSideView,						    				CEyeDxBooleanType SaveFullInputImages,						    				CEyeDxBooleanType showRetakeOptions = false,						    				CEyeDxBooleanType cleanupImages = true,						   					EyeDxNextStepCode imagesToAnalyze = kNextStepContinue);						    					virtual Boolean						HandleCameraImageSelect(MessageT	inMessage, 										   CEyeDxViewType *theMainWindowView, 										   CEyeDxCaptionType *theMainWindowCaption,										   DCPictInfo *theMainWindowGenericPictInfo,										   DC120PictInfo *theMainWindowPictInfo,										   CEyeDxIconType *theMainWindowQualityIcon);										   	// License Management Routines										   	void								HandleLicenseEntry(enum LicenseStatus theStatus, CEyeDxBooleanType exitPrompt);	void								HandleLicenseExpired(enum LicenseStatus theStatus);	void								HandleLicenseDisplay(enum LicenseStatus theStatus);		LicenseStatus						GetLicenseStatus();	LicenseError						DecrementLicenseCounter();	LicenseError						UpdateLicense(EyeDxLicenseInfo *theLicense);	LicenseError						EncodeLicenseFileData(LicenseData *inLicenseData);	LicenseError						DecodeLicenseFileData(LicenseData *inLicenseData);	LicenseError						LoadLicense();	LicenseError						SaveLicense();	void								SetLicenseStatusCaption(CEyeDxCaptionType *theCaption);	void								GetLicenseExpDateString(LStr255 &theString);	void								GetLicenseCountString(LStr255 &theString);	private:	// Variables that hold preferences	CEyeDxPrefs							*mPreferences;						// The preference file object	CameraPrefs							mCameraPrefs;						// The options related to the Run From Camera window	OSType								mBrowserCreatorCode;				// The current choice of browser to use	ReportPrefs							mReportPrefs;						// The options related to report display and format	PromptingPrefs						mPromptingPrefs;					// How to prompt for variables	Handle								mReportDefaultText[kReportLayoutNumText];	Handle								mReportCustomText[kReportLayoutNumText];		Handle								mUpHandle;	Handle								mSideHandle;		LWindow 							*mMainWindow;	LWindow 							*mCameraWindow;	LWindow 							*mAutoCameraWindow;	LWindow 							*mDiskWindow;	LWindow 							*mAnalysisWindow;		CEyeDxButtonType					*mMainRunFromDiskButton;	CEyeDxButtonType					*mMainSessionButton;		LEraseAttachment					*mEraseAttachment;	LBorderAttachment					*mBorderAttachment;	CEyeDxProgressType 					*mCameraUpThermometerPane;	CEyeDxProgressType 					*mCameraSideThermometerPane;	CEyeDxCaptionType					*mCameraUpProgressCaption;	CEyeDxCaptionType 					*mCameraSideProgressCaption;		CEyeDxCheckBoxType 					*mCameraAnimate;	CEyeDxEditFieldType 				*mCameraReportName;	CEyeDxCaptionType 					*mCameraUpCaption;	CEyeDxCaptionType 					*mCameraSideCaption;		CEyeDxViewType 						*mCameraUpView;	CEyeDxViewType 						*mCameraSideView;	CEyeDxIconType						*mCameraUpPictureQualityIcon;	CEyeDxIconType						*mCameraSidePictureQualityIcon;	LDefaultOutline						*mCameraDefaultOutline;	CEyeDxCaptionType					*mCameraLicenseStatusCaption;	CEyeDxCaptionType					*mCameraSessionCaption;	CEyeDxIconButtonType				*mCameraUpZoomButton;	CEyeDxIconButtonType				*mCameraSideZoomButton;		CEyeDxProgressType 					*mAutoCameraUpThermometerPane;	CEyeDxProgressType 					*mAutoCameraSideThermometerPane;	CEyeDxCaptionType					*mAutoCameraUpProgressCaption;	CEyeDxCaptionType 					*mAutoCameraSideProgressCaption;		CEyeDxCaptionType 					*mAutoCameraReportName;	CEyeDxCaptionType 					*mAutoCameraUpCaption;	CEyeDxCaptionType 					*mAutoCameraSideCaption;		CEyeDxViewType 						*mAutoCameraUpView;	CEyeDxViewType 						*mAutoCameraSideView;	CEyeDxIconType						*mAutoCameraUpPictureQualityIcon;	CEyeDxIconType						*mAutoCameraSidePictureQualityIcon;	LDefaultOutline						*mAutoCameraDefaultOutline;	CEyeDxCaptionType					*mAutoCameraLicenseStatusCaption;	CEyeDxCaptionType					*mAutoCameraSessionCaption;		CEyeDxProgressType 					*mDiskUpThermometerPane;	CEyeDxProgressType 					*mDiskSideThermometerPane;	CEyeDxCaptionType					*mDiskUpProgressCaption;	CEyeDxCaptionType 					*mDiskSideProgressCaption;		CEyeDxCheckBoxType 					*mDiskAnimate;	CEyeDxEditFieldType 				*mDiskReportName;	CEyeDxCaptionType 					*mDiskUpCaption;	CEyeDxCaptionType 					*mDiskSideCaption;		CEyeDxViewType 						*mDiskUpView;	CEyeDxViewType 						*mDiskSideView;	CEyeDxIconType						*mDiskUpPictureQualityIcon;	CEyeDxIconType						*mDiskSidePictureQualityIcon;	LDefaultOutline						*mDiskDefaultOutline;	CEyeDxCaptionType					*mDiskLicenseStatusCaption;	CEyeDxCaptionType					*mDiskSessionCaption;	CEyeDxIconButtonType				*mDiskUpZoomButton;	CEyeDxIconButtonType				*mDiskSideZoomButton;		CEyeDxProgressType 					*mAnalysisThermometerPane;	CEyeDxCaptionType 					*mAnalysisProgressCaption;	CEyeDxViewType 						*mAnalysisUpView;	CEyeDxViewType 						*mAnalysisSideView;	CEyeDxViewType 						*mAnalysisMainView;	CEyeDxCaptionType 					*mAnalysisUpCaption;	CEyeDxCaptionType 					*mAnalysisSideCaption;	CEyeDxTextGroupBoxType				*mAnalysisMainViewGroupBox;	CEyeDxTextGroupBoxType				*mAnalysisUpViewGroupBox;	CEyeDxTextGroupBoxType				*mAnalysisSideViewGroupBox;		// These are the controls for the Custom Reporting Options window - will	// eventually be moved into a separate dialog object		// Common objects		CEyeDxButtonType 					*mPreferencesCancelButton;		CEyeDxButtonType 					*mPreferencesOKButton;		CEyeDxTabsControlType				*mPreferencesTabs;	LMultiPanelView						*mPreferencesVariableMultiPanelView;	LView								*mPreferencesGeneralPrefsPanel;	LView								*mPreferencesVariablePanel;	LView								*mPreferencesDefineTextPanel;	LView								*mPreferencesDatabasePanel;		// The General Prefs Pane		CEyeDxPopupMenuType 				*mPreferencesReportDisplayMenu;	CEyeDxPopupMenuType 				*mPreferencesBrowserMenu;		CEyeDxCheckBoxType 					*mPreferencesReportNameCheckbox;		CEyeDxPopupMenuType 				*mPreferencesFormatMenu;		CEyeDxCheckBoxType 					*mPreferencesUseSessionsCheckbox;		CEyeDxCheckBoxType 					*mPreferencesCameraSaveFilesCheckbox;		CEyeDxPopupMenuType 				*mPreferencesCameraSpeedMenu;	CEyeDxCheckBoxType					*mPreferencesAutoStartAutoModeCheckbox;		// The Variable List Pane		LScrollerView						*mPreferencesVariableScroller;	LTextTableView 						*mPreferencesVariableTable;			CEyeDxButtonType 					*mPreferencesNewVariableButton;		CEyeDxButtonType 					*mPreferencesEditVariableButton;		CEyeDxButtonType 					*mPreferencesDeleteVariableButton;		CEyeDxCheckBoxType 					*mPreferencesPromptStyleCheckBox;	LTableSingleRowSelector				*mPreferencesVariableTableSelector;		// The Define Text Pane		CEyeDxPopupMenuType	 				*mPreferencesDefineTextMenu;	CEyeDxCaptionType 					*mPreferencesDefineTextCaption;	LScrollerView						*mPreferencesTextEditScroller;	LTextEditView 						*mPreferencesTextEdit;		CEyeDxButtonType 					*mPreferencesRevertButton;		CEyeDxButtonType 					*mPreferencesDefaultButton;		CEyeDxPopupMenuType 				*mPreferencesVariableMenu;			// The Database Export Pane		LScrollerView						*mPreferencesExportedVariableScroller;	LTextTableView						*mPreferencesExportedVariableTable;			CEyeDxButtonType 					*mPreferencesExportedMoveUpButton;	CEyeDxButtonType 					*mPreferencesExportedMoveDownButton;	CEyeDxButtonType 					*mPreferencesExportedRemoveItemButton;	CEyeDxPopupMenuType					*mPreferencesExportedVariableMenu;	LTableSingleRowSelector				*mPreferencesExportedVariableTableSelector;		CEyeDxBooleanType					mDirectorySet;	CEyeDxBooleanType 					mUpSelected;	CEyeDxBooleanType 					mSideSelected;	CEyeDxBooleanType 					mUpImageDownloaded;	CEyeDxBooleanType 					mSideImageDownloaded;		USubfolderFinder 					mFolderFinder;		CEyeDxBooleanType					mFirstTimeAutoStart;	FSSpec								mApplSpec;					// The FSSpec for the directory containing the application	FSSpec 								mLastImageDirSpec;			// Saves last directory the user picked for image load	FSSpec 								mLastReportDirSpec;			// Saves last directory the user picked for report load	FSSpec								mReportDirSpec;				// Spec for the reports directory without the name	FSSpec								mPImagesDirSpec;			// Spec for the PImages directory without the name	FSSpec								mPImagesSpec;				// Spec for the PImages directory	FSSpec								mSImagesSpec;				// Spec for the SImages directory	FSSpec								mReportsSpec;				// Spec for the reports directory	FSSpec								mEyesSpec;					// Spec for the eyes directory	FSSpec								mUpFileSpec;	FSSpec								mSideFileSpec;	// These variables keep track of the information from the camera for the two pictures		CEyeDxBooleanType					mUpPictInfoValid;	DCPictInfo							mUpGenericPictInfo;	DC120PictInfo						mUpPictInfo;	CEyeDxBooleanType					mSidePictInfoValid;	DCPictInfo							mSideGenericPictInfo;	DC120PictInfo						mSidePictInfo;		AnalysisResults 					mAnalysisResults;		// The license information - this information is kept in sync by the member	// functions that load, test, and save the license information.		long								mLicenseCount;	long								mLicenseExpDateCode;	long long							mLicenseSN;	long								mLicenseLastUse;			CEyeDxLicenseFile					*mPrimaryLicense;	CEyeDxLicenseFile					*mBackupLicense;		CEyeDxVariableList					mVariableList;		CEyeDxLongStringType				mDefaultDatabaseReportName;	};