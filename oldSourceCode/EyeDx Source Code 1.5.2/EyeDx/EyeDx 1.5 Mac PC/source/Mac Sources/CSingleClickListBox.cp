// ===========================================================================//	CSingleClickListBox.cp// ===========================================================================//#include "CSingleClickListBox.h"// ---------------------------------------------------------------------------//	¥ CSingleClickListBox								Default Constructor		  [public]// ---------------------------------------------------------------------------CSingleClickListBox::CSingleClickListBox()	: LListBox(){}// ---------------------------------------------------------------------------//	¥ CSingleClickListBox								Copy Constructor		  [public]// ---------------------------------------------------------------------------////	This function creates a new Toolbox ListHandle for the copy. It copies//	most settings of the original ListHandle, including all cell data,//	selection flags, and scrolling flags. However, it does not copy the//	refCon, lClikLoop, and userHandle.////	Only the first 255 bytes of each cell's data is copied.CSingleClickListBox::CSingleClickListBox(	const CSingleClickListBox&		inOriginal)		: LListBox(inOriginal){}// ---------------------------------------------------------------------------//	¥ CSingleClickListBox								Parameterized Constructor [public]// ---------------------------------------------------------------------------CSingleClickListBox::CSingleClickListBox(	const SPaneInfo&	inPaneInfo,	Boolean				inHasHorizScroll,	Boolean				inHasVertScroll,	Boolean				inHasGrow,	Boolean				inHasFocusBox,	MessageT			inDoubleClickMessage,	SInt16				inTextTraitsID,	SInt16				inLDEFid,	LCommander*			inSuper)		: LListBox(inPaneInfo,				inHasHorizScroll,				inHasVertScroll,				inHasGrow,				inHasFocusBox,				inDoubleClickMessage,				inTextTraitsID,				inLDEFid,				inSuper){}// ---------------------------------------------------------------------------//	¥ CSingleClickListBox								Stream Constructor		  [public]// ---------------------------------------------------------------------------CSingleClickListBox::CSingleClickListBox(	LStream*	inStream)		: LListBox(inStream){}// ---------------------------------------------------------------------------//	¥ ClickSelf// ---------------------------------------------------------------------------//	Respond to Click inside an ListBoxvoidCSingleClickListBox::ClickSelf (const SMouseDownEvent &inMouseDown){	SwitchTarget(this);	FocusDraw();		// We have to see if the click about to be processed actually occurred	// WITHIN scrolling list. Otherwise, LClick will tell us that a	// click occurred even when it's inside a scroll bar. DUH.		Rect	displayRect;			// Determine size of Toolbox List									//   ListBox has a one-pixel border	CalcLocalFrameRect(displayRect);	::MacInsetRect(&displayRect, 1, 1);		if ((**mMacListH).hScroll != nil) {			// Adjust size for scroll bars		displayRect.bottom -= 15;	}	if ((**mMacListH).vScroll != nil) {		displayRect.right -= 15;	}		// We have to specifically handle double clicks because the single	// click processing takes a while to run	if (((::LClick(inMouseDown.whereLocal,		(SInt16) inMouseDown.macEvent.modifiers, mMacListH) ||		LPane::GetClickCount() == 2)) &&		(::PtInRect(inMouseDown.whereLocal, &displayRect)))			BroadcastMessage(mDoubleClickMessage, this);	else 	if (::PtInRect(inMouseDown.whereLocal, &displayRect))		BroadcastMessage(mSingleClickMessage, this);	// Otherwise, the point was in the scrollbar or growbox}// We override this, so that when cells are scrolled, we also send a single-click messagevoidCSingleClickListBox::MakeCellVisible(	Cell	inCell){	LListBox::MakeCellVisible(inCell);	BroadcastMessage(mSingleClickMessage, this);}