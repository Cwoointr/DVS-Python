// =================================================================================//	CAboutDialog.cp				©1995 Metrowerks Inc. All rights reserved.// =================================================================================//	CAboutDialog.h	#include <LStdControl.h>#include <PP_Messages.h>#include <UReanimator.h>#include "EyeDxMacConstants.h"#include "CInternet.h"#include "CAboutDialog.h"// ---------------------------------------------------------------------------------//		¥ CAboutDialog(LStream *)// ---------------------------------------------------------------------------------CAboutDialog::CAboutDialog(	LStream *inStream )		: CEyeDxDialogType( inStream ){}// ---------------------------------------------------------------------------------//		¥ ~CAboutDialog// ---------------------------------------------------------------------------------CAboutDialog::~CAboutDialog(){}// ---------------------------------------------------------------------------------//		¥ FinishCreateSelf// ---------------------------------------------------------------------------------voidCAboutDialog::FinishCreateSelf(){	// Call inherited. CEyeDxDialogTypeBox's FinishCreateSelf	// sets up the default and cancel buttons.	CEyeDxDialogType::FinishCreateSelf();		// Link the dialog to the controls.	UReanimator::LinkListenerToControls( this, this, RidL_AboutDialog );	}voidCAboutDialog::ListenToMessage(	MessageT	inMessage,	void		*ioParam){		TString<Str63> url;	switch (inMessage) 	{					case msg_AbtD_EyeDxURL:		{			mURLButton->GetDescriptor(url);			if (url.Length())					mInternet->GetURL(url);			}		break;				case msg_AbtD_EyeDxEmail:		{			mEmailButton->GetDescriptor(url);			if (url.Length())				url.Insert("\pmailto:", 1);							if (url.Length())					mInternet->GetURL(url);		}		break;				default:		break;	}	// Always pass the message on to our base class		CEyeDxDialogType::ListenToMessage(inMessage, ioParam);}// ---------------------------------------------------------------------------------//		¥ SetupDialog// ---------------------------------------------------------------------------------voidCAboutDialog::SetupDialog(OSType theBrowserType){	short curResFile = ::CurResFile();	mInternet = new CInternet(theBrowserType);		// Because we're about to set the value for controls	// we're listening to we'll turn off listening	// temporarily. Otherwise we'll get in a tug-of-war	// as the controls broadcast their changing values.	StopListening();	mURLButton = dynamic_cast<LTextButton*> (this->FindPaneByID(kAboutURLButton));	ThrowIfNil_( mURLButton );	mEmailButton = dynamic_cast<LTextButton*> (this->FindPaneByID(kAboutEmailButton));	ThrowIfNil_( mEmailButton );	// Set the version string from the vers resource		mVersionCaption = dynamic_cast<CEyeDxCaptionType*> (this->FindPaneByID(kAboutVersionCaption));	ThrowIfNil_( mVersionCaption );		// get the resource, 'vers' 1 in the current resource fork	StResource	versH( 'vers', 1, true, false );		Str255 theString;		// We have to calculate the location of the longVersion. It appears immediately	// after the shortVersion string.		unsigned char *theLongVersion = (*(VersRecHndl)((Handle)versH))->shortVersion;	theLongVersion += (theLongVersion[0] + 1); // Add the length of the string plus the length byte to the pointer	LString::CopyPStr(theLongVersion, theString);	mVersionCaption->SetDescriptor(theString);	// Start listening again.				StartListening();}