// ===========================================================================//	CEyeDxPrefs.h - based on UWindowState by  ©1994 J. Rodden, DD/MF & Associates// ===========================================================================// Utilities for saving and restoring the EyeDx application's preferences.//// All rights reserved. You may use this code in any application, recognition// would be appreciated but is not required.#pragma once#include <LPreferencesFile.h>#include "CEyeDxVariables.h"const ResType 	kReportPrefs = 'RPTD';const long		kRPTDVers1	= 1;// This structure is 64 bytes long. When new versions use the reserved// fields, make sure that the structure remains 64 bytes! The default// value for all fields is 0 - older copies of this resource will be// zero-filled. Use "0" as your new preference value's default.struct ReportPrefs{	long 	version;	long	displayOption;	long	formatOption;	long	adjustName;	short	allowLetterHead;	short	letterHeadPixels;	short	useSessions;	short	reservedShort;	long	reserved[7];};const ResType 	kBrowserPref = 'BROW';const long		kBROWVers1	= 1;struct BrowserPref {	long	version;	OSType	typeCode;};const ResType 	kCameraPrefs = 'CAMP';const long		kCAMPVers1	= 1;// This structure is 64 bytes long. When new versions use the reserved// fields, make sure that the structure remains 64 bytes! The default// value for all fields is 0 - older copies of this resource will be// zero-filled. Use "0" as your new preference value's default.struct CameraPrefs {	long	version;	long	saveFiles;	long	defaultPort;	// this is the DC120 constant - 1	long	portSpeed;		// this is the DC120 constant for port speed (default is Auto)	short	autoStartAutoCameraMode;	short	reservedShort0;	long	reserved[11];};const ResType 	kReportTextPrefs = 'TEXT';const kSampleReportHeaderTextID 			= 128;const kSampleReportIntroductionTextID 		= 129;const kSampleReportPassResultTextID 		= 130;const kSampleReportReferResultTextID 		= 131;const kSampleReportRetakeResultTextID 		= 132;const kSampleReportFooterTextID 			= 133;// The structure that defines the resource storage for an CEyeDxVariable object// in defined in the CEyeDxVariables.h file to avoid a circular file reference.// Version 2 includes the variable's value as a string after the common structure,// so we can read either one.const ResType 	kVariablePrefs = 'Eva2';const long		kEvarVers1	= 1;const long		kEvarVers2	= 2;// Prompting options preferencesconst ResType 	kPromptingPrefs = 'Prmt';const long		kPrmtVers1	= 1;// This structure is 64 bytes long. When new versions use the reserved// fields, make sure that the structure remains 64 bytes! The default// value for all fields is 0 - older copies of this resource will be// zero-filled. Use "0" as your new preference value's default.struct PromptingPrefs {	long	version;	short	promptingStyle;	short	reserved1;	long	reserved[14];};const ResType 	kVariableOptionSTRListPrefs = 'STR#';Handle 		CreateSTRListHandle(CTemplateShortStrArray *theStringArray);void		LoadStringArrayFromSTR(CEyeDxVariable *theVariable, short theSTRId);class CEyeDxPrefs : public LPreferencesFile {public:				CEyeDxPrefs(ConstStringPtr inFileName,							Boolean		   inCreateFolder = false);					void 		LoadBrowserPref(OSType *inBrowserCode, short inResID = 0);	void 		SaveBrowserPref(OSType inBrowserCode, short inResID = 0);	void 		LoadCameraPrefs(CameraPrefs *inPref, short inResID = 0);	void 		SaveCameraPrefs(CameraPrefs *inPref, short inResID = 0);	void 		LoadReportPrefs(ReportPrefs *inPref, short inResID = 0);	void 		SaveReportPrefs(ReportPrefs *inPref, short inResID = 0);	void		SaveReportTextPrefs(Handle inHandle, short inResID = 128);	Handle		LoadReportTextPrefs(Handle sampleHandle, short inResID = 128);	void		SaveVariablePrefs(CEyeDxVariableList *theVariableList);	void		LoadVariablePrefs(CEyeDxVariableList *theVariableList);	void 		LoadPromptingPrefs(PromptingPrefs *inPref, short inResID = 0);	void 		SavePromptingPrefs(PromptingPrefs *inPref, short inResID = 0);	};