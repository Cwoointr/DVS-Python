// property.cpp : implementation file//#include "stdafx.h"#include <limits.h>#include "SdkTest1.h"#include "dialog.h"#include "property.h"#ifdef DC50Include#include "dc50prop.h"#endif#ifdef _DEBUG#undef THIS_FILEstatic char BASED_CODE THIS_FILE[] = __FILE__;#endif/////////////////////////////////////////////////////////////////////////////// CPropertySheetBase#ifdef WIN32IMPLEMENT_DYNAMIC(CPropertySheetBase, CPropertySheet)#endifCPropertySheetBase::CPropertySheetBase(LPCSTR pSheetTitle,CWnd* pParentWnd)	: CPropertySheet(pSheetTitle,pParentWnd){	m_bStacked=FALSE;	m_IsSuccessIntialize=FALSE;}#ifdef WIN32BEGIN_MESSAGE_MAP(CPropertySheetBase, CPropertySheet)	//{{AFX_MSG_MAP(CPropertySheetBase)//	ON_WM_CREATE()	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()#elseBEGIN_MESSAGE_MAP(CPropertySheetBase, CPropertySheet)	//{{AFX_MSG_MAP(CPropertySheetBase)	ON_WM_CREATE()	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()#endifint CPropertySheetBase::DoModal(){	if(m_IsSuccessIntialize==TRUE){		return(CPropertySheet::DoModal());	}	else{		return(FALSE);	}}#ifndef WIN32int CPropertySheetBase::OnCreate(LPCREATESTRUCT lpCreateStruct){	if (CPropertySheet::OnCreate(lpCreateStruct) == -1)		return -1;	GetDlgItem(ID_HELP)->DestroyWindow();	GetDlgItem(ID_APPLY_NOW)->DestroyWindow();	UpdatePage();	return 0;}#endif#ifdef WIN32BOOL CPropertySheetBase::OnInitDialog(){	BOOL bResult = CPropertySheet::OnInitDialog();	UpdatePage();	return bResult;}#endifvoid CPropertySheetBase::OnOK(){#ifdef WIN32	CPropertySheet::EndDialog(IDOK);#else	CPropertySheet::OnOK();#endif}/////////////////////////////////////////////////////////////////////////////// CDriverPage dialogCDriverPage::CDriverPage()	: CPropertyPage(CDriverPage::IDD){	//{{AFX_DATA_INIT(CDriverPage)	//}}AFX_DATA_INIT	m_IsDriverOpenFlagTRUE=theApp.m_pDCDriver->DriverOpenFlag;	m_IsCameraOpenFlagTRUE=theApp.m_pDCDriver->CameraOpenFlag;	m_IsROMModeFalgTRUE=theApp.m_pDCDriver->ROMModeFlag;	m_GenericCameraType=theApp.m_pDCDriver->SpecificCamType;}void CDriverPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDriverPage)	DDX_Check(pDX, IDC_DriverOpenFlagIsTRUE, m_IsDriverOpenFlagTRUE);	DDX_Check(pDX, IDC_CameraOpenFlagIsTRUE, m_IsCameraOpenFlagTRUE);	DDX_Check(pDX, IDC_ROMModeFlagIsTRUE, m_IsROMModeFalgTRUE);	DDX_CBString(pDX, IDC_GenericCameraType, m_GenericCameraTypeStr);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDriverPage, CPropertyPage)	//{{AFX_MSG_MAP(CDriverPage)	ON_CBN_EDITCHANGE(IDC_GenericCameraType, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_GenericCameraType, OnUpdateValue)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCOpenDriverPage message handlersBOOL CDriverPage::OnInitDialog(){	CPropertyPage::OnInitDialog();	CComboBox*	pComtrol;	int			GenericCameraTypeValue;	pComtrol=(CComboBox*)GetDlgItem(IDC_GenericCameraType);	switch(m_GenericCameraType){		case DCNoCamera:			GenericCameraTypeValue=0;			break;		case DCGenericCamera:			GenericCameraTypeValue=1;			break;		case DC20:			GenericCameraTypeValue=2;			break;		case DC25:			GenericCameraTypeValue=3;			break;		// + Ogawa		case DC40:			GenericCameraTypeValue=4;			break;		case DC50:			GenericCameraTypeValue=5;			break;		case DC120:			GenericCameraTypeValue=6;			break;		// - Ogawa		default:			wsprintf(m_GenericCameraTypeStr.GetBuffer(64),"%d",m_GenericCameraType);			m_GenericCameraTypeStr.ReleaseBuffer();			UpdateData(FALSE);			return TRUE;	}	pComtrol->SetCurSel(GenericCameraTypeValue);	return TRUE;  // return TRUE  unless you set the focus to a control}void CDriverPage::OnUpdateValue(){	UpdateData(TRUE);	CComboBox*	pComtrol;	int			ComboBoxValue;	int			GenericCameraTypeValue;	pComtrol=(CComboBox*)GetDlgItem(IDC_GenericCameraType);	GenericCameraTypeValue=pComtrol->GetCurSel();	switch(GenericCameraTypeValue){		case 0:			m_GenericCameraType=DCNoCamera;			break;		case 1:			m_GenericCameraType=DCGenericCamera;			break;		case 2:			m_GenericCameraType=DC20;			break;		case 3:			m_GenericCameraType=DC25;			break;		// + Ogawa		case 4:			m_GenericCameraType=DC40;			break;		case 5:			m_GenericCameraType=DC50;			break;		case 6:			m_GenericCameraType=DC120;			break;		// - Ogawa		default:			ComboBoxValue=atoi((LPCSTR)m_GenericCameraTypeStr);			if((ComboBoxValue < INT_MIN) || (ComboBoxValue > INT_MAX)){				m_GenericCameraType=(DCCameraType)0;			}			else{				m_GenericCameraType=(DCCameraType)ComboBoxValue;			}	}}void CDriverPage::StoreValue(){	theApp.m_pDCDriver->DriverOpenFlag=m_IsDriverOpenFlagTRUE;	theApp.m_pDCDriver->CameraOpenFlag=m_IsCameraOpenFlagTRUE;	theApp.m_pDCDriver->ROMModeFlag=m_IsROMModeFalgTRUE;	// + Ogawa	theApp.m_pDCDriver->CamType=m_GenericCameraType;	// - Ogawa	theApp.m_pDCDriver->SpecificCamType=m_GenericCameraType;}/////////////////////////////////////////////////////////////////////////////// CVersionPage dialogCVersionPage::CVersionPage()	: CPropertyPage(CVersionPage::IDD){	//{{AFX_DATA_INIT(CVersionPage)	//}}AFX_DATA_INIT	m_Version = DCSDKVersion;}void CVersionPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CVersionPage)	DDX_Text(pDX, IDC_VERSION, m_Version);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CVersionPage, CPropertyPage)	//{{AFX_MSG_MAP(CVersionPage)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCOpenDriverPage dialogCDCOpenDriverPage::CDCOpenDriverPage()	: CPropertyPage(CDCOpenDriverPage::IDD){	//{{AFX_DATA_INIT(CDCOpenDriverPage)	//}}AFX_DATA_INIT	m_IsVersionNULL = FALSE;	m_IsDriverNULL = FALSE;}void CDCOpenDriverPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCOpenDriverPage)	DDX_Check(pDX, IDC_VersionIsNULL, m_IsVersionNULL);	DDX_Check(pDX, IDC_DriverIsNULL, m_IsDriverNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCOpenDriverPage, CPropertyPage)	//{{AFX_MSG_MAP(CDCOpenDriverPage)	ON_BN_CLICKED(IDC_VersionIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_DriverIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCOpenDriverPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCOpenDriverPage message handlers/////////////////////////////////////////////////////////////////////////////// CDCOpenDriverDlg dialogCDCOpenDriverDlg::CDCOpenDriverDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCOpenDriver()",pParentWnd){	m_pDCOpenDriverPage=NULL;	m_pVersionPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pDCOpenDriverPage=new CDCOpenDriverPage;		if(m_pDCOpenDriverPage==NULL){			break;		}		m_IsVersionNULL=m_pDCOpenDriverPage->m_IsVersionNULL;		m_IsDriverNULL=m_pDCOpenDriverPage->m_IsDriverNULL;		m_pVersionPage=new CVersionPage;		if(m_pVersionPage==NULL){			break;		}		m_Version=m_pVersionPage->m_Version;		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pDCOpenDriverPage);		AddPage(m_pVersionPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCOpenDriverDlg::~CDCOpenDriverDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pVersionPage!=NULL){		delete m_pVersionPage;		m_pVersionPage=NULL;	}	if(m_pDCOpenDriverPage!=NULL){		delete m_pDCOpenDriverPage;		m_pDCOpenDriverPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCOpenDriverDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCOpenDriverDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCOpenDriverDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pDCOpenDriverPage->m_IsVersionNULL){		AddPage(m_pVersionPage);	}	if(!m_pDCOpenDriverPage->m_IsDriverNULL){		AddPage(m_pDriverPage);	}}void CDCOpenDriverDlg::OnOK(){	UpdateData(TRUE);	// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsVersionNULL=m_pDCOpenDriverPage->m_IsVersionNULL;	m_IsDriverNULL=m_pDCOpenDriverPage->m_IsDriverNULL;	if(!m_IsVersionNULL){		m_Version=m_pVersionPage->m_Version;	}	if(!m_IsDriverNULL){		m_pDriverPage->StoreValue();	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCCloseDriverPage dialogCDCCloseDriverPage::CDCCloseDriverPage()	: CPropertyPage(CDCCloseDriverPage::IDD){	//{{AFX_DATA_INIT(CDCCloseDriverPage)	//}}AFX_DATA_INIT	m_IsDriverNULL = FALSE;}void CDCCloseDriverPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCCloseDriverPage)	DDX_Check(pDX, IDC_DriverIsNULL, m_IsDriverNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCCloseDriverPage, CPropertyPage)	//{{AFX_MSG_MAP(CDCCloseDriverPage)	ON_BN_CLICKED(IDC_DriverIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCCloseDriverPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCCloseDriverPage message handlers/////////////////////////////////////////////////////////////////////////////// CDCCloseDriverDlg dialogCDCCloseDriverDlg::CDCCloseDriverDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCCloseDriver()",pParentWnd){	m_pDCCloseDriverPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pDCCloseDriverPage=new CDCCloseDriverPage;		if(m_pDCCloseDriverPage==NULL){			break;		}		m_IsDriverNULL=m_pDCCloseDriverPage->m_IsDriverNULL;		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pDCCloseDriverPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCCloseDriverDlg::~CDCCloseDriverDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pDCCloseDriverPage!=NULL){		delete m_pDCCloseDriverPage;		m_pDCCloseDriverPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCCloseDriverDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCCloseDriverDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCCloseDriverDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pDCCloseDriverPage->m_IsDriverNULL){		AddPage(m_pDriverPage);	}}void CDCCloseDriverDlg::OnOK(){	UpdateData(TRUE);	// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsDriverNULL=m_pDCCloseDriverPage->m_IsDriverNULL;	if(!m_IsDriverNULL){		m_pDriverPage->StoreValue();	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CCamTypePage dialogCCamTypePage::CCamTypePage()	: CPropertyPage(CCamTypePage::IDD){	//{{AFX_DATA_INIT(CCamTypePage)	//}}AFX_DATA_INIT	m_CamType=theApp.m_pDCCamera->CamType;	m_SpecificCamType=theApp.m_pDCCamera->SpecificCamType;}void CCamTypePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CCamTypePage)	DDX_CBString(pDX, IDC_CamType, m_CamTypeStr);	DDX_CBString(pDX, IDC_SpecificCamType, m_SpecificCamTypeStr);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CCamTypePage, CPropertyPage)	//{{AFX_MSG_MAP(CCamTypePage)	ON_CBN_EDITCHANGE(IDC_CamType, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_CamType, OnUpdateValue)	ON_CBN_EDITCHANGE(IDC_SpecificCamType, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_SpecificCamType, OnUpdateValue)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CCamTypePage message handlersBOOL CCamTypePage::OnInitDialog(){	CPropertyPage::OnInitDialog();	CComboBox*	pComtrol;	int			SelectNumber;	BOOL		MatchFlag;	MatchFlag=TRUE;	pComtrol=(CComboBox*)GetDlgItem(IDC_CamType);	switch(m_CamType){		case DCNoCamera:			SelectNumber=0;			break;		case DCGenericCamera:			SelectNumber=1;			break;		case DC20:			SelectNumber=2;			break;		case DC25:			SelectNumber=3;			break;// + Ogawa#ifdef DC40Include		case DC40:			SelectNumber=4;			break;#endif#ifdef DC50Include		case DC50:			SelectNumber=5;			break;#endif#ifdef DC120Include		case DC120:			SelectNumber=6;			break;#endif// - Ogawa		default:			wsprintf(m_CamTypeStr.GetBuffer(64),"%d",m_CamType);			m_CamTypeStr.ReleaseBuffer();			MatchFlag=FALSE;	}	if(MatchFlag){		pComtrol->SetCurSel(SelectNumber);	}	else{		UpdateData(FALSE);	}	MatchFlag=TRUE;	pComtrol=(CComboBox*)GetDlgItem(IDC_SpecificCamType);	switch(m_SpecificCamType){		case DCNoCamera:			SelectNumber=0;			break;		case DCGenericCamera:			SelectNumber=1;			break;		case DC20:			SelectNumber=2;			break;		case DC25:			SelectNumber=3;			break;// + Ogawa#ifdef DC40Include		case DC40:			SelectNumber=4;			break;#endif#ifdef DC50Include		case DC50:			SelectNumber=5;			break;#endif#ifdef DC120Include		case DC120:			SelectNumber=6;			break;#endif// - Ogawa		default:			wsprintf(m_SpecificCamTypeStr.GetBuffer(64),"%d",m_SpecificCamType);			m_SpecificCamTypeStr.ReleaseBuffer();			MatchFlag=FALSE;	}	if(MatchFlag){		pComtrol->SetCurSel(SelectNumber);	}	else{		UpdateData(FALSE);	}	return TRUE;  // return TRUE  unless you set the focus to a control}void CCamTypePage::OnUpdateValue(){	UpdateData(TRUE);	int			ComboBoxValue;	switch(((CComboBox*)GetDlgItem(IDC_CamType))->GetCurSel()){		case 0:			m_CamType=DCNoCamera;			break;		case 1:			m_CamType=DCGenericCamera;			break;		case 2:			m_CamType=DC20;			break;		case 3:			m_CamType=DC25;			break;// + Ogawa#ifdef DC40Include		case 4:			m_CamType=DC40;			break;#endif#ifdef DC50Include		case 5:			m_CamType=DC50;			break;#endif#ifdef DC120Include		case 6:			m_CamType=DC120;			break;#endif// - Ogawa		default:			ComboBoxValue=atoi((LPCSTR)m_CamTypeStr);			if((ComboBoxValue < INT_MIN) || (ComboBoxValue > INT_MAX)){				m_CamType=(DCCameraType)0;			}			else{				m_CamType=(DCCameraType)ComboBoxValue;			}	}	switch(((CComboBox*)GetDlgItem(IDC_SpecificCamType))->GetCurSel()){		case 0:			m_SpecificCamType=DCNoCamera;			break;		case 1:			m_SpecificCamType=DCGenericCamera;			break;		case 2:			m_SpecificCamType=DC20;			break;		case 3:			m_SpecificCamType=DC25;			break;// + Ogawa#ifdef DC40Include		case 4:			m_SpecificCamType=DC40;			break;#endif#ifdef DC50Include		case 5:			m_SpecificCamType=DC50;			break;#endif#ifdef DC120Include		case 6:			m_SpecificCamType=DC120;			break;#endif// - Ogawa		default:			ComboBoxValue=atoi((LPCSTR)m_SpecificCamTypeStr);			if((ComboBoxValue < INT_MIN) || (ComboBoxValue > INT_MAX)){				m_SpecificCamType=(DCCameraType)0;			}			else{				m_SpecificCamType=(DCCameraType)ComboBoxValue;			}	}}void CCamTypePage::StoreValue(){	theApp.m_pDCCamera->CamType=m_CamType;	theApp.m_pDCCamera->SpecificCamType=m_SpecificCamType;	// + Ogawa	//theApp.m_CameraType=m_CamType;	// - Ogawa}/////////////////////////////////////////////////////////////////////////////// CCamMemTypePage dialogCCamMemTypePage::CCamMemTypePage()	: CPropertyPage(CCamMemTypePage::IDD){	//{{AFX_DATA_INIT(CCamMemTypePage)	//}}AFX_DATA_INIT	m_CamMemType=theApp.m_CamMemType;}void CCamMemTypePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CCamMemTypePage)	DDX_CBString(pDX, IDC_CamMemType, m_CamMemTypeStr);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CCamMemTypePage, CPropertyPage)	//{{AFX_MSG_MAP(CCamMemTypePage)	ON_CBN_EDITCHANGE(IDC_CamMemType, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_CamMemType, OnUpdateValue)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CCamMemTypePage message handlersBOOL CCamMemTypePage::OnInitDialog(){	CPropertyPage::OnInitDialog();	CComboBox*	pComtrol;	int			SelectNumber;	BOOL		MatchFlag;	MatchFlag=TRUE;	pComtrol=(CComboBox*)GetDlgItem(IDC_CamMemType);	switch(m_CamMemType){		case DCCameraMemory:			SelectNumber=0;			break;		case DCPCCard:			SelectNumber=1;			break;		default:			wsprintf(m_CamMemTypeStr.GetBuffer(64),"%d",m_CamMemType);			m_CamMemTypeStr.ReleaseBuffer();			MatchFlag=FALSE;	}	if(MatchFlag){		pComtrol->SetCurSel(SelectNumber);	}	else{		UpdateData(FALSE);	}	return TRUE;  // return TRUE  unless you set the focus to a control}void CCamMemTypePage::OnUpdateValue(){	UpdateData(TRUE);	int			ComboBoxValue;	switch(((CComboBox*)GetDlgItem(IDC_CamMemType))->GetCurSel()){		case 0:			m_CamMemType=DCCameraMemory;			break;		case 1:			m_CamMemType=DCPCCard;			break;		default:			ComboBoxValue=atoi((LPCSTR)m_CamMemTypeStr);			if((ComboBoxValue < INT_MIN) || (ComboBoxValue > INT_MAX)){				m_CamMemType=(DCCamMemType)0;			}			else{				m_CamMemType=(DCCamMemType)ComboBoxValue;			}	}}void CCamMemTypePage::StoreValue(){	theApp.m_CamMemType = (DCCamMemType)m_CamMemType;}/////////////////////////////////////////////////////////////////////////////// CPortAndBitRatePage dialogCPortAndBitRatePage::CPortAndBitRatePage()	: CPropertyPage(CPortAndBitRatePage::IDD){	//{{AFX_DATA_INIT(CPortAndBitRatePage)	//}}AFX_DATA_INIT	m_PortNum=theApp.m_pDCCamera->PortNum;	m_BitRate=theApp.m_pDCCamera->BitRate;}void CPortAndBitRatePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CPortAndBitRatePage)	DDX_CBString(pDX, IDC_PortNum, m_PortNumStr);	DDX_CBString(pDX, IDC_BitRate, m_BitRateStr);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CPortAndBitRatePage, CPropertyPage)	//{{AFX_MSG_MAP(CPortAndBitRatePage)	ON_CBN_EDITCHANGE(IDC_BitRate, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_BitRate, OnUpdateValue)	ON_CBN_EDITCHANGE(IDC_PortNum, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_PortNum, OnUpdateValue)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CPortAndBitRatePage message handlersBOOL CPortAndBitRatePage::OnInitDialog(){	CPropertyPage::OnInitDialog();	CComboBox*	pComtrol;	int			SelectNumber;	BOOL		MatchFlag;	MatchFlag=TRUE;	pComtrol=(CComboBox*)GetDlgItem(IDC_PortNum);	switch(m_PortNum){		case DCPortAuto:			SelectNumber=0;			break;		case DCPortNum1:			SelectNumber=1;			break;		case DCPortNum2:			SelectNumber=2;			break;		case DCPortNum3:			SelectNumber=3;			break;		case DCPortNum4:			SelectNumber=4;			break;		default:			wsprintf(m_PortNumStr.GetBuffer(64),"%d",m_PortNum);			m_PortNumStr.ReleaseBuffer();			MatchFlag=FALSE;	}	if(MatchFlag){		pComtrol->SetCurSel(SelectNumber);	}	else{		UpdateData(FALSE);	}		MatchFlag=TRUE;	pComtrol=(CComboBox*)GetDlgItem(IDC_BitRate);	switch(m_BitRate){		case DCBitRateAuto:			SelectNumber=0;			break;		case DCBitRate9600:			SelectNumber=1;			break;		case DCBitRate19200:			SelectNumber=2;			break;		case DCBitRate38400:			SelectNumber=3;			break;		case DCBitRate57600:			SelectNumber=4;			break;		case DCBitRate115200:			SelectNumber=5;			break;#ifdef DC50Include		case DCBitRate230400:			SelectNumber=6;			break;#endif		default:			wsprintf(m_BitRateStr.GetBuffer(64),"%d",m_BitRate);			m_BitRateStr.ReleaseBuffer();			MatchFlag=FALSE;	}	if(MatchFlag){		pComtrol->SetCurSel(SelectNumber);	}	else{		UpdateData(FALSE);	}	return TRUE;  // return TRUE  unless you set the focus to a control}void CPortAndBitRatePage::OnUpdateValue(){	UpdateData(TRUE);	int			ComboBoxValue;	switch(((CComboBox*)GetDlgItem(IDC_PortNum))->GetCurSel()){		case 0:			m_PortNum=DCPortAuto;			break;		case 1:			m_PortNum=DCPortNum1;			break;		case 2:			m_PortNum=DCPortNum2;			break;		case 3:			m_PortNum=DCPortNum3;			break;		case 4:			m_PortNum=DCPortNum4;			break;		default:			ComboBoxValue=atoi((LPCSTR)m_PortNumStr);			if((ComboBoxValue < INT_MIN) || (ComboBoxValue > INT_MAX)){				m_PortNum=(DCPortNum)0;			}			else{				m_PortNum=(DCPortNum)ComboBoxValue;			}	}	switch(((CComboBox*)GetDlgItem(IDC_BitRate))->GetCurSel()){		case 0:			m_BitRate=DCBitRateAuto;			break;		case 1:			m_BitRate=DCBitRate9600;			break;		case 2:			m_BitRate=DCBitRate19200;			break;		case 3:			m_BitRate=DCBitRate38400;			break;		case 4:			m_BitRate=DCBitRate57600;			break;		case 5:			m_BitRate=DCBitRate115200;			break;#ifdef DC50Include		case 6:			m_BitRate=DCBitRate230400;			break;#endif		default:			ComboBoxValue=atoi((LPCSTR)m_BitRateStr);			if((ComboBoxValue < INT_MIN) || (ComboBoxValue > INT_MAX)){				m_BitRate=(DCBitRate)0;			}			else{				m_BitRate=(DCBitRate)ComboBoxValue;			}	}}void CPortAndBitRatePage::StoreValue(){	theApp.m_pDCCamera->PortNum=m_PortNum;	theApp.m_pDCCamera->BitRate=m_BitRate;}/////////////////////////////////////////////////////////////////////////////// COthersPage dialogCOthersPage::COthersPage()	: CPropertyPage(COthersPage::IDD){	//{{AFX_DATA_INIT(COthersPage)	//}}AFX_DATA_INIT	m_IsDriverNULL = FALSE;	m_IsInternalUseOnlyNULL = FALSE;	m_IsCamIdIsNULL = FALSE;	m_CamId=(LPCSTR)theApp.m_pCamId;	if(theApp.m_pDCCamera->CamId==NULL){		m_IsCamIdIsNULL=TRUE;	}}void COthersPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(COthersPage)	DDX_Check(pDX, IDC_DriverIsNULL, m_IsDriverNULL);	DDX_Check(pDX, IDC_InternalUseOnlyIsNULL, m_IsInternalUseOnlyNULL);	DDX_Check(pDX, IDC_CamIdIsNULL, m_IsCamIdIsNULL);	DDX_Text(pDX, IDC_CamId, m_CamId);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(COthersPage, CPropertyPage)	//{{AFX_MSG_MAP(COthersPage)	ON_BN_CLICKED(IDC_CamIdIsNULL, OnCamIdIsNULL)	ON_BN_CLICKED(IDC_DriverIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()BOOL COthersPage::OnInitDialog(){	CPropertyPage::OnInitDialog();	GetDlgItem(IDC_CamId)->EnableWindow(!m_IsCamIdIsNULL);	return TRUE;  // return TRUE  unless you set the focus to a control}void COthersPage::OnCamIdIsNULL(){	UpdateData(TRUE);	GetDlgItem(IDC_CamId)->EnableWindow(!m_IsCamIdIsNULL);}void COthersPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdateDriverPage(!m_IsDriverNULL);	}}void COthersPage::StoreValue(){	if(m_IsDriverNULL){		theApp.m_pDCCamera->Driver=NULL;	}	else{		theApp.m_pDCCamera->Driver=theApp.m_pDCDriver;	}	// + Ogawa	if(m_IsCamIdIsNULL){	//if(m_IsDriverNULL){	// - Ogawa		theApp.m_pDCCamera->CamId=NULL;	}	else{		theApp.m_pDCCamera->CamId=theApp.m_pCamId;		_fstrcpy(theApp.m_pCamId,m_CamId);	}}/////////////////////////////////////////////////////////////////////////////// CDCOpenCameraPage dialogCDCOpenCameraPage::CDCOpenCameraPage()	: CPropertyPage(CDCOpenCameraPage::IDD){	//{{AFX_DATA_INIT(CDCOpenCameraPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;}void CDCOpenCameraPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCOpenCameraPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCOpenCameraPage, CPropertyPage)	//{{AFX_MSG_MAP(CDCOpenCameraPage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCOpenCameraPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCOpenCameraPage message handlers/////////////////////////////////////////////////////////////////////////////// CDCOpenCameraDlg dialogCDCOpenCameraDlg::CDCOpenCameraDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCOpenCamera()",pParentWnd){	m_pOpenCameraPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pOpenCameraPage=new CDCOpenCameraPage;		if(m_pOpenCameraPage==NULL){			break;		}		m_IsCameraDataNULL=m_pOpenCameraPage->m_IsCameraDataNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pOpenCameraPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCOpenCameraDlg::~CDCOpenCameraDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pOpenCameraPage!=NULL){		delete m_pOpenCameraPage;		m_pOpenCameraPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCOpenCameraDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCOpenCameraDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCOpenCameraDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pOpenCameraPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCOpenCameraDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCOpenCameraDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif// - Ohbe	m_IsCameraDataNULL=m_pOpenCameraPage->m_IsCameraDataNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCCloseCameraPage dialogCDCCloseCameraPage::CDCCloseCameraPage()	: CPropertyPage(CDCCloseCameraPage::IDD){	//{{AFX_DATA_INIT(CDCCloseCameraPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;}void CDCCloseCameraPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCCloseCameraPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCCloseCameraPage, CPropertyPage)	//{{AFX_MSG_MAP(CDCCloseCameraPage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCCloseCameraPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCCloseCameraPage message handlers/////////////////////////////////////////////////////////////////////////////// CDCCloseCameraDlg dialogCDCCloseCameraDlg::CDCCloseCameraDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCCloseCamera()",pParentWnd){	m_pCloseCameraPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pCloseCameraPage=new CDCCloseCameraPage;		if(m_pCloseCameraPage==NULL){			break;		}		m_IsCameraDataNULL=m_pCloseCameraPage->m_IsCameraDataNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pCloseCameraPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCCloseCameraDlg::~CDCCloseCameraDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pCloseCameraPage!=NULL){		delete m_pCloseCameraPage;		m_pCloseCameraPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCCloseCameraDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCCloseCameraDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCCloseCameraDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pCloseCameraPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCCloseCameraDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}/////////////////////////////////////////////////////////////////////////////// CDCCloseCameraDlg message handlersvoid CDCCloseCameraDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif// - Ohbe	m_IsCameraDataNULL=m_pCloseCameraPage->m_IsCameraDataNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCGetStatusPage dialogCDCGetStatusPage::CDCGetStatusPage()	: CPropertyPage(CDCGetStatusPage::IDD){	//{{AFX_DATA_INIT(CDCGetStatusPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsGenericStatusNULL = FALSE;	m_IsFullStatusNULL = FALSE;}void CDCGetStatusPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCGetStatusPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_GenericStatusIsNULL, m_IsGenericStatusNULL);	DDX_Check(pDX, IDC_FullStatusIsNULL, m_IsFullStatusNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCGetStatusPage, CPropertyPage)	//{{AFX_MSG_MAP(CDCGetStatusPage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCGetStatusPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCGetStatusPage message handlers/////////////////////////////////////////////////////////////////////////////// CDCGetStatusDlg dialogCDCGetStatusDlg::CDCGetStatusDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCGetStatus()",pParentWnd){	m_pGetStatusPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pGetStatusPage=new CDCGetStatusPage;		if(m_pGetStatusPage==NULL){			break;		}		m_IsCameraDataNULL=m_pGetStatusPage->m_IsCameraDataNULL;		m_IsGenericStatusNULL=m_pGetStatusPage->m_IsGenericStatusNULL;		m_IsFullStatusNULL=m_pGetStatusPage->m_IsFullStatusNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pGetStatusPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCGetStatusDlg::~CDCGetStatusDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pGetStatusPage!=NULL){		delete m_pGetStatusPage;		m_pGetStatusPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCGetStatusDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCGetStatusDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCGetStatusDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pGetStatusPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCGetStatusDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}/////////////////////////////////////////////////////////////////////////////// CDCGetStatusDlg message handlersvoid CDCGetStatusDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif// - Ohbe	m_IsCameraDataNULL=m_pGetStatusPage->m_IsCameraDataNULL;	m_IsGenericStatusNULL=m_pGetStatusPage->m_IsGenericStatusNULL;	m_IsFullStatusNULL=m_pGetStatusPage->m_IsFullStatusNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCGetConfigPage dialogCDCGetConfigPage::CDCGetConfigPage()	: CPropertyPage(CDCGetConfigPage::IDD){	//{{AFX_DATA_INIT(CDCGetConfigPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsGenericConfigNULL = FALSE;	m_IsFullConfigNULL = FALSE;}void CDCGetConfigPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCGetConfigPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_GenericConfigIsNULL, m_IsGenericConfigNULL);	DDX_Check(pDX, IDC_FullConfigIsNULL, m_IsFullConfigNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCGetConfigPage, CPropertyPage)	//{{AFX_MSG_MAP(CDCGetConfigPage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCGetConfigPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCGetConfigPage message handlers/////////////////////////////////////////////////////////////////////////////// CDCGetConfigDlg dialogCDCGetConfigDlg::CDCGetConfigDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCGetConfig()",pParentWnd){	m_pGetConfigPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pGetConfigPage=new CDCGetConfigPage;		if(m_pGetConfigPage==NULL){			break;		}		m_IsCameraDataNULL=m_pGetConfigPage->m_IsCameraDataNULL;		m_IsGenericConfigNULL=m_pGetConfigPage->m_IsGenericConfigNULL;		m_IsFullConfigNULL=m_pGetConfigPage->m_IsFullConfigNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pGetConfigPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCGetConfigDlg::~CDCGetConfigDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pGetConfigPage!=NULL){		delete m_pGetConfigPage;		m_pGetConfigPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCGetConfigDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCGetConfigDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCGetConfigDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pGetConfigPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCGetConfigDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}/////////////////////////////////////////////////////////////////////////////// CDCGetConfigDlg message handlersvoid CDCGetConfigDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pGetConfigPage->m_IsCameraDataNULL;	m_IsGenericConfigNULL=m_pGetConfigPage->m_IsGenericConfigNULL;	m_IsFullConfigNULL=m_pGetConfigPage->m_IsFullConfigNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CGenericConfigPage dialogCGenericConfigPage::CGenericConfigPage()	: CPropertyPage(CGenericConfigPage::IDD){	//{{AFX_DATA_INIT(CGenericConfigPage)	//}}AFX_DATA_INIT	m_Sec=theApp.m_pGenericConfig->Time.tm_sec;	m_Min=theApp.m_pGenericConfig->Time.tm_min;	m_Hour=theApp.m_pGenericConfig->Time.tm_hour;	m_Day=theApp.m_pGenericConfig->Time.tm_mday;	m_Mon=theApp.m_pGenericConfig->Time.tm_mon;	m_Year=theApp.m_pGenericConfig->Time.tm_year;	m_wDay=theApp.m_pGenericConfig->Time.tm_wday;	m_yDay=theApp.m_pGenericConfig->Time.tm_yday;	m_Isdst=theApp.m_pGenericConfig->Time.tm_isdst;	m_CamId = "";	m_IsCamIdNULL = FALSE;	if(theApp.m_pGenericConfig->CamId==NULL){		m_IsCamIdNULL=TRUE;	}	else{		m_CamId=theApp.m_pGenericConfig->CamId;	}}void CGenericConfigPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CGenericConfigPage)	DDX_Text(pDX, IDC_Year, m_Year);	DDX_Text(pDX, IDC_Mon, m_Mon);	DDX_Text(pDX, IDC_Day, m_Day);	DDX_Text(pDX, IDC_Hour, m_Hour);	DDX_Text(pDX, IDC_Min, m_Min);	DDX_Text(pDX, IDC_Sec, m_Sec);	DDX_Text(pDX, IDC_wDay, m_wDay);	DDX_Text(pDX, IDC_yDay, m_yDay);	DDX_Text(pDX, IDC_Isdst, m_Isdst);	DDX_Text(pDX, IDC_CamId, m_CamId);	DDX_Check(pDX, IDC_CamIdIsNULL, m_IsCamIdNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CGenericConfigPage, CPropertyPage)	//{{AFX_MSG_MAP(CGenericConfigPage)	ON_BN_CLICKED(IDC_CamIdIsNULL, OnCamIdIsNULL)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CGenericConfigPage message handlersBOOL CGenericConfigPage::OnInitDialog(){	CPropertyPage::OnInitDialog();	UpdateControl();	return TRUE;  // return TRUE  unless you set the focus to a control}void CGenericConfigPage::OnCamIdIsNULL(){	UpdateData(TRUE);	UpdateControl();}void CGenericConfigPage::UpdateControl(){	GetDlgItem(IDC_CamId)->EnableWindow(!m_IsCamIdNULL);	GetDlgItem(IDC_CamIdStr)->EnableWindow(!m_IsCamIdNULL);}void CGenericConfigPage::StoreValue(){	if(m_IsCamIdNULL){		theApp.m_pGenericConfig->CamId=NULL;	}	else{		_fstrcpy(theApp.m_pCamId,(LPCSTR)m_CamId.Left(DCCamIDLength-1));		theApp.m_pGenericConfig->CamId=theApp.m_pCamId;	}	theApp.m_pGenericConfig->Time.tm_sec=m_Sec;	theApp.m_pGenericConfig->Time.tm_min=m_Min;	theApp.m_pGenericConfig->Time.tm_hour=m_Hour;	theApp.m_pGenericConfig->Time.tm_mday=m_Day;	theApp.m_pGenericConfig->Time.tm_mon=m_Mon;	theApp.m_pGenericConfig->Time.tm_year=m_Year;	theApp.m_pGenericConfig->Time.tm_wday=m_wDay;	theApp.m_pGenericConfig->Time.tm_yday=m_yDay;	theApp.m_pGenericConfig->Time.tm_isdst=m_Isdst;}/////////////////////////////////////////////////////////////////////////////// C20FullConfigPage dialogC20FullConfigPage::C20FullConfigPage()	: CPropertyPage(C20FullConfigPage::IDD){	//{{AFX_DATA_INIT(C20FullConfigPage)	//}}AFX_DATA_INIT	m_PictModeStr = "";	m_FlashModeStr = "";//	switch(theApp.m_pDCCamera->CamType) {//		case DC20: //		m_PictMode=theApp.m_pDC20FullConfig->PictMode;//			break;//		case DC25://		m_PictMode=(DC20PictureMode)theApp.m_pDC25FullConfig->PictMode;//		m_FlashMode=(DC25FlashMode)theApp.m_pDC25FullConfig->FlashMode;//			break;//		default: //		m_PictMode=theApp.m_pDC20FullConfig->PictMode;//			break;//	}				 }void C20FullConfigPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(C20FullConfigPage)	DDX_CBString(pDX, IDC_PictMode, m_PictModeStr);	DDX_CBString(pDX, IDC_FlashMode, m_FlashModeStr);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(C20FullConfigPage, CPropertyPage)	//{{AFX_MSG_MAP(C20FullConfigPage)	ON_CBN_EDITCHANGE(IDC_PictMode, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_PictMode, OnUpdateValue)	ON_CBN_EDITCHANGE(IDC_FlashMode, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_FlashMode, OnUpdateValue)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// C20FullConfigPage message handlersBOOL C20FullConfigPage::OnInitDialog(){	CPropertyPage::OnInitDialog();//	CComboBox*	pControl;//	int			PictModeValue;//	pControl=(CComboBox*)GetDlgItem(IDC_PictMode);//	switch(m_PictMode){//		case DC20HighResolution://			PictModeValue=0;//		case DC20Standard://			PictModeValue=1;//			break;//		default://			wsprintf(m_PictModeStr.GetBuffer(64),"%d",(int)m_PictMode);//			m_PictModeStr.ReleaseBuffer();//			UpdateData(FALSE);//			return TRUE;//	}//	pControl->SetCurSel(PictModeValue);//	int			SelectNumber;//	BOOL		MatchFlag;//	MatchFlag=TRUE;//	pControl=(CComboBox*)GetDlgItem(IDC_FlashMode);//	switch(m_FlashMode){//		case DC25FlashAuto://			SelectNumber=0;//			break;//		case DC25FlashOn://			SelectNumber=1;//			break;//		case DC25FlashOff://			SelectNumber=2;//			break;//		default://			wsprintf(m_FlashModeStr.GetBuffer(64),"%d",m_FlashMode);//			m_FlashModeStr.ReleaseBuffer();//			MatchFlag=FALSE;//	}//	if(MatchFlag){//		pControl->SetCurSel(SelectNumber);//	}//	else{//		UpdateData(FALSE);//	}	return TRUE;  // return TRUE  unless you set the focus to a control}void C20FullConfigPage::OnUpdateValue(){	UpdateData(TRUE);//	CComboBox*	pComtrol;//	double		ComboBoxValue;//	int			PictModeValue;//	pComtrol=(CComboBox*)GetDlgItem(IDC_PictMode);//	PictModeValue=pComtrol->GetCurSel();//	switch(PictModeValue){//		case 0://			m_PictMode=DC20HighResolution;//			break;//		case 1://			m_PictMode=DC20Standard; //			break;//		case 2://			m_PictMode=(DC20PictureMode)DC25HighResolution;//			break;//		case 3://			m_PictMode=(DC20PictureMode)DC25Standard;//			break;//		default://			ComboBoxValue=atof((LPCSTR)m_PictModeStr);//			if((ComboBoxValue < INT_MIN) || (ComboBoxValue > INT_MAX)){//				m_PictMode=(DC20PictureMode)0;//			}//			else{//				m_PictMode=(DC20PictureMode)ComboBoxValue;//			}//			break;//	} 	//		switch(((CComboBox*)GetDlgItem(IDC_FlashMode))->GetCurSel()){//		case 0://			m_FlashMode=DC25FlashAuto;//			break;//		case 1://			m_FlashMode=DC25FlashOn;//			break;//		case 2://			m_FlashMode=DC25FlashOff;//			break;//		default://			ComboBoxValue=atof((LPCSTR)m_FlashModeStr);//			if((ComboBoxValue < INT_MIN) || (ComboBoxValue > INT_MAX)){//				m_FlashMode=(DC25FlashMode)0;//			}//			else{//				m_FlashMode=(DC25FlashMode)ComboBoxValue;//			}//    }}void C20FullConfigPage::StoreValue(){//	theApp.m_pDC20FullConfig->PictMode=m_PictMode;//	theApp.m_pDC25FullConfig->PictMode=(DC25PictureMode)m_PictMode;//	theApp.m_pDC25FullConfig->FlashMode=(DC25FlashMode)m_FlashMode;}/////////////////////////////////////////////////////////////////////////////// CSetConfigPage dialogCSetConfigPage::CSetConfigPage()	: CPropertyPage(CSetConfigPage::IDD){	//{{AFX_DATA_INIT(CSetConfigPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsGenericConfigNULL = FALSE;	m_IsFullConfigNULL = FALSE;}void CSetConfigPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CSetConfigPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_GenericConfigIsNULL, m_IsGenericConfigNULL);	DDX_Check(pDX, IDC_FullConfigIsNULL, m_IsFullConfigNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CSetConfigPage, CPropertyPage)	//{{AFX_MSG_MAP(CSetConfigPage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_GenericConfigIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_FullConfigIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CSetConfigPage message handlersvoid CSetConfigPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCSetConfigDlg dialogCDCSetConfigDlg::CDCSetConfigDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCSetConfig()",pParentWnd){	m_pSetConfigPage=NULL;	m_pGenericConfigPage=NULL;	m_p20FullConfigPage=NULL;	// + Ogawa iranai	m_p25FullConfigPage=NULL;	// - Ogawa#ifdef DC50Include	m_p50FullConfigPage=NULL;#endif#ifdef DC40Include	m_p40FullConfigPage=NULL;#endif#ifdef DC120Include	m_p120FullConfigPage=NULL;#endifm_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pSetConfigPage=new CSetConfigPage;		if(m_pSetConfigPage==NULL){			break;		}		m_IsCameraDataNULL=m_pSetConfigPage->m_IsCameraDataNULL;		m_IsGenericConfigNULL=m_pSetConfigPage->m_IsGenericConfigNULL;		m_IsFullConfigNULL=m_pSetConfigPage->m_IsFullConfigNULL;		m_pGenericConfigPage=new CGenericConfigPage;		if(m_pGenericConfigPage==NULL){			break;		}		m_p20FullConfigPage=new C20FullConfigPage;		if(m_p20FullConfigPage==NULL){			break;		}		// + Ogawa iranai		m_p25FullConfigPage=new C20FullConfigPage;		if(m_p25FullConfigPage==NULL){			break;		}		// - Ogawa#ifdef DC50Include		m_p50FullConfigPage=new C50FullConfigPage;		if(m_p50FullConfigPage==NULL){			break;		}#endif#ifdef DC40Include		m_p40FullConfigPage=new C40FullConfigPage;		if(m_p40FullConfigPage==NULL){			break;		}#endif#ifdef DC120Include		m_p120FullConfigPage=new C120FullConfigPage;		if(m_p120FullConfigPage==NULL){			break;		}#endif		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pSetConfigPage);		AddPage(m_pGenericConfigPage);		// + Ogawa		// Modify theApp.m_CameraType -> theApp.m_pDCCamera->SpecificCamType		if(theApp.m_pDCCamera->SpecificCamType == DC25)			AddPage(m_p25FullConfigPage);		// + Ogawa iranai		if(theApp.m_pDCCamera->SpecificCamType == DC20)			AddPage(m_p20FullConfigPage);		// - Ogawa#ifdef DC50Include		if(theApp.m_pDCCamera->SpecificCamType == DC50)			AddPage(m_p50FullConfigPage);#endif#ifdef DC40Include		if(theApp.m_pDCCamera->SpecificCamType == DC40)			AddPage(m_p40FullConfigPage);#endif#ifdef DC120Include		if(theApp.m_pDCCamera->SpecificCamType == DC120)			AddPage(m_p120FullConfigPage);#endif		// end of Modify		// - Ogawa		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCSetConfigDlg::~CDCSetConfigDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_p20FullConfigPage!=NULL){		delete m_p20FullConfigPage;		m_p20FullConfigPage=NULL;	}	// + Ogawa iranai	if(m_p25FullConfigPage!=NULL){		delete m_p25FullConfigPage;		m_p25FullConfigPage=NULL;	}	// - Ogawa#ifdef DC50Include	if(m_p50FullConfigPage!=NULL){		delete m_p50FullConfigPage;		m_p50FullConfigPage=NULL;	}#endif#ifdef DC40Include	if(m_p40FullConfigPage!=NULL){		delete m_p40FullConfigPage;		m_p40FullConfigPage=NULL;	}#endif#ifdef DC120Include	if(m_p120FullConfigPage!=NULL){		delete m_p120FullConfigPage;		m_p120FullConfigPage=NULL;	}#endifif(m_pGenericConfigPage!=NULL){		delete m_pGenericConfigPage;		m_pGenericConfigPage=NULL;	}	if(m_pSetConfigPage!=NULL){		delete m_pSetConfigPage;		m_pSetConfigPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCSetConfigDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCSetConfigDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCSetConfigDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pSetConfigPage->m_IsGenericConfigNULL){		AddPage(m_pGenericConfigPage);	}	if(!m_pSetConfigPage->m_IsFullConfigNULL){		// + Ogawa		// Modify theApp.m_CameraType -> theApp.m_pDCCamera->SpecificCamType		if(theApp.m_pDCCamera->SpecificCamType == DC25)			AddPage(m_p25FullConfigPage);		// + Ogawa iranai		if(theApp.m_pDCCamera->SpecificCamType == DC20)			AddPage(m_p20FullConfigPage);		// - Ogawa#ifdef DC50Include		if(theApp.m_pDCCamera->SpecificCamType == DC50)			AddPage(m_p50FullConfigPage);#endif#ifdef DC40Include		if(theApp.m_pDCCamera->SpecificCamType == DC40)			AddPage(m_p40FullConfigPage);#endif#ifdef DC120Include		if(theApp.m_pDCCamera->SpecificCamType == DC120)			AddPage(m_p120FullConfigPage);#endif		// end of Modify		// - Ogawa	}	if(!m_pSetConfigPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCSetConfigDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCSetConfigDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pSetConfigPage->m_IsCameraDataNULL;	m_IsGenericConfigNULL=m_pSetConfigPage->m_IsGenericConfigNULL;	m_IsFullConfigNULL=m_pSetConfigPage->m_IsFullConfigNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	if(!m_IsGenericConfigNULL){		m_pGenericConfigPage->StoreValue();	}	if(!m_IsFullConfigNULL){		// + Ogawa		if(theApp.m_pDCCamera->CamType == DC25)		//if(theApp.m_CameraType == DC25)		// - Ogawa		m_p20FullConfigPage->StoreValue();#ifdef DC50Include		// + Ogawa		if(theApp.m_pDCCamera->CamType == DC50)		//if(theApp.m_CameraType == DC50)		// - Ogawa		m_p50FullConfigPage->StoreValue();#endif#ifdef DC40Include		// + Ogawa		if(theApp.m_pDCCamera->CamType == DC40)		//if(theApp.m_CameraType == DC40)		// - Ogawa		m_p40FullConfigPage->StoreValue();#endif#ifdef DC120Include		// + Ogawa		if(theApp.m_pDCCamera->CamType == DC120)		//if(theApp.m_CameraType == DC120)		// - Ogawa		m_p120FullConfigPage->StoreValue();#endif	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCGetImageProcessingPage dialogCDCGetImageProcessingPage::CDCGetImageProcessingPage()	: CPropertyPage(CDCGetImageProcessingPage::IDD){	//{{AFX_DATA_INIT(CDCGetImageProcessingPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsIPDataNULL = FALSE;}void CDCGetImageProcessingPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCGetImageProcessingPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_IPDataIsNULL, m_IsIPDataNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCGetImageProcessingPage, CDialog)	//{{AFX_MSG_MAP(CDCGetImageProcessingPage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCGetImageProcessingPage message handlersvoid CDCGetImageProcessingPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCGetImageProcessingDlg dialogCDCGetImageProcessingDlg::CDCGetImageProcessingDlg(CWnd* pParentWnd /*=NULL*/)	: CPropertySheetBase("DCGetImageProcessing()",pParentWnd){	m_pGetImageProcessingPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pGetImageProcessingPage=new CDCGetImageProcessingPage;		if(m_pGetImageProcessingPage==NULL){			break;		}		m_IsCameraDataNULL=m_pGetImageProcessingPage->m_IsCameraDataNULL;		m_IsIPDataNULL=m_pGetImageProcessingPage->m_IsIPDataNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pGetImageProcessingPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCGetImageProcessingDlg::~CDCGetImageProcessingDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pGetImageProcessingPage!=NULL){		delete m_pGetImageProcessingPage;		m_pGetImageProcessingPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCGetImageProcessingDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCGetImageProcessingDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCGetImageProcessingDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pGetImageProcessingPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCGetImageProcessingDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCGetImageProcessingDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pGetImageProcessingPage->m_IsCameraDataNULL;	m_IsIPDataNULL=m_pGetImageProcessingPage->m_IsIPDataNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CIPDataImageTypePage dialogCIPDataImageTypePage::CIPDataImageTypePage()	: CPropertyPage(CIPDataImageTypePage::IDD){	//{{AFX_DATA_INIT(CIPDataImageTypePage)	//}}AFX_DATA_INIT	m_ImageTypeStr = "";	m_ImageType=theApp.m_pIPData->ImageType;}void CIPDataImageTypePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CIPDataImageTypePage)	DDX_CBString(pDX, IDC_ImageType, m_ImageTypeStr);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CIPDataImageTypePage, CPropertyPage)	//{{AFX_MSG_MAP(CIPDataImageTypePage)	ON_CBN_EDITCHANGE(IDC_ImageType, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_ImageType, OnUpdateValue)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CIPDataImageTypePage message handlersBOOL CIPDataImageTypePage::OnInitDialog(){	CPropertyPage::OnInitDialog();	CComboBox*	pComtrol;	int			ImageTypeValue;	pComtrol=(CComboBox*)GetDlgItem(IDC_ImageType);	switch(m_ImageType){		case DCGrayImage8:			ImageTypeValue=0;			break;		case DCRGBImage24:			ImageTypeValue=1;			break;		case DCRGBImage32:			ImageTypeValue=2;			break;		default:			wsprintf(m_ImageTypeStr.GetBuffer(64),"%d",m_ImageType);			m_ImageTypeStr.ReleaseBuffer();			UpdateData(FALSE);			return TRUE;	}	pComtrol->SetCurSel(ImageTypeValue);	return TRUE;  // return TRUE  unless you set the focus to a control}void CIPDataImageTypePage::OnUpdateValue(){	UpdateData(TRUE);	CComboBox*	pComtrol;	int			ComboBoxValue;	int			ImageTypeValue;	pComtrol=(CComboBox*)GetDlgItem(IDC_ImageType);	ImageTypeValue=pComtrol->GetCurSel();	switch(ImageTypeValue){		case 0:			m_ImageType=DCGrayImage8;			break;		case 1:			m_ImageType=DCRGBImage24;			break;		case 2:			m_ImageType=DCRGBImage32;			break;		default:			ComboBoxValue=atoi((LPCSTR)m_ImageTypeStr);			if((ComboBoxValue < INT_MIN) || (ComboBoxValue > INT_MAX)){				m_ImageType=(DCImgType)0;			}			else{				m_ImageType=(DCImgType)ComboBoxValue;			}	}}void CIPDataImageTypePage::StoreValue(){	theApp.m_pIPData->ImageType=m_ImageType;}/////////////////////////////////////////////////////////////////////////////// CIPDataRotatePage dialogCIPDataRotatePage::CIPDataRotatePage()	: CPropertyPage(CIPDataRotatePage::IDD){	//{{AFX_DATA_INIT(CIPDataRotatePage)	//}}AFX_DATA_INIT	// + Ogawa	m_IsRotateFlagTRUE = theApp.m_pIPData->RotateFlag;	//m_IsRotateFlagTRUE = FALSE;	// - Ogawa	m_RotateAngle=theApp.m_pIPData->RotateAngle;	wsprintf(m_RotateAngleStr.GetBuffer(64),"%d",m_RotateAngle);//	m_RotateAngleStr.ReleaseBuffer();}void CIPDataRotatePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CIPDataRotatePage)	DDX_Check(pDX, IDC_RotateFlagIsTRUE, m_IsRotateFlagTRUE);	DDX_CBString(pDX, IDC_RotateAngle, m_RotateAngleStr);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CIPDataRotatePage, CPropertyPage)	//{{AFX_MSG_MAP(CIPDataRotatePage)	ON_CBN_EDITCHANGE(IDC_RotateAngle, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_RotateAngle, OnUpdateValue)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CIPDataRotatePage message handlersBOOL CIPDataRotatePage::OnInitDialog(){	CPropertyPage::OnInitDialog();	CComboBox*	pComtrol;	int			RotateAngleValue;	pComtrol=(CComboBox*)GetDlgItem(IDC_RotateAngle);	switch(m_RotateAngle){		case DCRotate0:			RotateAngleValue=0;			break;		case DCRotate90:			RotateAngleValue=1;			break;		case DCRotate180:			RotateAngleValue=2;			break;		case DCRotate270:			RotateAngleValue=3;			break;		case DCUsePictOrientation:			RotateAngleValue=4;			break;		default:			wsprintf(m_RotateAngleStr.GetBuffer(64),"%d",m_RotateAngle);			m_RotateAngleStr.ReleaseBuffer();			UpdateData(FALSE);			return TRUE;	}	pComtrol->SetCurSel(RotateAngleValue);	return TRUE;  // return TRUE  unless you set the focus to a control}void CIPDataRotatePage::OnUpdateValue(){	UpdateData(TRUE);	CComboBox*	pComtrol;	int			ComboBoxValue;	int			RotateAngleValue;	pComtrol=(CComboBox*)GetDlgItem(IDC_RotateAngle);	RotateAngleValue=pComtrol->GetCurSel();	switch(RotateAngleValue){		case 0:			m_RotateAngle=DCRotate0;			break;		case 1:			m_RotateAngle=DCRotate90;			break;		case 2:			m_RotateAngle=DCRotate180;			break;		case 3:			m_RotateAngle=DCRotate270;			break;		case 4:			m_RotateAngle=DCUsePictOrientation;			break;		default:			ComboBoxValue=atoi((LPCSTR)m_RotateAngleStr);			if((ComboBoxValue < INT_MIN) || (ComboBoxValue > INT_MAX)){				m_RotateAngle=(DCRotateImg)0;			}			else{				m_RotateAngle=(DCRotateImg)ComboBoxValue;			}	}}void CIPDataRotatePage::StoreValue(){	theApp.m_pIPData->RotateFlag=m_IsRotateFlagTRUE;	theApp.m_pIPData->RotateAngle=m_RotateAngle;}/////////////////////////////////////////////////////////////////////////////// CIPDataCRTDataPage dialogCIPDataCRTDataPage::CIPDataCRTDataPage()	: CPropertyPage(CIPDataCRTDataPage::IDD){	//{{AFX_DATA_INIT(CIPDataCRTDataPage)	//}}AFX_DATA_INIT	m_RedChromaX=theApp.m_pIPData->CRTData.RedChroma.XChroma;	m_RedChromaY=theApp.m_pIPData->CRTData.RedChroma.YChroma;	m_GrnChromaX=theApp.m_pIPData->CRTData.GrnChroma.XChroma;	m_GrnChromaY=theApp.m_pIPData->CRTData.GrnChroma.YChroma;	m_BluChromaX=theApp.m_pIPData->CRTData.BluChroma.XChroma;	m_BluChromaY=theApp.m_pIPData->CRTData.BluChroma.YChroma;	m_Gamma=theApp.m_pIPData->CRTData.Gamma;	m_WhiteTemp=theApp.m_pIPData->CRTData.WhiteTemp;	m_WhiteBalanceStr = "";	m_IsUseDefaultCRTTRUE=theApp.m_pIPData->UseDefaultCRT;#ifdef DC50Include	m_WBGainR=theApp.m_pIPData->WBManual.WBGainR;	m_WBGainG=theApp.m_pIPData->WBManual.WBGainG;	m_WBGainB=theApp.m_pIPData->WBManual.WBGainB;#endif	//kita deleted	m_WhiteBalance=theApp.m_pIPData->WhiteBalance;}void CIPDataCRTDataPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CIPDataCRTDataPage)	DDX_Text(pDX, IDC_RedChromaX, m_RedChromaX);	DDX_Text(pDX, IDC_RedChromaY, m_RedChromaY);	DDX_Text(pDX, IDC_GrnChromaX, m_GrnChromaX);	DDX_Text(pDX, IDC_GrnChromaY, m_GrnChromaY);	DDX_Text(pDX, IDC_BluChromaX, m_BluChromaX);	DDX_Text(pDX, IDC_BluChromaY, m_BluChromaY);	DDX_Text(pDX, IDC_Gamma, m_Gamma);	DDX_Text(pDX, IDC_WhiteTemp, m_WhiteTemp);	DDX_CBString(pDX, IDC_WhiteBalance, m_WhiteBalanceStr);	DDX_Check(pDX, IDC_UseDefaultCRTIsTRUE, m_IsUseDefaultCRTTRUE);	DDX_Text(pDX, IDC_WBGainR, m_WBGainR);	DDX_Text(pDX, IDC_WBGainG, m_WBGainG);	DDX_Text(pDX, IDC_WBGainB, m_WBGainB);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CIPDataCRTDataPage, CPropertyPage)	//{{AFX_MSG_MAP(CIPDataCRTDataPage)	ON_CBN_EDITCHANGE(IDC_WhiteBalance, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_WhiteBalance, OnUpdateValue)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CIPDataCRTDataPage message handlersBOOL CIPDataCRTDataPage::OnInitDialog(){	CPropertyPage::OnInitDialog();	CComboBox*	pComtrol;	int			WhiteBalanceValue;	pComtrol=(CComboBox*)GetDlgItem(IDC_WhiteBalance);	switch(m_WhiteBalance){		case DCWBAuto:			WhiteBalanceValue=0;			break;		case DCWBDayLight:			WhiteBalanceValue=1;			break;		case DCWBIndoor:			WhiteBalanceValue=2;			break;		case DCWBFluorescent:			WhiteBalanceValue=3;			break;		case DCWBNone:			WhiteBalanceValue=4;			break;		case DCWBUseManual:			WhiteBalanceValue=5;			break;		default:			wsprintf(m_WhiteBalanceStr.GetBuffer(64),"%d",m_WhiteBalance);			m_WhiteBalanceStr.ReleaseBuffer();			UpdateData(FALSE);			return TRUE;	}	pComtrol->SetCurSel(WhiteBalanceValue);	return TRUE;  // return TRUE  unless you set the focus to a control}void CIPDataCRTDataPage::OnUpdateValue(){	UpdateData(TRUE);	CComboBox*	pComtrol;	int			ComboBoxValue;	int			WhiteBalanceValue;//	pComtrol=(CComboBox*)GetDlgItem(IDC_RotateAngle);	pComtrol=(CComboBox*)GetDlgItem(IDC_WhiteBalance);	WhiteBalanceValue=pComtrol->GetCurSel();	switch(WhiteBalanceValue){		case 0:			m_WhiteBalance=DCWBAuto;			break;		case 1:			m_WhiteBalance=DCWBDayLight;			break;		case 2:			m_WhiteBalance=DCWBIndoor;			break;		case 3:			m_WhiteBalance=DCWBFluorescent;			break;		case 4:			m_WhiteBalance=DCWBNone;			break;		case 5:			m_WhiteBalance=DCWBUseManual;			break;		default:			ComboBoxValue=atoi((LPCSTR)m_WhiteBalanceStr);			if((ComboBoxValue < INT_MIN) || (ComboBoxValue > INT_MAX)){				m_WhiteBalance=(DCWBMode)0;			}			else{				m_WhiteBalance=(DCWBMode)ComboBoxValue;			}	}}void CIPDataCRTDataPage::StoreValue(){	theApp.m_pIPData->CRTData.RedChroma.XChroma=m_RedChromaX;	theApp.m_pIPData->CRTData.RedChroma.YChroma=m_RedChromaY;	theApp.m_pIPData->CRTData.GrnChroma.XChroma=m_GrnChromaX;	theApp.m_pIPData->CRTData.GrnChroma.YChroma=m_GrnChromaY;	theApp.m_pIPData->CRTData.BluChroma.XChroma=m_BluChromaX;	theApp.m_pIPData->CRTData.BluChroma.YChroma=m_BluChromaY;	theApp.m_pIPData->CRTData.Gamma=m_Gamma;	theApp.m_pIPData->CRTData.WhiteTemp=m_WhiteTemp;	theApp.m_pIPData->UseDefaultCRT=m_IsUseDefaultCRTTRUE;//kita deleted	theApp.m_pIPData->WhiteBalance=m_WhiteBalance;#ifdef DC50Include	theApp.m_pIPData->WBManual.WBGainR = m_WBGainR;	theApp.m_pIPData->WBManual.WBGainG = m_WBGainG;	theApp.m_pIPData->WBManual.WBGainB = m_WBGainB;#endif}/////////////////////////////////////////////////////////////////////////////// CSetImageProcessingPage dialogCSetImageProcessingPage::CSetImageProcessingPage()	: CPropertyPage(CSetImageProcessingPage::IDD){	//{{AFX_DATA_INIT(CSetImageProcessingPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsIPDataNULL = FALSE;}void CSetImageProcessingPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CSetImageProcessingPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_IPDataIsNULL, m_IsIPDataNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CSetImageProcessingPage, CPropertyPage)	//{{AFX_MSG_MAP(CSetImageProcessingPage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_IPDataIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CSetImageProcessingPage message handlersvoid CSetImageProcessingPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCSetImageProcessingDlg dialogCDCSetImageProcessingDlg::CDCSetImageProcessingDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCSetImageProcessing()",pParentWnd){	m_pSetImageProcessingPage=NULL;	m_pIPDataImageTypePage=NULL;	m_pIPDataRotatePage=NULL;	m_pIPDataCRTDataPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pSetImageProcessingPage=new CSetImageProcessingPage;		if(m_pSetImageProcessingPage==NULL){			break;		}		m_IsCameraDataNULL=m_pSetImageProcessingPage->m_IsCameraDataNULL;		m_IsIPDataNULL=m_pSetImageProcessingPage->m_IsIPDataNULL;		m_pIPDataImageTypePage=new CIPDataImageTypePage;		if(m_pIPDataImageTypePage==NULL){			break;		}		m_pIPDataRotatePage=new CIPDataRotatePage;		if(m_pIPDataRotatePage==NULL){			break;		}		m_pIPDataCRTDataPage=new CIPDataCRTDataPage;		if(m_pIPDataCRTDataPage==NULL){			break;		}		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pSetImageProcessingPage);		AddPage(m_pIPDataImageTypePage);		AddPage(m_pIPDataRotatePage);		AddPage(m_pIPDataCRTDataPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCSetImageProcessingDlg::~CDCSetImageProcessingDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pIPDataCRTDataPage!=NULL){		delete m_pIPDataCRTDataPage;		m_pIPDataCRTDataPage=NULL;	}	if(m_pIPDataRotatePage!=NULL){		delete m_pIPDataRotatePage;		m_pIPDataRotatePage=NULL;	}	if(m_pIPDataImageTypePage!=NULL){		delete m_pIPDataImageTypePage;		m_pIPDataImageTypePage=NULL;	}	if(m_pSetImageProcessingPage!=NULL){		delete m_pSetImageProcessingPage;		m_pSetImageProcessingPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCSetImageProcessingDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCSetImageProcessingDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCSetImageProcessingDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pSetImageProcessingPage->m_IsIPDataNULL){		AddPage(m_pIPDataImageTypePage);		AddPage(m_pIPDataRotatePage);		AddPage(m_pIPDataCRTDataPage);	}	if(!m_pSetImageProcessingPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCSetImageProcessingDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCSetImageProcessingDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pSetImageProcessingPage->m_IsCameraDataNULL;	m_IsIPDataNULL=m_pSetImageProcessingPage->m_IsIPDataNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	if(!m_IsIPDataNULL){		m_pIPDataImageTypePage->StoreValue();		m_pIPDataRotatePage->StoreValue();		m_pIPDataCRTDataPage->StoreValue();	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCGetOutputWindowPage dialogCDCGetOutputWindowPage::CDCGetOutputWindowPage()	: CPropertyPage(CDCGetOutputWindowPage::IDD){	//{{AFX_DATA_INIT(CDCGetOutputWindowPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsWindowDataNULL = FALSE;}void CDCGetOutputWindowPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCGetOutputWindowPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_WindowDataIsNULL, m_IsWindowDataNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCGetOutputWindowPage, CPropertyPage)	//{{AFX_MSG_MAP(CDCGetOutputWindowPage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCGetOutputWindowPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCGetOutputWindowPage message handlers/////////////////////////////////////////////////////////////////////////////// CDCGetOutputWindowDlg dialogCDCGetOutputWindowDlg::CDCGetOutputWindowDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCGetOutputWindow()",pParentWnd){	m_pGetOutputWindowPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pGetOutputWindowPage=new CDCGetOutputWindowPage;		if(m_pGetOutputWindowPage==NULL){			break;		}		m_IsCameraDataNULL=m_pGetOutputWindowPage->m_IsCameraDataNULL;		m_IsWindowDataNULL=m_pGetOutputWindowPage->m_IsWindowDataNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pGetOutputWindowPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCGetOutputWindowDlg::~CDCGetOutputWindowDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pGetOutputWindowPage!=NULL){		delete m_pGetOutputWindowPage;		m_pGetOutputWindowPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCGetOutputWindowDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCGetOutputWindowDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCGetOutputWindowDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pGetOutputWindowPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCGetOutputWindowDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}/////////////////////////////////////////////////////////////////////////////// CDCGetOutputWindowDlg message handlersvoid CDCGetOutputWindowDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pGetOutputWindowPage->m_IsCameraDataNULL;	m_IsWindowDataNULL=m_pGetOutputWindowPage->m_IsWindowDataNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CWindowDataPage dialogCWindowDataPage::CWindowDataPage()	: CPropertyPage(CWindowDataPage::IDD){	//{{AFX_DATA_INIT(CWindowDataPage)	//}}AFX_DATA_INIT	m_HOffset=theApp.m_pWindowData->HOffset;	m_VOffset=theApp.m_pWindowData->VOffset;	m_Width=theApp.m_pWindowData->Width;	m_Height=theApp.m_pWindowData->Height;	m_RowBytes=theApp.m_pWindowData->RowBytes;	m_ThumbnailRowBytes=theApp.m_pWindowData->ThumbRowBytes;}void CWindowDataPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CWindowDataPage)	DDX_Text(pDX, IDC_HOffset, m_HOffset);	DDX_Text(pDX, IDC_VOffset, m_VOffset);	DDX_Text(pDX, IDC_Width, m_Width);	DDX_Text(pDX, IDC_Height, m_Height);	DDX_Text(pDX, IDC_RowBytes, m_RowBytes);	DDX_Text(pDX, IDC_ThumbnailRowBytes, m_ThumbnailRowBytes);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CWindowDataPage, CPropertyPage)	//{{AFX_MSG_MAP(CWindowDataPage)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CWindowDataPage message handlersvoid CWindowDataPage::StoreValue(){	theApp.m_pWindowData->HOffset=m_HOffset;	theApp.m_pWindowData->VOffset=m_VOffset;	theApp.m_pWindowData->Width=m_Width;	theApp.m_pWindowData->Height=m_Height;	theApp.m_pWindowData->RowBytes=m_RowBytes;	theApp.m_pWindowData->ThumbRowBytes=m_ThumbnailRowBytes;}/////////////////////////////////////////////////////////////////////////////// CSetImageProcessingPage dialogCSetOutputWindowPage::CSetOutputWindowPage()	: CPropertyPage(CSetOutputWindowPage::IDD){	//{{AFX_DATA_INIT(CSetOutputWindowPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL 	= FALSE;	m_IsWindowDataNULL  = FALSE;}void CSetOutputWindowPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CSetOutputWindowPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_WindowDataIsNULL, m_IsWindowDataNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CSetOutputWindowPage, CPropertyPage)	//{{AFX_MSG_MAP(CSetOutputWindowPage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_WindowDataIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CSetOutputWindowPage message handlersvoid CSetOutputWindowPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCSetOutputWindowDlg dialogCDCSetOutputWindowDlg::CDCSetOutputWindowDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCSetOutputWindow()",pParentWnd){	m_pSetOutputWindowPage=NULL;	m_pWindowDataPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pSetOutputWindowPage=new CSetOutputWindowPage;		if(m_pSetOutputWindowPage==NULL){			break;		}		m_IsCameraDataNULL=m_pSetOutputWindowPage->m_IsCameraDataNULL;		m_IsWindowDataNULL=m_pSetOutputWindowPage->m_IsWindowDataNULL;		m_pWindowDataPage=new CWindowDataPage;		if(m_pWindowDataPage==NULL){			break;		}		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pSetOutputWindowPage);		AddPage(m_pWindowDataPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCSetOutputWindowDlg::~CDCSetOutputWindowDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pWindowDataPage!=NULL){		delete m_pWindowDataPage;		m_pWindowDataPage=NULL;	}	if(m_pSetOutputWindowPage!=NULL){		delete m_pSetOutputWindowPage;		m_pSetOutputWindowPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCSetOutputWindowDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCSetOutputWindowDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCSetOutputWindowDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pSetOutputWindowPage->m_IsWindowDataNULL){		AddPage(m_pWindowDataPage);	}	if(!m_pSetOutputWindowPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCSetOutputWindowDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCSetOutputWindowDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pSetOutputWindowPage->m_IsCameraDataNULL;	m_IsWindowDataNULL=m_pSetOutputWindowPage->m_IsWindowDataNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	if(!m_IsWindowDataNULL){		m_pWindowDataPage->StoreValue();	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCTakePicturePage dialogCDCTakePicturePage::CDCTakePicturePage()	: CPropertyPage(CDCTakePicturePage::IDD){	//{{AFX_DATA_INIT(CDCTakePicturePage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsThumbFlagTRUE = FALSE;	m_IsGenericInfoNULL = FALSE;	m_IsFullInfoNULL = FALSE;}void CDCTakePicturePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCTakePicturePage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_ThumbFlagIsTRUE, m_IsThumbFlagTRUE);	DDX_Check(pDX, IDC_GenericInfoIsNULL, m_IsGenericInfoNULL);	DDX_Check(pDX, IDC_FullInfoIsNULL, m_IsFullInfoNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCTakePicturePage, CPropertyPage)	//{{AFX_MSG_MAP(CDCTakePicturePage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCTakePicturePage message handlersvoid CDCTakePicturePage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCTakePictureDlg dialogCDCTakePictureDlg::CDCTakePictureDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCTakePicture()",pParentWnd){	m_pTakePicturePage=NULL;	m_pCamTypePage=NULL;	m_pCamMemTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pTakePicturePage=new CDCTakePicturePage;		if(m_pTakePicturePage==NULL){			break;		}		m_IsCameraDataNULL=m_pTakePicturePage->m_IsCameraDataNULL;		m_IsThumbFlagTRUE=m_pTakePicturePage->m_IsThumbFlagTRUE;		m_IsGenericInfoNULL=m_pTakePicturePage->m_IsGenericInfoNULL;		m_IsFullInfoNULL=m_pTakePicturePage->m_IsFullInfoNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pCamMemTypePage=new CCamMemTypePage;		if(m_pCamMemTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pTakePicturePage);		AddPage(m_pCamTypePage);		AddPage(m_pCamMemTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCTakePictureDlg::~CDCTakePictureDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pCamMemTypePage!=NULL){		delete m_pCamMemTypePage;		m_pCamMemTypePage=NULL;	}	if(m_pTakePicturePage!=NULL){		delete m_pTakePicturePage;		m_pTakePicturePage=NULL;	}}BEGIN_MESSAGE_MAP(CDCTakePictureDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCTakePictureDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCTakePictureDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	AddPage(m_pCamMemTypePage);	if(!m_pTakePicturePage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCTakePictureDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCTakePictureDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pTakePicturePage->m_IsCameraDataNULL;	m_IsThumbFlagTRUE=m_pTakePicturePage->m_IsThumbFlagTRUE;	m_IsGenericInfoNULL=m_pTakePicturePage->m_IsGenericInfoNULL;	m_IsFullInfoNULL=m_pTakePicturePage->m_IsFullInfoNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	m_pCamMemTypePage->StoreValue();	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCDeletePicturePage dialogCDCDeletePicturePage::CDCDeletePicturePage()	: CPropertyPage(CDCDeletePicturePage::IDD){	//{{AFX_DATA_INIT(CDCDeletePicturePage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_PictNumStr = "DCDeleteAll";	m_PictNum=DCDeleteAll;}void CDCDeletePicturePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCDeletePicturePage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_CBString(pDX, IDC_PictNum, m_PictNumStr);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCDeletePicturePage, CPropertyPage)	//{{AFX_MSG_MAP(CDCDeletePicturePage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	ON_CBN_EDITCHANGE(IDC_PictNum, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_PictNum, OnUpdateValue)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCDeletePicturePage message handlersBOOL CDCDeletePicturePage::OnInitDialog(){	CPropertyPage::OnInitDialog();	CComboBox*	pComtrol;	int			PictNumValue;	int			SelectNumber;	BOOL		MatchFlag;	pComtrol=(CComboBox*)GetDlgItem(IDC_PictNum);	switch(m_PictNum){		case DCDeleteAll:			PictNumValue=-1;			MatchFlag = TRUE;			SelectNumber = 0;			break;		default:			wsprintf(m_PictNumStr.GetBuffer(64),"%d",m_PictNum);			m_PictNumStr.ReleaseBuffer();			MatchFlag = FALSE;			return TRUE;	}	if(MatchFlag){		pComtrol->SetCurSel(SelectNumber);	}	else{		UpdateData(FALSE);	}	//pComtrol->SetCurSel(PictNumValue);	return TRUE;  // return TRUE  unless you set the focus to a control}void CDCDeletePicturePage::OnUpdateValue(){	UpdateData(TRUE);	CComboBox*	pComtrol;	double		ComboBoxValue;	int			PictNumValue;	pComtrol=(CComboBox*)GetDlgItem(IDC_PictNum);	PictNumValue=pComtrol->GetCurSel();	switch(PictNumValue){		case 0:			m_PictNum=DCDeleteAll;			break;		default:			ComboBoxValue=atof((LPCSTR)m_PictNumStr);			if((ComboBoxValue < SHRT_MIN) || (ComboBoxValue > SHRT_MAX)){				m_PictNum=(DC20DeleteMode)0;			}			else{				m_PictNum=(DC20DeleteMode)ComboBoxValue;			}	}}void CDCDeletePicturePage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCDeletePictureDlg dialogCDCDeletePictureDlg::CDCDeletePictureDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCDeletePicture()",pParentWnd){	m_pDeletePicturePage=NULL;	m_pCamTypePage=NULL;	m_pCamMemTypePage=NULL;#ifdef DC50Include	m_pAlbumPage=NULL;#endif	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pDeletePicturePage=new CDCDeletePicturePage;		if(m_pDeletePicturePage==NULL){			break;		}		m_IsCameraDataNULL=m_pDeletePicturePage->m_IsCameraDataNULL;		m_PictNum=m_pDeletePicturePage->m_PictNum;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pCamMemTypePage=new CCamMemTypePage;		if(m_pCamMemTypePage==NULL){			break;		}#ifdef DC50Include		m_pAlbumPage=new CAlbumPage;		if(m_pAlbumPage==NULL){			break;		}#endif		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pDeletePicturePage);		AddPage(m_pCamTypePage);		AddPage(m_pCamMemTypePage);#ifdef DC50Include		AddPage(m_pAlbumPage);#endif		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCDeletePictureDlg::~CDCDeletePictureDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}#ifdef DC50Include	if(m_pAlbumPage!=NULL){		delete m_pAlbumPage;		m_pAlbumPage=NULL;	}#endif	if(m_pCamMemTypePage!=NULL){		delete m_pCamMemTypePage;		m_pCamMemTypePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pDeletePicturePage!=NULL){		delete m_pDeletePicturePage;		m_pDeletePicturePage=NULL;	}}BEGIN_MESSAGE_MAP(CDCDeletePictureDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCDeletePictureDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCDeletePictureDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	AddPage(m_pCamMemTypePage);#ifdef DC50Include	AddPage(m_pAlbumPage);#endif	if(!m_pDeletePicturePage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCDeletePictureDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCDeletePictureDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pDeletePicturePage->m_IsCameraDataNULL;	m_PictNum=m_pDeletePicturePage->m_PictNum;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	m_pCamMemTypePage->StoreValue();#ifdef DC50Include	m_pAlbumPage->StoreValue();#endif	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCGetCameraPictInfoPage dialogCDCGetCameraPictInfoPage::CDCGetCameraPictInfoPage()	: CPropertyPage(CDCGetCameraPictInfoPage::IDD){	//{{AFX_DATA_INIT(CDCGetCameraPictInfoPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsThumbFlagTRUE = FALSE;	m_IsGenericInfoNULL = FALSE;	m_IsFullInfoNULL = FALSE;	m_PictNum = 0;}void CDCGetCameraPictInfoPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCGetCameraPictInfoPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_ThumbFlagIsTRUE, m_IsThumbFlagTRUE);	DDX_Check(pDX, IDC_GenericInfoIsNULL, m_IsGenericInfoNULL);	DDX_Check(pDX, IDC_FullInfoIsNULL, m_IsFullInfoNULL);	DDX_Text(pDX, IDC_PictNum, m_PictNum);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCGetCameraPictInfoPage, CPropertyPage)	//{{AFX_MSG_MAP(CDCGetCameraPictInfoPage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCGetCameraPictInfoPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCGetCameraPictInfoPage message handlers/////////////////////////////////////////////////////////////////////////////// CDCGetCameraPictInfoDlg dialogCDCGetCameraPictInfoDlg::CDCGetCameraPictInfoDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCGetCameraPictInfo()",pParentWnd){	m_pGetCameraPictInfoPage=NULL;	m_pCamTypePage=NULL;	m_pCamMemTypePage=NULL;#ifdef DC50Include	m_pAlbumPage=NULL;#endif	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pGetCameraPictInfoPage=new CDCGetCameraPictInfoPage;		if(m_pGetCameraPictInfoPage==NULL){			break;		}		m_IsCameraDataNULL=m_pGetCameraPictInfoPage->m_IsCameraDataNULL;		m_IsThumbFlagTRUE=m_pGetCameraPictInfoPage->m_IsThumbFlagTRUE;		m_IsGenericInfoNULL=m_pGetCameraPictInfoPage->m_IsGenericInfoNULL;		m_IsFullInfoNULL=m_pGetCameraPictInfoPage->m_IsFullInfoNULL;		m_PictNum=m_pGetCameraPictInfoPage->m_PictNum;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pCamMemTypePage=new CCamMemTypePage;		if(m_pCamMemTypePage==NULL){			break;		}#ifdef DC50Include		m_pAlbumPage=new CAlbumPage;		if(m_pAlbumPage==NULL){			break;		}#endif		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pGetCameraPictInfoPage);		AddPage(m_pCamTypePage);		AddPage(m_pCamMemTypePage);#ifdef DC50Include		AddPage(m_pAlbumPage);#endif		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCGetCameraPictInfoDlg::~CDCGetCameraPictInfoDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamMemTypePage!=NULL){		delete m_pCamMemTypePage;		m_pCamMemTypePage=NULL;	}#ifdef DC50Include	if(m_pAlbumPage!=NULL){		delete m_pAlbumPage;		m_pAlbumPage=NULL;	}#endif	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pGetCameraPictInfoPage!=NULL){		delete m_pGetCameraPictInfoPage;		m_pGetCameraPictInfoPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCGetCameraPictInfoDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCGetCameraPictInfoDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCGetCameraPictInfoDlg message handlersvoid CDCGetCameraPictInfoDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}			AddPage(m_pCamMemTypePage);#ifdef DC50Include	AddPage(m_pAlbumPage);#endif	if(!m_pGetCameraPictInfoPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCGetCameraPictInfoDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCGetCameraPictInfoDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pGetCameraPictInfoPage->m_IsCameraDataNULL;	m_IsThumbFlagTRUE=m_pGetCameraPictInfoPage->m_IsThumbFlagTRUE;	m_IsGenericInfoNULL=m_pGetCameraPictInfoPage->m_IsGenericInfoNULL;	m_IsFullInfoNULL=m_pGetCameraPictInfoPage->m_IsFullInfoNULL;	m_PictNum=m_pGetCameraPictInfoPage->m_PictNum;	m_pCamMemTypePage->StoreValue();#ifdef DC50Include	m_pAlbumPage->StoreValue();	m_AlbumNum = theApp.m_AlbumNumber;// + Ogawa(Temp)//	m_AlbumNum=0;// - Ogawa#endif	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CGetNativePictInfoPage dialogCGetNativePictInfoPage::CGetNativePictInfoPage()	: CPropertyPage(CGetNativePictInfoPage::IDD){	//{{AFX_DATA_INIT(CGetNativePictInfoPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsInputNULL = FALSE;	m_IsThumbFlagTRUE = FALSE;	m_IsGenericInfoNULL = FALSE;	m_IsFullInfoNULL = FALSE;}void CGetNativePictInfoPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CGetNativePictInfoPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_InputIsNULL, m_IsInputNULL);	DDX_Check(pDX, IDC_ThumbFlagIsTRUE, m_IsThumbFlagTRUE);	DDX_Check(pDX, IDC_GenericInfoIsNULL, m_IsGenericInfoNULL);	DDX_Check(pDX, IDC_FullInfoIsNULL, m_IsFullInfoNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CGetNativePictInfoPage, CPropertyPage)	//{{AFX_MSG_MAP(CGetNativePictInfoPage)	// + Ogawa	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	// - Ogawa	ON_BN_CLICKED(IDC_InputIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CGetNativePictInfoPage message handlersvoid CGetNativePictInfoPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCGetNativePictInfoDlg dialogCDCGetNativePictInfoDlg::CDCGetNativePictInfoDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCGetNativePictInfo()",pParentWnd){	m_pGetNativePictInfoPage=NULL;//	m_pPictInfoPage=NULL;	m_pInputPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pGetNativePictInfoPage=new CGetNativePictInfoPage;		if(m_pGetNativePictInfoPage==NULL){			break;		}		m_IsCameraDataNULL=m_pGetNativePictInfoPage->m_IsCameraDataNULL;		m_IsInputNULL=m_pGetNativePictInfoPage->m_IsInputNULL;		m_IsThumbFlagTRUE=m_pGetNativePictInfoPage->m_IsThumbFlagTRUE;		m_IsGenericInfoNULL=m_pGetNativePictInfoPage->m_IsGenericInfoNULL;		m_IsFullInfoNULL=m_pGetNativePictInfoPage->m_IsFullInfoNULL;//		m_pPictInfoPage=new CPictInfoPage;//		if(m_pPictInfoPage==NULL){//			break;//		}		m_pInputPage=new CInputPage();		if(m_pInputPage==NULL){			break;		}		m_pInputPage->m_IsUseCurrentBuffer= TRUE;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pGetNativePictInfoPage);		AddPage(m_pInputPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCGetNativePictInfoDlg::~CDCGetNativePictInfoDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}//	if(m_pPictInfoPage!=NULL){//		delete m_pPictInfoPage;//		m_pPictInfoPage=NULL;//	}	if(m_pInputPage!=NULL){		delete m_pInputPage;		m_pInputPage=NULL;	}	if(m_pGetNativePictInfoPage!=NULL){		delete m_pGetNativePictInfoPage;		m_pGetNativePictInfoPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCGetNativePictInfoDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCGetNativePictInfoDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCGetNativePictInfoDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pGetNativePictInfoPage->m_IsInputNULL){		AddPage(m_pInputPage);	}//	if(!m_pGetNativePictInfoPage->m_IsGenericInfoNULL){//		AddPage(m_pPictInfoPage);//	}	if(!m_pGetNativePictInfoPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCGetNativePictInfoDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCGetNativePictInfoDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pGetNativePictInfoPage->m_IsCameraDataNULL;	m_IsInputNULL=m_pGetNativePictInfoPage->m_IsInputNULL;	m_IsThumbFlagTRUE=m_pGetNativePictInfoPage->m_IsThumbFlagTRUE;	m_IsGenericInfoNULL=m_pGetNativePictInfoPage->m_IsGenericInfoNULL;	m_IsFullInfoNULL=m_pGetNativePictInfoPage->m_IsFullInfoNULL;	if(!m_IsInputNULL){		m_pInputPage->StoreValue();	}	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CInputPage dialogCInputPage::CInputPage()	: CPropertyPage(CInputPage::IDD){	//{{AFX_DATA_INIT(CInputPage)	//}}AFX_DATA_INIT	m_IsInputBufferNULL = FALSE;	m_InputBufferSize = theApp.m_pGenericInfo->PictMinBufIn;	m_IsInputIOFuncNULL = FALSE;	m_InputAllocateSize = theApp.m_pGenericInfo->PictMinBufIn;	m_hpBuffer=NULL;	m_IsUseCurrentBuffer = FALSE;	// + Ogawa	m_InputRefCon = 0;	// - Ogawa}// + OgawaCInputPage::CInputPage(int Preview)	: CPropertyPage(CInputPage::IDD){	//{{AFX_DATA_INIT(CInputPage)	//}}AFX_DATA_INIT	m_IsInputBufferNULL = FALSE;	m_InputBufferSize = theApp.m_pPreviewInfo->PictMinBufIn;	m_IsInputIOFuncNULL = FALSE;	m_InputAllocateSize = theApp.m_pPreviewInfo->PictMinBufIn;	m_hpBuffer=NULL;	m_IsUseCurrentBuffer = FALSE;	m_InputRefCon = 0;}// - OgawaCInputPage::~CInputPage(){	if(m_hpBuffer!=NULL){		theApp.HugeFree(m_hpBuffer);		m_hpBuffer=NULL;	}}void CInputPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CInputPage)	DDX_Check(pDX, IDC_InputBufferIsNULL, m_IsInputBufferNULL);	DDX_Text(pDX, IDC_InputBufferSize, m_InputBufferSize);	DDX_Check(pDX, IDC_InputIOFuncIsNULL, m_IsInputIOFuncNULL);	DDX_Text(pDX, IDC_InputAllocateSize, m_InputAllocateSize);	// + Ogawa	DDX_Text(pDX, IDC_InputRefCon, m_InputRefCon);	// - Ogawa	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CInputPage, CPropertyPage)	//{{AFX_MSG_MAP(CInputPage)	ON_BN_CLICKED(IDC_InputBufferIsNULL, OnInputBufferIsNULL)	ON_EN_CHANGE(IDC_InputBufferSize, OnChangeInputBufferSize)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CInputPage message handlersvoid CInputPage::UpdateControl(){	GetDlgItem(IDC_InputAllocateSizeText)->EnableWindow(!m_IsInputBufferNULL);	GetDlgItem(IDC_InputAllocateSize)->EnableWindow(!m_IsInputBufferNULL);}BOOL CInputPage::OnInitDialog(){	CPropertyPage::OnInitDialog();	UpdateControl();	return FALSE;  // return TRUE  unless you set the focus to a control}void CInputPage::OnInputBufferIsNULL(){	UpdateData(TRUE);	UpdateControl();}void CInputPage::OnChangeInputBufferSize(){	UpdateData(TRUE);	m_InputAllocateSize=m_InputBufferSize;	UpdateData(FALSE);}void CInputPage::StoreValue(){	if(m_IsUseCurrentBuffer){ 		// if  m_IsUseCurrentBuffer, this processing is on native file. 		if(m_IsInputBufferNULL){			theApp.HugeFree(theApp.m_pInputBuffer);			theApp.m_pInputBuffer=NULL; 			// Rewrite the INPUT. when Native Handling.			theApp.m_pInput->Buffer 	= theApp.m_pInputBuffer;			theApp.m_pInput->BufferSize 	= m_InputBufferSize;			// end of rewriting.			return;		}		else{  //   m_IsInputBufferNULL == FALSE.			if(m_InputAllocateSize<=0){					theApp.HugeFree(theApp.m_pInputBuffer);					theApp.m_pInputBuffer=NULL; 		 			// Rewrite the INPUT. when Native Handling.					theApp.m_pInput->Buffer 	= theApp.m_pInputBuffer;					theApp.m_pInput->BufferSize 	= m_InputBufferSize;					// end of rewriting.					return;			}			else{    // size is not 0. Copy native data to the new buffer.					long i;					long CopyLength; 					char huge*	SrcPtr;					char huge*	DstPtr;               		m_hpBuffer = theApp.m_pInputBuffer;				 	theApp.m_pInputBuffer =(HCHARPTR)theApp.HugeMalloc(m_InputAllocateSize);  					// + Ogawa					theApp.m_pInput->BufferSize = m_InputBufferSize;					// - Ogawa					if(	theApp.m_pInput->BufferSize <= m_InputAllocateSize ) CopyLength = theApp.m_pInput->BufferSize;					else  CopyLength =   m_InputAllocateSize;					SrcPtr =     m_hpBuffer;					DstPtr = 	theApp.m_pInputBuffer;					for (i=0; i < CopyLength; i++, DstPtr++,SrcPtr++)						*DstPtr = *SrcPtr;						// + Ohbe for WIn32#ifdef WIN32					free(m_hpBuffer);#else					hfree(m_hpBuffer);#endif					m_hpBuffer=NULL;	// Don't free at destructor.	 				 				// Rewrite the INPUT. when Native Handling.					theApp.m_pInput->Buffer 	= theApp.m_pInputBuffer;					theApp.m_pInput->BufferSize 	= m_InputBufferSize;					// end of rewriting.					return;			}// end of else  in size is not 0 		}    // end of else in m_IsInputBufferNULL == FALSE	}			// else, m_IsUseCurrentBuffer == FALSE. 	if(theApp.m_pInputBuffer!=NULL){		theApp.HugeFree(theApp.m_pInputBuffer);	}	if(m_IsInputBufferNULL){		theApp.m_pInputBuffer=NULL;	}	else{		if(m_hpBuffer==NULL){			if(m_InputAllocateSize==0){				theApp.m_pInputBuffer=NULL;			}			else{				theApp.m_pInputBuffer=(HCHARPTR)theApp.HugeMalloc(m_InputAllocateSize);			}		}		else{			theApp.m_pInputBuffer=m_hpBuffer;			m_hpBuffer=NULL;	// Don't free at destructor.		}	}	theApp.m_pInput->Buffer=theApp.m_pInputBuffer;	theApp.m_pInput->BufferSize=m_InputBufferSize;	if(m_IsInputIOFuncNULL){		theApp.m_pInput->IOFunc=NULL;	}	else{		theApp.m_pInput->IOFunc=theApp.m_pInputFunction;		// + Ogawa		theApp.m_pInput->RefCon = m_InputRefCon;		// - Ogawa	}}void CInputPage::ChangeCaption(CString* NewTitle){	m_strCaption = *NewTitle;}/////////////////////////////////////////////////////////////////////////////// COutputPage dialogCOutputPage::COutputPage()	: CPropertyPage(COutputPage::IDD){	//{{AFX_DATA_INIT(COutputPage)	//}}AFX_DATA_INIT	m_IsOutputBufferNULL = FALSE;	m_OutputAllocateSize = theApp.m_pGenericInfo->PictMinBufOut;	m_OutputBufferSize = theApp.m_pGenericInfo->PictMinBufOut;	m_IsOutputIOFuncNULL = FALSE;	// + Ogawa	m_OutputRefCon = 0;	// - Ogawa}// + OgawaCOutputPage::COutputPage(int Preview)	: CPropertyPage(COutputPage::IDD){	//{{AFX_DATA_INIT(COutputPage)	//}}AFX_DATA_INIT	m_IsOutputBufferNULL = FALSE;	m_OutputAllocateSize = theApp.m_pPreviewInfo->PictMinBufOut;	m_OutputBufferSize = theApp.m_pPreviewInfo->PictMinBufOut;	m_IsOutputIOFuncNULL = FALSE;	m_OutputRefCon = 0;}// - Ogawavoid COutputPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(COutputPage)	DDX_Check(pDX, IDC_OutputBufferIsNULL, m_IsOutputBufferNULL);	DDX_Text(pDX, IDC_OutputAllocateSize, m_OutputAllocateSize);	DDX_Text(pDX, IDC_OutputBufferSize, m_OutputBufferSize);	DDX_Check(pDX, IDC_OutputIOFuncIsNULL, m_IsOutputIOFuncNULL);	// + Ogawa	DDX_Text(pDX, IDC_OutputRefCon, m_OutputRefCon);	// - Ogawa	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(COutputPage, CPropertyPage)	//{{AFX_MSG_MAP(COutputPage)	ON_BN_CLICKED(IDC_OutputBufferIsNULL, OnOutputBufferIsNULL)	ON_EN_CHANGE(IDC_OutputBufferSize, OnChangeOutputBufferSize)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// COutputPage message handlersvoid COutputPage::UpdateControl(){	GetDlgItem(IDC_OutputAllocateSizeText)->EnableWindow(!m_IsOutputBufferNULL);	GetDlgItem(IDC_OutputAllocateSize)->EnableWindow(!m_IsOutputBufferNULL);}BOOL COutputPage::OnInitDialog(){	CPropertyPage::OnInitDialog();	UpdateControl();	return TRUE;  // return TRUE  unless you set the focus to a control}void COutputPage::OnOutputBufferIsNULL(){	UpdateData(TRUE);	UpdateControl();}void COutputPage::StoreValue(){	if(theApp.m_pOutputBuffer!=NULL){		theApp.HugeFree(theApp.m_pOutputBuffer);	}	// + Ogawwa	if(theApp.m_pCompletePicture != NULL){		theApp.HugeFree(theApp.m_pCompletePicture);		theApp.m_pCompletePicture = NULL;	}	// - Ogawa	if(m_IsOutputBufferNULL){		theApp.m_pOutputBuffer=NULL;	}	else{		if(m_OutputAllocateSize==0){			theApp.m_pOutputBuffer=NULL;		}		else{			// + Ogawa			theApp.m_pOutputBuffer=(HCHARPTR)theApp.HugeMalloc(m_OutputAllocateSize);			theApp.m_pCompletePicture = (HCHARPTR)theApp.HugeMalloc(theApp.m_pGenericInfo->PictWidth * theApp.m_pGenericInfo->PictHeight * 3);			// + Ohbe for debug			//theApp.m_pOutputBuffer=(HCHARPTR)theApp.HugeMalloc(m_OutputAllocateSize + 4000);			// - Ohbe 			// - Ogawa		}	}	theApp.m_pOutput->Buffer=theApp.m_pOutputBuffer;	theApp.m_pOutput->BufferSize=m_OutputBufferSize;	if(m_IsOutputIOFuncNULL){		theApp.m_pOutput->IOFunc=NULL;	}	else{		theApp.m_pOutput->IOFunc=theApp.m_pOutputFunction;		// + Ogawa		theApp.m_pOutput->RefCon = m_OutputRefCon;		// - Ogawa	}}// + Ogawavoid COutputPage::StoreValue(int Preview){	if(theApp.m_pOutputBuffer!=NULL){		theApp.HugeFree(theApp.m_pOutputBuffer);	}	// + Ogawwa	if(theApp.m_pCompletePicture != NULL){		theApp.HugeFree(theApp.m_pCompletePicture);		theApp.m_pCompletePicture = NULL;	}	// - Ogawa	if(m_IsOutputBufferNULL){		theApp.m_pOutputBuffer=NULL;	}	else{		if(m_OutputAllocateSize==0){			theApp.m_pOutputBuffer=NULL;		}		else{			// + Ogawa			theApp.m_pOutputBuffer=(HCHARPTR)theApp.HugeMalloc(m_OutputAllocateSize);			theApp.m_pCompletePicture = (HCHARPTR)theApp.HugeMalloc(theApp.m_pPreviewInfo->PictWidth * theApp.m_pPreviewInfo->PictHeight);			// + Ohbe for debug			//theApp.m_pOutputBuffer=(HCHARPTR)theApp.HugeMalloc(m_OutputAllocateSize + 4000);			// - Ohbe 			// - Ogawa		}	}	theApp.m_pOutput->Buffer=theApp.m_pOutputBuffer;	theApp.m_pOutput->BufferSize=m_OutputBufferSize;	if(m_IsOutputIOFuncNULL){		theApp.m_pOutput->IOFunc=NULL;	}	else{		theApp.m_pOutput->IOFunc=theApp.m_pOutputFunction;		// + Ogawa		theApp.m_pOutput->RefCon = m_OutputRefCon;		// - Ogawa	}}// - Ogawavoid COutputPage::OnChangeOutputBufferSize(){	UpdateData(TRUE);	m_OutputAllocateSize=m_OutputBufferSize;	UpdateData(FALSE);}/////////////////////////////////////////////////////////////////////////////// CProgressPage dialogCProgressPage::CProgressPage()	: CPropertyPage(CProgressPage::IDD){	m_IsProgFuncNULL = FALSE;	//{{AFX_DATA_INIT(CProgressPage)		// NOTE: the ClassWizard will add member initialization here	//}}AFX_DATA_INIT}void CProgressPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CProgressPage)		// NOTE: the ClassWizard will add DDX and DDV calls here	DDX_Check(pDX, IDC_ProgFuncIsNULL, m_IsProgFuncNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CProgressPage, CPropertyPage)	//{{AFX_MSG_MAP(CProgressPage)		// NOTE: the ClassWizard will add message map macros here	ON_BN_CLICKED(IDC_ProgFuncIsNULL, OnProgFuncNULL)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CProgressPage message handlersvoid CProgressPage::StoreValue(){	theApp.m_IsProgFuncNULL = m_IsProgFuncNULL;}void CProgressPage::OnProgFuncNULL(){	UpdateData(TRUE);}/////////////////////////////////////////////////////////////////////////////// CPictInfoPage dialogCPictInfoPage::CPictInfoPage()	: CPropertyPage(CPictInfoPage::IDD){	//{{AFX_DATA_INIT(CPictInfoPage)	//}}AFX_DATA_INIT	m_PictNumber 	= theApp.m_pGenericInfo->PictNumber;	m_ThumbWidth 	= theApp.m_pGenericInfo->ThumbWidth;	m_ThumbHeight 	= theApp.m_pGenericInfo->ThumbHeight;	m_IsThumbPtrNULL = FALSE;	m_PictWidth 	= theApp.m_pGenericInfo->PictWidth;	m_PictHeight 	= theApp.m_pGenericInfo->PictHeight;	m_PictCompSize 	= theApp.m_pGenericInfo->PictCompSize;	m_PictMinBufIn 	= theApp.m_pGenericInfo->PictMinBufIn;	m_PictMinBufOut = theApp.m_pGenericInfo->PictMinBufOut;}void CPictInfoPage::StoreValue(){	theApp.m_pGenericInfo->PictNumber 		= m_PictNumber;	theApp.m_pGenericInfo->ThumbWidth 		= m_ThumbWidth;	theApp.m_pGenericInfo->ThumbHeight 		= m_ThumbHeight;	theApp.m_pGenericInfo->PictWidth 		= m_PictWidth;	theApp.m_pGenericInfo->PictHeight 		= m_PictHeight;	theApp.m_pGenericInfo->PictCompSize 	= m_PictCompSize;	theApp.m_pGenericInfo->PictMinBufIn 	= m_PictMinBufIn;	theApp.m_pGenericInfo->PictMinBufOut 	= m_PictMinBufOut;}void CPictInfoPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CPictInfoPage)	DDX_Text(pDX, IDC_PictNumber, m_PictNumber);	DDX_Text(pDX, IDC_ThumbWidth, m_ThumbWidth);	DDX_Text(pDX, IDC_ThumbHeight, m_ThumbHeight);	DDX_Check(pDX, IDC_ThumbPtrIsNULL, m_IsThumbPtrNULL);	DDX_Text(pDX, IDC_PictWidth, m_PictWidth);	DDX_Text(pDX, IDC_PictHeight, m_PictHeight);	DDX_Text(pDX, IDC_PictCompSize, m_PictCompSize);	DDX_Text(pDX, IDC_PictMinBufIn, m_PictMinBufIn);	DDX_Text(pDX, IDC_PictMinBufOut, m_PictMinBufOut);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CPictInfoPage, CPropertyPage)	//{{AFX_MSG_MAP(CPictInfoPage)	ON_BN_CLICKED(IDC_TimeStamp, OnTimeStamp)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CPictInfoPage message handlers/////////////////////////////////////////////////////////////////////////////// CDCGetCameraPicturePage dialogCDCGetCameraPicturePage::CDCGetCameraPicturePage()	: CPropertyPage(CDCGetCameraPicturePage::IDD){	//{{AFX_DATA_INIT(CDCGetCameraPicturePage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsPictureNULL = FALSE;	m_IsInputNULL = FALSE;	m_IsOutputNULL = FALSE;	m_IsProgressNULL = FALSE;}void CDCGetCameraPicturePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCGetCameraPicturePage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_PictureIsNULL, m_IsPictureNULL);	DDX_Check(pDX, IDC_InputIsNULL, m_IsInputNULL);	DDX_Check(pDX, IDC_OutputIsNULL, m_IsOutputNULL);	DDX_Check(pDX, IDC_ProgressIsNULL, m_IsProgressNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCGetCameraPicturePage, CPropertyPage)	//{{AFX_MSG_MAP(CDCGetCameraPicturePage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_InputIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_OutputIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_ProgressIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_PictureIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCGetCameraPicturePage message handlersvoid CDCGetCameraPicturePage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCGetCameraPictureDlg dialogCDCGetCameraPictureDlg::CDCGetCameraPictureDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCGetCameraPicture()",pParentWnd){	m_pGetCameraPicturePage=NULL;    m_pPictInfoPage=NULL;	m_pInputPage=NULL;	m_pOutputPage=NULL;	m_pProgressPage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	m_pCamTypePage=NULL;	m_pCamMemTypePage=NULL;#ifdef DC50Include	m_pAlbumPage=NULL;#endif	StartErrorTrap		m_pGetCameraPicturePage=new CDCGetCameraPicturePage;		if(m_pGetCameraPicturePage==NULL){			break;		}		m_IsCameraDataNULL=m_pGetCameraPicturePage->m_IsCameraDataNULL;		m_IsPictureNULL=m_pGetCameraPicturePage->m_IsPictureNULL;		m_IsInputNULL=m_pGetCameraPicturePage->m_IsInputNULL;		m_IsOutputNULL=m_pGetCameraPicturePage->m_IsOutputNULL;		m_IsProgressNULL=m_pGetCameraPicturePage->m_IsProgressNULL;		m_pPictInfoPage=new CPictInfoPage;		if(m_pPictInfoPage==NULL){			break;		}		m_pInputPage=new CInputPage;		if(m_pInputPage==NULL){			break;		}		m_pOutputPage=new COutputPage;		if(m_pOutputPage==NULL){			break;		}		m_pProgressPage=new CProgressPage;		if(m_pProgressPage==NULL){			break;		}		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pCamMemTypePage=new CCamMemTypePage;		if(m_pCamMemTypePage==NULL){			break;		}#ifdef DC50Include		m_pAlbumPage=new CAlbumPage;		if(m_pAlbumPage==NULL){			break;		}#endif		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pGetCameraPicturePage);		AddPage(m_pCamMemTypePage);#ifdef DC50Include		AddPage(m_pAlbumPage);#endif		AddPage(m_pPictInfoPage);		AddPage(m_pInputPage);		AddPage(m_pOutputPage);		AddPage(m_pProgressPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCGetCameraPictureDlg::~CDCGetCameraPictureDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pProgressPage!=NULL){		delete m_pProgressPage;		m_pProgressPage=NULL;	}	if(m_pOutputPage!=NULL){		delete m_pOutputPage;		m_pOutputPage=NULL;	}	if(m_pInputPage!=NULL){		delete m_pInputPage;		m_pInputPage=NULL;	}	if(m_pPictInfoPage!=NULL){		delete m_pPictInfoPage;		m_pPictInfoPage=NULL;	}#ifdef DC50Include	if(m_pAlbumPage!=NULL){		delete m_pAlbumPage;		m_pAlbumPage=NULL;	}#endif	if(m_pCamMemTypePage!=NULL){		delete m_pCamMemTypePage;		m_pCamMemTypePage=NULL;	}	if(m_pGetCameraPicturePage!=NULL){		delete m_pGetCameraPicturePage;		m_pGetCameraPicturePage=NULL;	}}BEGIN_MESSAGE_MAP(CDCGetCameraPictureDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCGetCameraPictureDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCGetCameraPictureDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	AddPage(m_pCamMemTypePage);#ifdef DC50Include	AddPage(m_pAlbumPage);#endif	if(!m_pGetCameraPicturePage->m_IsPictureNULL){		AddPage(m_pPictInfoPage);	}	if(!m_pGetCameraPicturePage->m_IsInputNULL){		AddPage(m_pInputPage);	}	if(!m_pGetCameraPicturePage->m_IsOutputNULL){		AddPage(m_pOutputPage);	}	if(!m_pGetCameraPicturePage->m_IsProgressNULL){		AddPage(m_pProgressPage);	}	if(!m_pGetCameraPicturePage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCGetCameraPictureDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCGetCameraPictureDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pGetCameraPicturePage->m_IsCameraDataNULL;	m_IsPictureNULL=m_pGetCameraPicturePage->m_IsPictureNULL;	m_IsInputNULL=m_pGetCameraPicturePage->m_IsInputNULL;	m_IsOutputNULL=m_pGetCameraPicturePage->m_IsOutputNULL;	m_IsProgressNULL=m_pGetCameraPicturePage->m_IsProgressNULL;	m_pCamMemTypePage->StoreValue();#ifdef DC50Include	m_pAlbumPage->StoreValue();#endif	if(!m_IsInputNULL){		m_pInputPage->StoreValue();	}	if(!m_IsOutputNULL){		m_pOutputPage->StoreValue();	}	if(!m_IsProgressNULL){		m_pProgressPage->StoreValue();	}	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCGetNativePicturePage dialogCDCGetNativePicturePage::CDCGetNativePicturePage()	: CPropertyPage(CDCGetNativePicturePage::IDD){	//{{AFX_DATA_INIT(CDCGetNativePicturePage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsPictureNULL = FALSE;	m_IsOutputNULL = FALSE;	m_IsProgressNULL = FALSE;}void CDCGetNativePicturePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCGetNativePicturePage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_PictureIsNULL, m_IsPictureNULL);	DDX_Check(pDX, IDC_OutputIsNULL, m_IsOutputNULL);	DDX_Check(pDX, IDC_ProgressIsNULL, m_IsProgressNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCGetNativePicturePage, CPropertyPage)	//{{AFX_MSG_MAP(CDCGetNativePicturePage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_PictureIsNULL, OnPictureIsNULL)	ON_BN_CLICKED(IDC_OutputIsNULL, OnOutputIsNULL)	ON_BN_CLICKED(IDC_ProgressIsNULL, OnProgressIsNULL)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCGetNativePicturePage message handlersvoid CDCGetNativePicturePage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}void CDCGetNativePicturePage::OnPictureIsNULL(){	ChangeParameter();}void CDCGetNativePicturePage::OnOutputIsNULL(){	ChangeParameter();}void CDCGetNativePicturePage::OnProgressIsNULL(){	ChangeParameter();}/////////////////////////////////////////////////////////////////////////////// CDCGetNativePictureDlg dialogCDCGetNativePictureDlg::CDCGetNativePictureDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCGetNativePicture()",pParentWnd){	// Init pointers.	m_pGetNativePicturePage=NULL;	m_pOutputPage=NULL;	m_pProgressPage=NULL;    m_pPictInfoPage=NULL;    m_pCamMemTypePage=NULL;	StartErrorTrap		m_pGetNativePicturePage=new CDCGetNativePicturePage;		if(m_pGetNativePicturePage==NULL){			break;		}		m_IsCameraDataNULL=m_pGetNativePicturePage->m_IsCameraDataNULL;		m_IsPictureNULL=m_pGetNativePicturePage->m_IsPictureNULL;		m_IsOutputNULL=m_pGetNativePicturePage->m_IsOutputNULL;		m_IsProgressNULL=m_pGetNativePicturePage->m_IsProgressNULL;		m_pCamMemTypePage=new CCamMemTypePage;		m_pPictInfoPage=new CPictInfoPage;		if(m_pPictInfoPage==NULL){			break;		}		// + Ogawa		m_pAlbumNumPage=new CAlbumPage;		if(m_pAlbumNumPage==NULL){			break;		}		// - Ogawa		m_pOutputPage=new CInputPage;		if(m_pOutputPage==NULL){			break;		}		//Change the caption to fake as Output.		CString NewTitle;		NewTitle = "Output";		m_pOutputPage->ChangeCaption(&NewTitle);		m_pProgressPage=new CProgressPage;		if(m_pProgressPage==NULL){			break;		}		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pGetNativePicturePage);		// + Ogawa		AddPage(m_pCamMemTypePage);		AddPage(m_pAlbumNumPage);		// - Ogawa		AddPage(m_pPictInfoPage);		AddPage(m_pOutputPage);		AddPage(m_pProgressPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCGetNativePictureDlg::~CDCGetNativePictureDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pProgressPage!=NULL){		delete m_pProgressPage;		m_pProgressPage=NULL;	}	if(m_pOutputPage!=NULL){		delete m_pOutputPage;		m_pOutputPage=NULL;	}	if(m_pPictInfoPage!=NULL){		delete m_pPictInfoPage;		m_pPictInfoPage=NULL;	}	// + Ogawa	if(m_pAlbumNumPage!=NULL){		delete m_pAlbumNumPage;		m_pAlbumNumPage=NULL;	}	// - Ogawa	if(m_pCamMemTypePage!=NULL){		delete m_pCamMemTypePage;		m_pCamMemTypePage=NULL;	}	if(m_pGetNativePicturePage!=NULL){		delete m_pGetNativePicturePage;		m_pGetNativePicturePage=NULL;	}}#ifdef WIN32BEGIN_MESSAGE_MAP(CDCGetNativePictureDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCGetNativePictureDlg)// + Ohbe for WIN32 MFC.// WIN32 MFC CPropertySheet doesnot have OnApply....???	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()#elseBEGIN_MESSAGE_MAP(CDCGetNativePictureDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCGetNativePictureDlg)// + Ohbe for WIN32 MFC.// WIN32 MFC CPropertySheet doesnot have OnApply....???	ON_COMMAND(ID_APPLY_NOW, OnApply)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()#endifvoid CDCGetNativePictureDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	} 	AddPage(m_pCamMemTypePage);	// + Ogawa	AddPage(m_pAlbumNumPage);	// - Ogawa	if(!m_pGetNativePicturePage->m_IsPictureNULL){		AddPage(m_pPictInfoPage);	}	if(!m_pGetNativePicturePage->m_IsOutputNULL){		AddPage(m_pOutputPage);	}	if(!m_pGetNativePicturePage->m_IsProgressNULL){		AddPage(m_pProgressPage);	}	if(!m_pGetNativePicturePage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCGetNativePictureDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pGetNativePicturePage->m_IsCameraDataNULL;	m_IsPictureNULL=m_pGetNativePicturePage->m_IsPictureNULL;	m_IsOutputNULL=m_pGetNativePicturePage->m_IsOutputNULL;	m_IsProgressNULL=m_pGetNativePicturePage->m_IsProgressNULL;     m_pCamMemTypePage->StoreValue();	if(!m_IsPictureNULL){		m_pPictInfoPage->StoreValue();	}	if(!m_IsOutputNULL){		m_pOutputPage->StoreValue();	}	if(!m_IsProgressNULL){		m_pProgressPage->StoreValue();	}	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCProcNativePicturePage dialog groupCDCProcNativePicturePage::CDCProcNativePicturePage()	: CPropertyPage(CDCProcNativePicturePage::IDD){	//{{AFX_DATA_INIT(CDCProcNativePicturePage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsPictureNULL = FALSE;	m_IsInputNULL = FALSE;	m_IsOutputNULL = FALSE;	m_IsProgressNULL = FALSE;}void CDCProcNativePicturePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCProcNativePicturePage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_PictureIsNULL, m_IsPictureNULL);	DDX_Check(pDX, IDC_InputIsNULL, m_IsInputNULL);	DDX_Check(pDX, IDC_OutputIsNULL, m_IsOutputNULL);	DDX_Check(pDX, IDC_ProgressIsNULL, m_IsProgressNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCProcNativePicturePage, CPropertyPage)	//{{AFX_MSG_MAP(CDCProcNativePicturePage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, OnCameraDataIsNULL)	ON_BN_CLICKED(IDC_InputIsNULL, OnInputIsNULL)	ON_BN_CLICKED(IDC_OutputIsNULL, OnOutputIsNULL)	ON_BN_CLICKED(IDC_ProgressIsNULL, OnProgressIsNULL)	ON_BN_CLICKED(IDC_PictureIsNULL, OnPictureIsNULL)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCProcNativePicturePage message handlersvoid CDCProcNativePicturePage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}void CDCProcNativePicturePage::OnCameraDataIsNULL(){	ChangeParameter();}void CDCProcNativePicturePage::OnPictureIsNULL(){	ChangeParameter();}void CDCProcNativePicturePage::OnInputIsNULL(){	ChangeParameter();}void CDCProcNativePicturePage::OnOutputIsNULL(){	ChangeParameter();}void CDCProcNativePicturePage::OnProgressIsNULL(){	ChangeParameter();}/////////////////////////////////////////////////////////////////////////////// CDCProcNativePictureDlg dialogCDCProcNativePictureDlg::CDCProcNativePictureDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCProcNativePicture()",pParentWnd){	m_pProcNativePicturePage=NULL;	m_pInputPage=NULL;	m_pOutputPage=NULL;	m_pProgressPage=NULL;    m_pPictInfoPage=NULL;	StartErrorTrap		m_pProcNativePicturePage=new CDCProcNativePicturePage;		if(m_pProcNativePicturePage==NULL){			break;		}		m_IsCameraDataNULL=m_pProcNativePicturePage->m_IsCameraDataNULL;		m_IsPictureNULL=m_pProcNativePicturePage->m_IsPictureNULL;		m_IsInputNULL=m_pProcNativePicturePage->m_IsInputNULL;		m_IsOutputNULL=m_pProcNativePicturePage->m_IsOutputNULL;		m_IsProgressNULL=m_pProcNativePicturePage->m_IsProgressNULL;		m_pPictInfoPage=new CPictInfoPage;		if(m_pPictInfoPage==NULL){			break;		}		m_pInputPage=new CInputPage;		if(m_pInputPage==NULL){			break;		}		m_pInputPage->m_IsUseCurrentBuffer= TRUE;		m_pOutputPage=new COutputPage;		if(m_pOutputPage==NULL){			break;		}		m_pProgressPage=new CProgressPage;		if(m_pProgressPage==NULL){			break;		}		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pProcNativePicturePage);		AddPage(m_pPictInfoPage);		// + Ogawa		AddPage(m_pInputPage);		// - Ogawa//		AddPage(m_pInputPage);		AddPage(m_pOutputPage);		AddPage(m_pProgressPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCProcNativePictureDlg::~CDCProcNativePictureDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pProgressPage!=NULL){		delete m_pProgressPage;		m_pProgressPage=NULL;	}	if(m_pOutputPage!=NULL){		delete m_pOutputPage;		m_pOutputPage=NULL;	}	if(m_pInputPage!=NULL){		delete m_pInputPage;		m_pInputPage=NULL;	}	if(m_pPictInfoPage!=NULL){		delete m_pPictInfoPage;		m_pPictInfoPage=NULL;	}	if(m_pProcNativePicturePage!=NULL){		delete m_pProcNativePicturePage;		m_pProcNativePicturePage=NULL;	}}BEGIN_MESSAGE_MAP(CDCProcNativePictureDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCProcNativePictureDlg)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCProcNativePictureDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pProcNativePicturePage->m_IsPictureNULL){		AddPage(m_pPictInfoPage);	}	if(!m_pProcNativePicturePage->m_IsInputNULL){		AddPage(m_pInputPage);	}	if(!m_pProcNativePicturePage->m_IsOutputNULL){		AddPage(m_pOutputPage);	}	if(!m_pProcNativePicturePage->m_IsProgressNULL){		AddPage(m_pProgressPage);	}	if(!m_pProcNativePicturePage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}	// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_tabRow....???#ifdef WIN32	GetTabControl()->RedrawWindow();#else	m_tabRow.RedrawWindow();#endif	// - Ohbe}void CDCProcNativePictureDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pProcNativePicturePage->m_IsCameraDataNULL;	m_IsPictureNULL=m_pProcNativePicturePage->m_IsPictureNULL;	m_IsInputNULL=m_pProcNativePicturePage->m_IsInputNULL;	m_IsOutputNULL=m_pProcNativePicturePage->m_IsOutputNULL;	m_IsProgressNULL=m_pProcNativePicturePage->m_IsProgressNULL;	if(!m_IsInputNULL){		m_pInputPage->StoreValue();	}	if(!m_IsOutputNULL){		m_pOutputPage->StoreValue();	}	if(!m_IsProgressNULL){		m_pProgressPage->StoreValue();	}	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCCopyMemToCardPage dialogCDCCopyMemToCardPage::CDCCopyMemToCardPage()	: CPropertyPage(CDCCopyMemToCardPage::IDD){	//{{AFX_DATA_INIT(CDCCopyMemToCardPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_PictNumStr = "";	m_PictNum=0;}void CDCCopyMemToCardPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCCopyMemToCardPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_CBString(pDX, IDC_PictNum, m_PictNumStr);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCCopyMemToCardPage, CPropertyPage)	//{{AFX_MSG_MAP(CDCCopyMemToCardPage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	ON_CBN_EDITCHANGE(IDC_PictNum, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_PictNum, OnUpdateValue)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCCopyMemToCardPage message handlersBOOL CDCCopyMemToCardPage::OnInitDialog(){	CPropertyPage::OnInitDialog();	CComboBox*	pComtrol;	int			PictNumValue;	pComtrol=(CComboBox*)GetDlgItem(IDC_PictNum);	switch(m_PictNum){		case DCCopyAllImages:			PictNumValue=0;			break;		default:			wsprintf(m_PictNumStr.GetBuffer(64),"%d",m_PictNum);			m_PictNumStr.ReleaseBuffer();			UpdateData(FALSE);			return TRUE;	}	pComtrol->SetCurSel(PictNumValue);	return TRUE;  // return TRUE  unless you set the focus to a control}void CDCCopyMemToCardPage::OnUpdateValue(){	UpdateData(TRUE);	CComboBox*	pComtrol;	double		ComboBoxValue;	int			PictNumValue;	pComtrol=(CComboBox*)GetDlgItem(IDC_PictNum);	PictNumValue=pComtrol->GetCurSel();	switch(PictNumValue){		case 0:			m_PictNum=DCCopyAllImages;			break;		default:			ComboBoxValue=atof((LPCSTR)m_PictNumStr);			if((ComboBoxValue < SHRT_MIN) || (ComboBoxValue > SHRT_MAX)){				m_PictNum=0;			}			else{				m_PictNum= (short)ComboBoxValue;			}	}}void CDCCopyMemToCardPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCCopyMemToCardDlg dialogCDCCopyMemToCardDlg::CDCCopyMemToCardDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCCopyMemToCard()",pParentWnd){	m_pCopyMemToCardPage=NULL;#ifdef DC50Include	m_pAlbumPage=NULL;#endif	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pCopyMemToCardPage=new CDCCopyMemToCardPage;		if(m_pCopyMemToCardPage==NULL){			break;		}		m_IsCameraDataNULL=m_pCopyMemToCardPage->m_IsCameraDataNULL;		m_PictNum=m_pCopyMemToCardPage->m_PictNum;#ifdef DC50Include		m_pAlbumPage=new CAlbumPage;		if(m_pAlbumPage==NULL){			break;		}#endif		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pCopyMemToCardPage);#ifdef DC50Include		AddPage(m_pAlbumPage);#endif		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCCopyMemToCardDlg::~CDCCopyMemToCardDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}#ifdef DC50Include	if(m_pAlbumPage!=NULL){		delete m_pAlbumPage;		m_pAlbumPage=NULL;	}#endif	if(m_pCopyMemToCardPage!=NULL){		delete m_pCopyMemToCardPage;		m_pCopyMemToCardPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCCopyMemToCardDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCCopyMemToCardDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCCopyMemToCardDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}#ifdef DC50Include	AddPage(m_pAlbumPage);#endif	if(!m_pCopyMemToCardPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCCopyMemToCardDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCCopyMemToCardDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pCopyMemToCardPage->m_IsCameraDataNULL;	m_PictNum=m_pCopyMemToCardPage->m_PictNum;#ifdef DC50Include	m_pAlbumPage->StoreValue();#endif	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCGetNativeCameraTypePage dialogCDCGetNativeCameraTypePage::CDCGetNativeCameraTypePage()	: CPropertyPage(CDCGetNativeCameraTypePage::IDD){	//{{AFX_DATA_INIT(CDCGetNativeCameraTypePage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsCameraPointerNULL = FALSE;	m_IsInputNULL = FALSE;}void CDCGetNativeCameraTypePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCGetNativeCameraTypePage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_InputIsNULL, m_IsInputNULL);	DDX_Check(pDX, IDC_CameraPointerIsNULL, m_IsCameraPointerNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCGetNativeCameraTypePage, CPropertyPage)	//{{AFX_MSG_MAP(CDCGetNativeCameraTypePage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_InputIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_CameraPointerIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCGetNativeCameraTypePage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/*/////////////////////////////////////////////////////////////////////////////// CDCGetNativeCameraTypeDlg dialogCDCGetNativeCameraTypeDlg::CDCGetNativeCameraTypeDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCGetNativeCameraType",pParentWnd){	m_pGetNativeCameraTypePage=NULL;	m_pInputPage = NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pGetNativeCameraTypePage=new CDCGetNativeCameraTypePage;		if(m_pGetNativeCameraTypePage==NULL){			break;		}		m_pInputPage=new CInputPage();		if(m_pInputPage==NULL){			break;		}		m_pInputPage->m_IsUseCurrentBuffer= TRUE;		m_IsCameraDataNULL=m_pGetNativeCameraTypePage->m_IsCameraDataNULL;		m_IsCameraPointerNULL=m_pGetNativeCameraTypePage->m_IsCameraPointerNULL;		m_IsInputNULL=m_pGetNativeCameraTypePage->m_IsInputNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pGetNativeCameraTypePage);		AddPage(m_pCamTypePage);		AddPage(m_pInputPage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCGetNativeCameraTypeDlg::~CDCGetNativeCameraTypeDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pInputPage!=NULL){		delete m_pInputPage;		m_pCamTypePage=NULL;	}	if(m_pGetNativeCameraTypePage!=NULL){		delete m_pGetNativeCameraTypePage;		m_pGetNativeCameraTypePage=NULL;	}}BEGIN_MESSAGE_MAP(CDCGetNativeCameraTypeDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCGetNativeCameraTypeDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCGetNativeCameraTypeDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pGetNativeCameraTypePage->m_IsInputNULL)		AddPage(m_pInputPage);	if(!m_pGetNativeCameraTypePage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCGetNativeCameraTypeDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCGetNativeCameraTypeDlg::OnOK(){	UpdateData(TRUE);	GetPage(m_nCurPage)->UpdateData(TRUE);	m_IsCameraDataNULL=m_pGetNativeCameraTypePage->m_IsCameraDataNULL;	m_IsCameraPointerNULL=m_pGetNativeCameraTypePage->m_IsCameraPointerNULL;	m_IsInputNULL=m_pGetNativeCameraTypePage->m_IsInputNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	if(!m_pGetNativeCameraTypePage->m_IsInputNULL)		m_pInputPage->StoreValue();			CPropertySheetBase::OnOK();}*//*/////////////////////////////////////////////////////////////////////////////// CFlashModePage dialogCFlashModePage::CFlashModePage()	: CPropertyPage(CFlashModePage::IDD){	//{{AFX_DATA_INIT(CCamMemTypePage)	m_CamMemType=theApp.m_CamMemType;	//}}AFX_DATA_INIT}void CCamMemTypePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CCamMemTypePage)	DDX_CBString(pDX, IDC_CamMemType, m_CamMemTypeStr);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CCamMemTypePage, CPropertyPage)	//{{AFX_MSG_MAP(CCamMemTypePage)	ON_CBN_EDITCHANGE(IDC_CamMemType, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_CamMemType, OnUpdateValue)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CFlashModePage message handlersBOOL CFlashModePage::OnInitDialog(){	CPropertyPage::OnInitDialog();	CComboBox*	pComtrol;	int			SelectNumber;	BOOL		MatchFlag;	MatchFlag=TRUE;	pComtrol=(CComboBox*)GetDlgItem(IDC_FlashMode);	switch(m_FlashMode){		case DC25FlashAuto:			SelectNumber=0;			break;		case DC25FlashOn:			SelectNumber=1;			break;		case DC25FlashOff:			SelectNumber=2;			break;		default:			wsprintf(m_FlashModeStr.GetBuffer(64),"%d",m_FlashMode);			m_FlashModeStr.ReleaseBuffer();			MatchFlag=FALSE;	}	if(MatchFlag){		pComtrol->SetCurSel(SelectNumber);	}	else{		UpdateData(FALSE);	}	return TRUE;  // return TRUE  unless you set the focus to a control}void CFlashModePage::OnUpdateValue(){	UpdateData(TRUE);	double		ComboBoxValue;	switch(((CComboBox*)GetDlgItem(IDC_FlashMode))->GetCurSel()){		case 0:			m_FlashMode=DC25FlashAuto;			break;		case 1:			m_FlashMode=DC25FlashOn;			break;		case 1:			m_FlashMode=DC25FlashOff;			break;		default:			ComboBoxValue=atof((LPCSTR)m_FlashModeStr);			if((ComboBoxValue < INT_MIN) || (ComboBoxValue > INT_MAX)){				m_FlashMode=(DC25FlashMode)0;			}			else{				m_FlashMode=(DC25FlashMode)ComboBoxValue;			}	}}void CFlashModePage::StoreValue(){	theApp.m_CamMemType = (DC25FlashMode)m_FlashMode;}*/