// dc25sdkt.cpp : Defines the class behaviors for the application.//#include "stdafx.h"#include "SdkTest1.h"#include "MainFrm.h"#include "Test1Doc.h"#include "TestView.h"#ifdef _DEBUG#define new DEBUG_NEW#undef THIS_FILEstatic char THIS_FILE[] = __FILE__;#endif/////////////////////////////////////////////////////////////////////////////// CSDKTest1BEGIN_MESSAGE_MAP(CSDKTest1, CWinApp)	//{{AFX_MSG_MAP(CSDKTest1)	ON_COMMAND(ID_APP_ABOUT, OnAppAbout)		// NOTE - the ClassWizard will add and remove mapping macros here.		//    DO NOT EDIT what you see in these blocks of generated code!	//}}AFX_MSG_MAP	// Standard file based document commands	ON_COMMAND(ID_FILE_NEW, CWinApp::OnFileNew)	ON_COMMAND(ID_FILE_OPEN, CWinApp::OnFileOpen)END_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CSDKTest1 constructionCSDKTest1::CSDKTest1() //**************************************************** // + Ohbe {	m_InitialErrorFlag	= TRUE;	m_IsOpenDriver		= FALSE;	m_IsOpenCamera		= FALSE;	m_pInputBuffer		= NULL;	m_pOutputBuffer		= NULL;	m_pInputFunction	= NULL;	m_pOutputFunction	= OutputCallbackFunction;//	m_pProgressFunction	= (DCProgressProc)&(CMainFrame::ReadAndConvertProc);	m_pProgressFunction	= ProgressCallbackFunction;	// + Ogawa	m_pWindowData		= NULL;	// - Ogawa	StartErrorTrap#ifdef ALLSTAR		m_pDCDriver=new KDCDriver;#else		m_pDCDriver=new DCDriver;#endif		if(m_pDCDriver==NULL){			break;		}		memset((void*)m_pDCDriver,0,sizeof(DCDriver));#ifdef ALLSTAR		m_pDCCamera=new KDCCamera;#else		m_pDCCamera=new DCCamera;#endif		if(m_pDCCamera==NULL){			break;		}		m_pDCCamera->Driver=m_pDCDriver;		// + Ogawa		m_pDCCamera->PortNum = DCPortNum1;		m_pDCCamera->CamType = DC120;		m_pDCCamera->SpecificCamType = DC120;		m_pDCCamera->BitRate = DCBitRate115200;		// - Ogawa#ifdef ALLSTAR		m_pGenericStatus=new KDCStatus;#else		m_pGenericStatus=new DCStatus;#endif		if(m_pGenericStatus==NULL){			break;		}//		m_pDC20FullStatus=new DC20Status;//		if(m_pDC20FullStatus==NULL){//			break;//		}//		m_pDC25FullStatus=new DC25Status;//		if(m_pDC25FullStatus==NULL){//			break;//		}#ifdef DC50Include		m_pDC50FullStatus=new DC50Status;		if(m_pDC50FullStatus==NULL){			break;		}#endif#ifdef DC40Include		m_pDC40FullStatus=new DC40Status;		if(m_pDC40FullStatus==NULL){			break;		}#endif#ifdef DC120Include		m_pDC120FullStatus=new DC120Status;		if(m_pDC120FullStatus==NULL){			break;		}#endif		m_pGenericConfig=new DCConfig;		if(m_pGenericConfig==NULL){			break;		}//		m_pDC20FullConfig=new DC20Config;//		if(m_pDC20FullConfig==NULL){//			break;//		}//		m_pDC25FullConfig=new DC25Config;//		if(m_pDC25FullConfig==NULL){//			break;//		}#ifdef DC50Include		m_pDC50FullConfig=new DC50Config;		if(m_pDC50FullConfig==NULL){			break;		}#endif#ifdef DC40Include		m_pDC40FullConfig=new DC40Config;		if(m_pDC40FullConfig==NULL){			break;		}#endif#ifdef DC120Include		m_pDC120FullConfig=new DC120Config;		if(m_pDC120FullConfig==NULL){			break;		}#endif		m_pCamId=new char [DCCamIDLength];		if(m_pCamId==NULL){			break;		}		memset((void*)m_pCamId,0,sizeof(DCCamIDLength));		m_pDCCamera->CamId=m_pCamId;		m_pGenericConfig->CamId=m_pCamId;		m_pGenericInfo=new DCPictInfo;		if(m_pGenericInfo==NULL){			break;		}				// Initial Value This is tepmporary. For DC25 Testing.		m_pGenericInfo->PictNumber = 0;		m_pGenericInfo->ThumbWidth = 0;		// Value change 80->0 by Ogawa		m_pGenericInfo->ThumbHeight = 0;		// Value change 60->0 by Ogawa		// + Ogawa		m_pGenericInfo->ThumbPtr = NULL;		//m_pGenericInfo->ThumbPtr = (HCHARPTR)HugeMalloc(DefaultThumbnailSize);		// - Ogawa		m_pGenericInfo->PictWidth = 0;		// Value change 493->0 by Ogawa		m_pGenericInfo->PictHeight = 0;		// Value change 373->0 by Ogawa		m_pGenericInfo->PictCompSize = 0;		// Value change 124928->0 by Ogawa		m_pGenericInfo->PictMinBufIn = 0;		// Value change 150000->0 by Ogawa		m_pGenericInfo->PictMinBufOut = 0;		// Value change 551667->0 by Ogawa		m_pGenericInfo->TimeStamp.tm_sec = 0;		m_pGenericInfo->TimeStamp.tm_min = 0;		m_pGenericInfo->TimeStamp.tm_hour = 0;		m_pGenericInfo->TimeStamp.tm_mday = 0;		m_pGenericInfo->TimeStamp.tm_mon = 0;		m_pGenericInfo->TimeStamp.tm_year = 0;		m_pGenericInfo->TimeStamp.tm_wday = 0;		m_pGenericInfo->TimeStamp.tm_yday = 0;		m_pGenericInfo->TimeStamp.tm_isdst = 0;        // End of initialization.        //		m_p25FullPictInfo=new DC25PictInfo;//		if(m_p25FullPictInfo==NULL){//			break;//		}//		m_p20FullPictInfo=new DC20PictInfo;//		if(m_p20FullPictInfo==NULL){//			break;//		}#ifdef DC50Include		m_p50FullPictInfo=new DC50PictInfo;		if(m_p50FullPictInfo==NULL){			break;		}		m_pPreviewInfo=new DC50PreviewInfo;		if(m_pPreviewInfo==NULL){			break;		}#endif#ifdef DC40Include		m_p40FullPictInfo=new DC40PictInfo;		if(m_p40FullPictInfo==NULL){			break;		}#endif#ifdef DC120Include		m_p120FullPictInfo=new DC120PictInfo;		if(m_p120FullPictInfo==NULL){			break;		}#endif// + Ogawa #ifdef DC120Include		m_AlbumNumber = -1;		//m_AlbumNameArraySize = DC120AvailableAlbumSize;#endif// - Ogawa #ifdef ALLSTAR		m_pIPData=new KDCImgProcData;#else		m_pIPData=new DCImgProcData;#endif		if(m_pIPData==NULL){			break;		}#ifdef ALLSTAR		m_pWindowData=new KDCOutputWindow;		m_pWindowData->HOffset	=	0;		m_pWindowData->VOffset	=	0;		m_pWindowData->Width	=	0;		m_pWindowData->Height	=	0;		m_pWindowData->RowBytes	=	0;		m_pWindowData->ThumbRowBytes	=	0;#else		m_pWindowData=new DCOutputWindow;#endif#ifdef ALLSTAR		if(m_pWindowData==NULL){			break;		}		m_pInput=new KDCImageIOCB;		if(m_pInput==NULL){			break;		}		m_pOutput=new KDCImageIOCB;		if(m_pOutput==NULL){			break;		}		m_pProgress=new KDCProgressCB;		if(m_pProgress==NULL){			break;		}#else		if(m_pWindowData==NULL){			break;		}		m_pInput=new DCImageIOCB;		if(m_pInput==NULL){			break;		}		m_pOutput=new DCImageIOCB;		if(m_pOutput==NULL){			break;		}		m_pProgress=new DCProgressCB;		if(m_pProgress==NULL){			break;		}#endif		m_pInput->IOFunc=m_pInputFunction;		m_pOutput->IOFunc=m_pOutputFunction;		m_pProgress->ProgFunc=m_pProgressFunction;		m_pProgress->RefCon = 15;		m_InitialErrorFlag=FALSE;	EndErrorTrap}CSDKTest1::~CSDKTest1(){	if(m_pOutputBuffer!=NULL){		HugeFree(m_pOutputBuffer);	}	if(m_pInputBuffer!=NULL){		HugeFree(m_pInputBuffer);	}	if(m_pPictInfoBuffer!=NULL){		HugeFree(m_pImageBuffer);	}	if(m_pImageBuffer!=NULL){		HugeFree(m_pImageBuffer);	}	if(m_pInput!=NULL){		delete m_pInput;		m_pInput=NULL;	}	// + Ogawa	if(m_pOutput!=NULL){		delete m_pOutput;		m_pOutput=NULL;	}	if(m_pProgress!=NULL){		delete m_pProgress;		m_pProgress=NULL;	}	// - Ogawa	if(m_pWindowData!=NULL){		delete m_pWindowData;		m_pWindowData=NULL;	}	if(m_pIPData!=NULL){		delete m_pIPData;		m_pIPData=NULL;	}//	if(m_pDC25FullConfig!=NULL){//		delete m_pDC25FullConfig;//		m_pDC25FullConfig=NULL;//	}//	if(m_pDC20FullConfig!=NULL){//		delete m_pDC20FullConfig;//		m_pDC20FullConfig=NULL;//	}#ifdef DC50Include	if(m_pDC50FullConfig!=NULL){		delete m_pDC50FullConfig;		m_pDC50FullConfig=NULL;	}#endif#ifdef DC40Include	if(m_pDC40FullConfig!=NULL){		delete m_pDC40FullConfig;		m_pDC40FullConfig=NULL;	}#endif#ifdef DC120Include	if(m_pDC120FullConfig!=NULL){		delete m_pDC120FullConfig;		m_pDC120FullConfig=NULL;	}#endif	if(m_pGenericInfo!=NULL){		// + Ogawa		if(m_pGenericInfo->ThumbPtr != NULL) {			HugeFree(m_pGenericInfo->ThumbPtr);		}		// - Ogawa		delete m_pGenericInfo;		m_pGenericInfo=NULL;	}	if(m_pCamId!=NULL){		delete [] m_pCamId;		m_pCamId=NULL;	}	if(m_pGenericConfig!=NULL){		delete m_pGenericConfig;		m_pGenericConfig=NULL;	}//	if(m_pDC25FullStatus!=NULL){//		delete m_pDC25FullStatus;//		m_pDC25FullStatus=NULL;//	}	// + Ogawa//	if(m_p25FullPictInfo!=NULL){//		delete m_p25FullPictInfo;//		m_p25FullPictInfo=NULL;//	}	// - Ogawa//	if(m_pDC20FullStatus!=NULL){//		delete m_pDC20FullStatus;//		m_pDC20FullStatus=NULL;//	}	// + Ogawa//	if(m_p20FullPictInfo!=NULL){//		delete m_p20FullPictInfo;//		m_p20FullPictInfo=NULL;//	}	// - Ogawa#ifdef DC50Include	if(m_pDC50FullStatus!=NULL){		delete m_pDC50FullStatus;		m_pDC50FullStatus=NULL;	}	if(m_p50FullPictInfo!=NULL){		delete m_p50FullPictInfo;		m_p50FullPictInfo=NULL;	}	if(m_pPreviewInfo!=NULL){		delete m_pPreviewInfo;		m_pPreviewInfo=NULL;	}#endif#ifdef DC40Include	if(m_pDC40FullStatus!=NULL){		delete m_pDC40FullStatus;		m_pDC40FullStatus=NULL;	}	if(m_p40FullPictInfo!=NULL){		delete m_p40FullPictInfo;		m_p40FullPictInfo=NULL;	}#endif#ifdef DC120Include	if(m_pDC120FullStatus!=NULL){		delete m_pDC120FullStatus;		m_pDC120FullStatus=NULL;	}	if(m_p120FullPictInfo!=NULL){		delete m_p120FullPictInfo;		m_p120FullPictInfo=NULL;	}	// + Ogawa	if(m_pAlbumAvailableArray != NULL){		theApp.HugeFree(m_pAlbumAvailableArray);		m_pAlbumAvailableArray = NULL;	}	if(m_pAlbumPictNameArray != NULL){		theApp.HugeFree(m_pAlbumPictNameArray);		m_pAlbumPictNameArray = NULL;	}	if(m_pAlbumAll != NULL){		delete m_pAlbumAll;		m_pAlbumAll = NULL;	}	//if(m_pAlbumAll->AlbumName != NULL){	//	theApp.HugeFree(m_pAlbumAll->AlbumName);	//}	//if(m_pAlbumAll->PictNum != NULL){	//	theApp.HugeFree(m_pAlbumAll->PictNum);	//}	// - Ogawa#endif	if(m_pGenericStatus!=NULL){		delete m_pGenericStatus;		m_pGenericStatus=NULL;	}	if(m_pDCDriver!=NULL){		delete m_pDCDriver;		m_pDCDriver=NULL;	}	if(m_pDCCamera!=NULL){		delete m_pDCCamera;		m_pDCCamera=NULL;	}	// + Ogawa	if(theApp.m_pCompletePicture != NULL){		theApp.HugeFree(theApp.m_pCompletePicture);		theApp.m_pCompletePicture = NULL;	}	// - Ogawa}void huge* CSDKTest1::HugeMalloc(DWORD MemoryAllocateSize){	void huge*	HugeMemoryPtr;#ifdef WIN32	HugeMemoryPtr=(void huge*)malloc(MemoryAllocateSize);#else	HugeMemoryPtr=_halloc(MemoryAllocateSize,1);#endif	while(MemoryAllocateSize--){		*((BYTE huge*)HugeMemoryPtr+MemoryAllocateSize)=0x00;	}	return(HugeMemoryPtr);}void CSDKTest1::HugeFree(void huge* HugeMemoryPtr){#ifdef WIN32	free((void huge*)HugeMemoryPtr);#else	_hfree(HugeMemoryPtr);#endif}// - Ohbe//****************************************************/////////////////////////////////////////////////////////////////////////////// The one and only CSDKTest1 objectCSDKTest1 theApp;/////////////////////////////////////////////////////////////////////////////// CSDKTest1 initializationBOOL CSDKTest1::InitInstance(){ //**************************************************** // + Ohbe	if(m_InitialErrorFlag==TRUE){		return FALSE;	}	m_pGenericInfo->PictNumber = 0;	m_pGenericInfo->ThumbWidth = 0;		// Value Change 80->0 by Ogawa	m_pGenericInfo->ThumbHeight = 0;		// Value Change 60->0 by Ogawa	m_pGenericInfo->ThumbPtr = NULL;	m_pGenericInfo->PictWidth = 0;		// Value Change 493->0 by Ogawa	m_pGenericInfo->PictHeight = 0;		// Value Change 373->0 by Ogawa	m_pGenericInfo->PictCompSize = 0;		// Value Change 124928->0 by Ogawa	m_pGenericInfo->PictMinBufIn = 0;		// Value Change 124928->0 by Ogawa	m_pGenericInfo->PictMinBufOut = 0;		// Value Change 551667->0 by Ogawa	m_pGenericInfo->TimeStamp.tm_sec = 0;	m_pGenericInfo->TimeStamp.tm_min = 0;	m_pGenericInfo->TimeStamp.tm_hour = 0;	m_pGenericInfo->TimeStamp.tm_mday = 0;	m_pGenericInfo->TimeStamp.tm_mon = 0;	m_pGenericInfo->TimeStamp.tm_year = 0;	m_pGenericInfo->TimeStamp.tm_wday = 0;	m_pGenericInfo->TimeStamp.tm_yday = 0;	m_pGenericInfo->TimeStamp.tm_isdst = 0; // - Ohbe//****************************************************	// Standard initialization	// If you are not using these features and wish to reduce the size	//  of your final executable, you should remove from the following	//  the specific initialization routines you do not need.#ifdef _AFXDLL	Enable3dControls();			// Call this when using MFC in a shared DLL#else	Enable3dControlsStatic();	// Call this when linking to MFC statically#endif	LoadStdProfileSettings();  // Load standard INI file options (including MRU)//**************************************************** // + Ohbe//	SetDialogBkColor(RGB(255,255,255),RGB(0,0,0));        // Set dialog background color to gray// - Ohbe//****************************************************	// Register the application's document templates.  Document templates	//  serve as the connection between documents, frame windows and views.	CSingleDocTemplate* pDocTemplate;	pDocTemplate = new CSingleDocTemplate(		IDR_MAINFRAME,		RUNTIME_CLASS(CDC25SDKTestDoc),		RUNTIME_CLASS(CMainFrame),       // main SDI frame window		RUNTIME_CLASS(CDC25SDKTestView));	AddDocTemplate(pDocTemplate);	// Parse command line for standard shell commands, DDE, file open	CCommandLineInfo cmdInfo;	ParseCommandLine(cmdInfo);	// Dispatch commands specified on the command line	if (!ProcessShellCommand(cmdInfo))		return FALSE;//**************************************************** // + Ohbe // This 3 lines are imported from 16bit version, but comment out  // at this point since not be sure if it is necessary....	// create a new (empty) document//	OnFileNew();//	if (m_lpCmdLine[0] != '\0'){//	}// - Ohbe//****************************************************	// + Ogawa	theApp.m_pIPData->ImageType = DCRGBImage24;		m_pAlbumAvailableArray = NULL;	m_AlbumAvailableArraySize = 8;	m_pAlbumAvailableArray = (HCHARPTR)theApp.HugeMalloc(DC120OneAlbumLength * m_AlbumAvailableArraySize);	m_pAlbumPictNameArray = NULL;	m_AlbumPictNameArraySize = 10;	m_pAlbumPictNameArray = (HCHARPTR)theApp.HugeMalloc(DC120AlbumPictureSize * m_AlbumPictNameArraySize);	//m_pAlbumAll = &m_AlbumAll;	m_AlbumAllSize = 10;	m_pAlbumAll = new DC120AllAlbum[m_AlbumAllSize];	//m_pAlbumAll->AlbumName = (HCHARPTR)theApp.HugeMalloc(DC120OneAlbumLength * m_AlbumAllSize);	//m_pAlbumAll->PictNum = (long *)theApp.HugeMalloc(sizeof(long) * m_AlbumAllSize);	// - Ogawa	return TRUE;}/////////////////////////////////////////////////////////////////////////////// CAboutDlg dialog used for App Aboutclass CAboutDlg : public CDialog{public:	CAboutDlg();// Dialog Data	//{{AFX_DATA(CAboutDlg)	enum { IDD = IDD_ABOUTBOX };// + Ohbe	CString	m_Version;// - Ohbe	//}}AFX_DATA	// ClassWizard generated virtual function overrides	//{{AFX_VIRTUAL(CAboutDlg)protected:	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support	virtual BOOL OnInitDialog();	//}}AFX_VIRTUAL// Implementationprotected:	//{{AFX_MSG(CAboutDlg)		// No message handlers	//}}AFX_MSG	DECLARE_MESSAGE_MAP()};CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD){	//{{AFX_DATA_INIT(CAboutDlg)// + Ohbe	m_Version = "";// - Ohbe	//}}AFX_DATA_INIT}void CAboutDlg::DoDataExchange(CDataExchange* pDX){	CDialog::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CAboutDlg)// + Ohbe	DDX_Text(pDX, IDC_VERSION, m_Version);//- Ohbe	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)	//{{AFX_MSG_MAP(CAboutDlg)		// No message handlers	//}}AFX_MSG_MAPEND_MESSAGE_MAP()// App command to run the dialogvoid CSDKTest1::OnAppAbout(){	CAboutDlg aboutDlg;	aboutDlg.DoModal();}//**************************************************** // + Ohbe BOOL CAboutDlg::OnInitDialog(){	CDialog::OnInitDialog();	m_Version.LoadString(AFX_IDS_APP_TITLE);	UpdateData(FALSE);	return TRUE;  // return TRUE  unless you set the focus to a control}// - Ohbe//****************************************************/////////////////////////////////////////////////////////////////////////////// CSDKTest1 commands