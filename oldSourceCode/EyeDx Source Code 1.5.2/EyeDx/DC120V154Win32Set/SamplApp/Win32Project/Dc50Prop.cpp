// TAKA series property.cpp : implementation file//#include "stdafx.h"#include <limits.h>#include "SdkTest1.h"#include "dc50prop.h"#ifdef DC50Include/////////////////////////////////////////////////////////////////////////////// CPictNumPage dialogCPictNumPage::CPictNumPage()	: CPropertyPage(CPictNumPage::IDD){	//{{AFX_DATA_INIT(CPictNumPage)	//}}AFX_DATA_INIT	m_PictureNumber 	= theApp.m_PictureNumber;}void CPictNumPage::StoreValue(){	theApp.m_PictureNumber 		= m_PictureNumber;}void CPictNumPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CPictNumPage)	DDX_Text(pDX, IDC_PictureNumber, m_PictureNumber);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CPictNumPage, CPropertyPage)	//{{AFX_MSG_MAP(CPictNumPage)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()#endif // of ifdef DC50Include#ifdef DC50Include/////////////////////////////////////////////////////////////////////////////// CAlbumPage dialogCAlbumPage::CAlbumPage()	: CPropertyPage(CAlbumPage::IDD){	//{{AFX_DATA_INIT(CAlbumPage)	//}}AFX_DATA_INIT	m_AlbumNumber 	= theApp.m_AlbumNumber;}void CAlbumPage::StoreValue(){	theApp.m_AlbumNumber = m_AlbumNumber;}void CAlbumPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CAlbumPage)	DDX_Text(pDX, IDC_AlbumNumber, m_AlbumNumber);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CAlbumPage, CPropertyPage)	//{{AFX_MSG_MAP(CAlbumPage)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()#endif // of ifdef DC50Include#ifdef DC50Include/////////////////////////////////////////////////////////////////////////////// C50FullConfigPage message handlersC50FullConfigPage::C50FullConfigPage()	: CPropertyPage(C50FullConfigPage::IDD){}void C50FullConfigPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(C50FullConfigPage)		// NOTE: the ClassWizard will add DDX and DDV calls here	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(C50FullConfigPage, CPropertyPage)	//{{AFX_MSG_MAP(C50FullConfigPage)	ON_BN_CLICKED(117, OnSysTime)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()BOOL C50FullConfigPage::OnInitDialog(){DCConfigPtr	  cptr = theApp.m_pGenericConfig;DC50ConfigPtr fptr = theApp.m_pDC50FullConfig;CRect		  rtDlg, rtItem;short		  idat;char		  extm[20];	CPropertyPage::OnInitDialog();	m_RetCmType = DC50;// if camera type is DC40 or DC50 or DCStdStill, It is used FullPtr.		if(cptr != NULL)	{		SetDlgItemTime((DCTimePtr)&cptr->Time);		m_date = cptr->Time;		SetDlgItemText(116, (LPCSTR)cptr->CamId);	}	if(m_RetCmType)											// DC40 or DC50 or DCStdStill	{		if(fptr != NULL)		{			if(fptr->SleepTimeout < 60)				fptr->SleepTimeout = 60;			SetDlgItemInt(120, fptr->SleepTimeout, FALSE);			if(0 < fptr->TimerDelay)							CheckDlgButton(201, 1);			idat = (short)fptr->FlashMode;			if(0 <= idat && idat <= 2)				CheckRadioButton(210, 212, 210+idat);			switch(fptr->PictQuality)			{				case DC50BetterQuality:	idat=1; break;				case DC50GoodQuality:	idat=2; break;				case DC50BestQuality:						// default				default: 				idat=0;	break;			}			CheckRadioButton(220, 222, 220+idat);			switch(fptr->ZoomPosition)			{				case DC50Zoom100mm:	idat=1; break;				case DC50Zoom92mm:	idat=2; break;				case DC50Zoom77mm:	idat=3; break;				case DC50Zoom61mm:	idat=4; break;				case DC50Zoom46mm:	idat=5; break;				case DC50Zoom37mm:	idat=6; break;				case DC50Zoom111mm:				default: 			idat=0;	break;			// default			}			CheckRadioButton(230, 236, 230+idat);			if(fptr->ManualExpFlag == FALSE)				CheckRadioButton(240,241, 240);			else				CheckRadioButton(240,241, 241);			memset((void *)extm, NULL, sizeof(extm));			wsprintf((LPSTR)extm, "%ld", fptr->ManualExpTime);			SetDlgItemText(250, (LPCSTR)extm);			SetDlgItemInt(270, (UINT)fptr->AutoExpCompValue, TRUE);			idat = (short)fptr->FocusMode;			if(0 <= idat && idat <= 2)				CheckRadioButton(280, 282, 280+idat);			SetDlgItemInt(290, (UINT)fptr->ProgramMode,	FALSE);			CheckDlgButton(IDC_MEUIENABLE,theApp.m_pDC50FullConfig->ManualExpUIFlag);		}	}	return TRUE;  // return TRUE  unless you set the focus to a control}//////////////////////////////////////////////////////////////////////////////*void C50FullConfigPage::ChangeDlgHeight(int Height)				// show or not Lines par band Settings.{CRect	rt;	GetWindowRect((LPRECT)&rt);	rt.bottom = rt.top + Height;	MoveWindow((LPCRECT)&rt,TRUE);						// resize dialog.	UpdateWindow();										// redraw dialog.}*//////////////////////////////////////////////////////////////////////////////void C50FullConfigPage::OnSysTime() {CTime	  theTime;tm 		  *date;	CButton*	SystemTime;	SystemTime=(CButton*)GetDlgItem(117);	if(SystemTime->GetCheck()==1)						// checked system date and time. 	{		theTime = CTime::GetCurrentTime();              // get current time.		date = theTime.GetLocalTm(NULL);				// get local time.		if(date==NULL){			SystemTime->SetCheck(0);			AfxMessageBox("System Time Error\nValid range is 1900~2038");		}		else{			m_date.tm_mon = date->tm_mon;			m_date.tm_mday = date->tm_mday;			m_date.tm_year = date->tm_year;			m_date.tm_hour = date->tm_hour;			m_date.tm_min = date->tm_min;			m_date.tm_sec = date->tm_sec;			SetDlgItemTime((DCTimePtr)&m_date);		}	}else{		SetDlgItemTime((DCTimePtr)&m_date);	}}/////////////////////////////////////////////////////////////////////////////void C50FullConfigPage::SetDlgItemTime(DCTimePtr tmptr){	SetDlgItemInt(110,  tmptr->tm_mon+1,FALSE);	SetDlgItemInt(111,  tmptr->tm_mday, FALSE);	SetDlgItemInt(112,  tmptr->tm_year+1900, FALSE);	SetDlgItemInt(113,  tmptr->tm_hour, FALSE);	SetDlgItemInt(114,  tmptr->tm_min,  FALSE);	SetDlgItemInt(115,  tmptr->tm_sec,  FALSE);}/////////////////////////////////////////////////////////////////////////////void C50FullConfigPage::StoreValue(){char	extm[20];int		nId;BOOL    Trans = NULL;		if(TRUE)		// DC50 or DCStdStill	{		memset((void *)extm, NULL, sizeof(extm));		if((nId = GetCheckedRadioButton(280, 282) - 280) < 0)				goto error;		theApp.m_pDC50FullConfig->FocusMode   = (DC50FocusMode)nId;			theApp.m_pDC50FullConfig->ProgramMode = (short)GetDlgItemInt(290, &Trans, FALSE);					if(Trans == NULL)			goto error;		if(IsDlgButtonChecked(IDC_MEUIENABLE)){			theApp.m_pDC50FullConfig->ManualExpUIFlag=TRUE;		}		else{			theApp.m_pDC50FullConfig->ManualExpUIFlag=FALSE;		}		Trans = NULL;		theApp.m_pDC50FullConfig->SleepTimeout = (short)GetDlgItemInt(120, &Trans, FALSE);					if(Trans == NULL)			goto error;		// + Ogawa		if(IsDlgButtonChecked(201)) {			theApp.m_pDC50FullConfig->TimerDelay = DC50Timer10Sec;		} else {			theApp.m_pDC50FullConfig->TimerDelay = DC50TimerNoDelay;		}		//if(IsDlgButtonChecked(201))		//	theApp.m_pDC50FullConfig->TimerDelay = DC50Timer10Sec;		// - Ogawa		if((nId = GetCheckedRadioButton(210, 212) - 210) < 0)			goto error;		theApp.m_pDC50FullConfig->FlashMode   = (DC50FlashMode)nId; 		switch(GetCheckedRadioButton(220, 222) - 220)		{			case 0: theApp.m_pDC50FullConfig->PictQuality = DC50BestQuality;	break;			case 1: theApp.m_pDC50FullConfig->PictQuality = DC50BetterQuality; break;			case 2: theApp.m_pDC50FullConfig->PictQuality = DC50GoodQuality;	break;			default: goto error;		}		switch(GetCheckedRadioButton(230, 236) - 230)		{			case 0: theApp.m_pDC50FullConfig->ZoomPosition = DC50Zoom111mm;	break; 			case 1: theApp.m_pDC50FullConfig->ZoomPosition = DC50Zoom100mm;	break; 			case 2: theApp.m_pDC50FullConfig->ZoomPosition = DC50Zoom92mm;		break; 			case 3: theApp.m_pDC50FullConfig->ZoomPosition = DC50Zoom77mm;		break; 			case 4: theApp.m_pDC50FullConfig->ZoomPosition = DC50Zoom61mm;		break; 			case 5: theApp.m_pDC50FullConfig->ZoomPosition = DC50Zoom46mm;		break; 			case 6: theApp.m_pDC50FullConfig->ZoomPosition = DC50Zoom37mm;		break; 			default: goto error;		}		theApp.m_pDC50FullConfig->ManualExpFlag = FALSE;		// default FALSE = Manual Auto		if(GetCheckedRadioButton(240, 241) == 241)			theApp.m_pDC50FullConfig->ManualExpFlag = TRUE;		GetDlgItemText(250, (LPSTR)extm, 19);				theApp.m_pDC50FullConfig->ManualExpTime = atol(extm);		Trans = NULL;		theApp.m_pDC50FullConfig->AutoExpCompValue = (short)GetDlgItemInt(270, &Trans, TRUE);					if(Trans == NULL)			goto error;	}	return;	error://		Error("Set Configuration Error");		AfxMessageBox("Set Configuration Error");}#endif // of #ifdef DC50Include#ifdef DC40Include/////////////////////////////////////////////////////////////////////////////// C40FullConfigPage dialogC40FullConfigPage::C40FullConfigPage()	: CPropertyPage(C40FullConfigPage::IDD){}void C40FullConfigPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(C40FullConfigPage)		// NOTE: the ClassWizard will add DDX and DDV calls here	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(C40FullConfigPage, CPropertyPage)	//{{AFX_MSG_MAP(C40FullConfigPage)	ON_BN_CLICKED(200, OnAutoExpoMode)	ON_BN_CLICKED(201, OnManualExpoMode)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// C50FullConfigPage message handlersBOOL C40FullConfigPage::OnInitDialog(){CTime	theTime = CTime::GetCurrentTime();BOOL	bSigned = FALSE;	WORD	wMax = 5;			WORD	wIndex;char	work[20];CRect	rtDlg,rtItem;DCConfigPtr	  cptr = theApp.m_pGenericConfig;DC40ConfigPtr fptr = theApp.m_pDC40FullConfig;	CPropertyPage::OnInitDialog();	m_RetCmType = DC40;// if camera type is DC40 or DC50 or DCStdStill, It is used FullPtr.		SetDlgItemInt(120, fptr->SleepTimeout, bSigned); 	CheckRadioButton(121, 122, 121+fptr->AcknowledgeMode);	CheckRadioButton(139, 140, 139+fptr->UpDownMode);	CheckRadioButton(129, 130, 129+fptr->BeepButton);	CheckRadioButton(131, 132, 131+fptr->BeepEvent);	CheckRadioButton(133, 134, 133+fptr->DeleteLast);	CheckRadioButton(135, 136, 135+fptr->DeleteAll);	if(fptr->PictMode == DC40Snapshot)		CheckRadioButton(137, 138, 137);	else		CheckRadioButton(137, 138, 138);		sprintf(work, "%lu", fptr->ManualExpTime);	SetDlgItemText(211, work);	CheckRadioButton(200, 201, 200+fptr->ManualExpFlag);		switch(fptr->ManualFNumber)	{			case 28: wIndex = 214; break;			case 30: wIndex = 215; break;			case 35: wIndex = 216; break;			case 40: wIndex = 217; break;			case 49: wIndex = 218; break;			case 63: wIndex = 219; break;			case 90: wIndex = 220; break;			case 160:wIndex = 221; break;			default: wIndex = 222; break;	}	CheckRadioButton(214, 222, wIndex);	if(fptr->ManualExpFlag == FALSE)	{		for(int wIndex=210; wIndex<=222; wIndex++)				GetDlgItem(wIndex)->EnableWindow(FALSE);	}	SendDlgItemMessage(123, CB_SETCURSEL, fptr->DefFlashMode, 0L);			// set default flash mode(id 131).	SendDlgItemMessage(124, CB_SETCURSEL, fptr->DefTimerMode, 0L);			// set default timer mode(id 132).	SendDlgItemMessage(125, CB_SETCURSEL, fptr->DefExpMode - 1, 0L);		// set default exposure offset(id 133).	SendDlgItemMessage(126, CB_SETCURSEL, fptr->FlashMode, 0L);			// set current flash mode(id  134).	SendDlgItemMessage(127, CB_SETCURSEL, fptr->TimerMode, 0L);			// set current timer mode(id  135).	SendDlgItemMessage(128, CB_SETCURSEL, fptr->ExpMode - 1, 0L);			// set current exposure offset(id  136).	return TRUE;  // return TRUE  unless you set the focus to a control}//////////////////////////////////////////////////////////////////////////////*void C40FullConfigPage::ChangeDlgHeight(int Height)				// show or not Lines par band Settings.{CRect	rt;	GetWindowRect((LPRECT)&rt);	rt.bottom = rt.top + Height;	MoveWindow((LPCRECT)&rt,TRUE);						// resize dialog.	UpdateWindow();										// redraw dialog.}*//////////////////////////////////////////////////////////////////////////////void C40FullConfigPage::StoreValue(){BOOL	bflg = NULL;WORD	wIndex, wSelect;char	work[20];	if(TRUE)	{		theApp.m_pDC40FullConfig->SleepTimeout = (int)GetDlgItemInt(IDC_SLEEPTIME, &bflg, FALSE); 			if(bflg == NULL)			AfxMessageBox("get Sleep time out error!");				theApp.m_pDC40FullConfig->DeleteLast = FALSE;		// disabled		theApp.m_pDC40FullConfig->DeleteAll  = FALSE;		// disabled		theApp.m_pDC40FullConfig->BeepButton = FALSE;		// disabled		theApp.m_pDC40FullConfig->BeepEvent  = FALSE;		// disabled		theApp.m_pDC40FullConfig->UpDownMode = FALSE;		// disabled		theApp.m_pDC40FullConfig->AcknowledgeMode = FALSE;// disabled		theApp.m_pDC40FullConfig->PictMode   = DC40HighResolution; // Full Size Image		theApp.m_pDC40FullConfig->ManualExpFlag = 1;		// Manual exposure.			if(GetCheckedRadioButton(133, 134) == 134)	// delete Last mode radio button.			theApp.m_pDC40FullConfig->DeleteLast = TRUE;	// enabled				if(GetCheckedRadioButton(135, 136) == 136)	// delete All mode radio button.			theApp.m_pDC40FullConfig->DeleteAll = TRUE;	// enabled				if(GetCheckedRadioButton(129, 130) == 130)	// beep button radio button.			theApp.m_pDC40FullConfig->BeepButton = TRUE;	// enabled				if(GetCheckedRadioButton(131, 132) == 132)	// beep Event radio button.			theApp.m_pDC40FullConfig->BeepEvent = TRUE;	// enabled				if(GetCheckedRadioButton(121, 122) == 122)	// Acknowlege radio button.			theApp.m_pDC40FullConfig->AcknowledgeMode = TRUE;	// enabled				if(GetCheckedRadioButton(139, 140) == 140)	// count up down radio button.			theApp.m_pDC40FullConfig->UpDownMode = TRUE;	// enabled				if(GetCheckedRadioButton(137, 138) == 137)	// picture mode radio button.			theApp.m_pDC40FullConfig->PictMode = DC40Snapshot;	// Quarter Size Image				for(wIndex=123;wIndex<129;wIndex++)		{			if((wSelect = (WORD)SendDlgItemMessage(wIndex, CB_GETCURSEL, 0, 0L)) == CB_ERR)				{				switch(wIndex)				// get cursor error!				{					case 123: theApp.m_pDC40FullConfig->DefFlashMode = DC40FlashAuto;		break;					case 124: theApp.m_pDC40FullConfig->DefTimerMode = DC40TimerNoDelay;	break;					case 125: theApp.m_pDC40FullConfig->DefExpMode   = DC40ExpNormal;		break;					case 126: theApp.m_pDC40FullConfig->FlashMode    = DC40FlashAuto;		break;					case 127: theApp.m_pDC40FullConfig->TimerMode    = DC40TimerNoDelay;	break;					case 128: theApp.m_pDC40FullConfig->ExpMode 	 = DC40ExpNormal;		break;					default:  break;				}				AfxMessageBox("Mode Arguments Setting Error");				break;				}else{					switch(wIndex)				{					case 123: theApp.m_pDC40FullConfig->DefFlashMode = (DC40FlashMode)wSelect;	break;					case 124: theApp.m_pDC40FullConfig->DefTimerMode = (DC40TimerMode)wSelect;	break;					case 125: theApp.m_pDC40FullConfig->DefExpMode = (DC40ExposureMode)(wSelect+1); break;					case 126: theApp.m_pDC40FullConfig->FlashMode = (DC40FlashMode)wSelect;		break;					case 127: theApp.m_pDC40FullConfig->TimerMode = (DC40TimerMode)wSelect;		break;					case 128: theApp.m_pDC40FullConfig->ExpMode = (DC40ExposureMode)(wSelect+1);	break;					default:  break;				}			}										// end if ( get List number in combo box error ? )				}											// get current and default mode status.		if(GetCheckedRadioButton(200, 201) == 200)	// exposure mode radio button.			theApp.m_pDC40FullConfig->ManualExpFlag = 0;	// Automatic exposure.			memset(work, 0, 20);		GetDlgItemText(211, (LPSTR)work, 10);	    theApp.m_pDC40FullConfig->ManualExpTime = atol(work);			switch(GetCheckedRadioButton(214, 222))		{			case 214:	theApp.m_pDC40FullConfig->ManualFNumber = 28;	break;			case 215:	theApp.m_pDC40FullConfig->ManualFNumber = 30;	break;			case 216:	theApp.m_pDC40FullConfig->ManualFNumber = 35;	break;			case 217:	theApp.m_pDC40FullConfig->ManualFNumber = 40;	break;			case 218:	theApp.m_pDC40FullConfig->ManualFNumber = 49;	break;			case 219:	theApp.m_pDC40FullConfig->ManualFNumber = 63;	break;			case 220:	theApp.m_pDC40FullConfig->ManualFNumber = 90;	break;			case 221:	theApp.m_pDC40FullConfig->ManualFNumber = 160;break;			case 222:				default :	theApp.m_pDC40FullConfig->ManualFNumber = 255;	break;		}	}}/////////////////////////////////////////////////////////////////////////////void C40FullConfigPage::OnAutoExpoMode(){	for(int nId=210; nId<=222; nId++)		GetDlgItem(nId)->EnableWindow(FALSE);}/////////////////////////////////////////////////////////////////////////////void C40FullConfigPage::OnManualExpoMode(){	for(int nId=210; nId<=222; nId++)		GetDlgItem(nId)->EnableWindow(TRUE);}#endif // of #ifdef DC40Include#ifdef DC120Include/////////////////////////////////////////////////////////////////////////////// C120FullConfigPage message handlersC120FullConfigPage::C120FullConfigPage()	: CPropertyPage(C120FullConfigPage::IDD){}void C120FullConfigPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(C50FullConfigPage)		// NOTE: the ClassWizard will add DDX and DDV calls here	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(C120FullConfigPage, CPropertyPage)	//{{AFX_MSG_MAP(C120FullConfigPage)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()BOOL C120FullConfigPage::OnInitDialog(){DCConfigPtr	  cptr = theApp.m_pGenericConfig;DC120ConfigPtr fptr = theApp.m_pDC120FullConfig;CRect		  rtDlg, rtItem;short		  idat;char		  extm[20];	CPropertyPage::OnInitDialog();	m_RetCmType = DC120;// if camera type is DC40 or DC50 or DCStdStill, It is used FullPtr.	if(m_RetCmType)											// DC40 or DC50 or DCStdStill	{		if(fptr != NULL)		{			SetDlgItemInt(120, fptr->CaptureSleepTO, FALSE);			SetDlgItemInt(121, fptr->ReviewSleepTO, FALSE);			if(0 < fptr->TimerDelay)							CheckDlgButton(203, 1);			idat = (short)fptr->FlashMode;			if(0 <= idat && idat <= 2)				CheckRadioButton(210, 212, 210+idat);			switch(fptr->PictQuality)			{				case DC120BestQuality:idat=1; break;				case DC120BetterQuality:	idat=2; break;				case DC120GoodQuality:	idat=3; break;				case DC120NoCompression:						// default				default: 				idat=0;	break;			}			CheckRadioButton(220, 223, 220+idat);			switch(fptr->ZoomPosition)			{				case DC120Zoom100mm:	idat=1; break;				case DC120Zoom92mm:	idat=2; break;				case DC120Zoom77mm:	idat=3; break;				case DC120Zoom61mm:	idat=4; break;				case DC120Zoom46mm:	idat=5; break;				case DC120Zoom37mm:	idat=6; break;				// + Ogawa				case DC120Zoom111mm:idat=0;	break;				case DC120ZoomMacroPosition:idat=7;	break;				//case DC120Zoom111mm:				default: 			idat=0;	break;			// default				// - Ogawa			}			// + Ogawa			CheckRadioButton(230, 237, 230+idat);			//CheckRadioButton(230, 236, 230+idat);			// - Ogawa			if(fptr->ManualExpFlag == FALSE)				CheckRadioButton(240,241, 240);			else				CheckRadioButton(240,241, 241);			memset((void *)extm, NULL, sizeof(extm));			wsprintf((LPSTR)extm, "%ld", fptr->ManualExpTime);			SetDlgItemText(250, (LPCSTR)extm);			SetDlgItemInt(270, (UINT)fptr->AutoExpCompValue, TRUE);			idat = (short)fptr->FocusMode;			if(0 <= idat && idat <= 2)				CheckRadioButton(280, 282, 280+idat);			CheckDlgButton(IDC_MEUIENABLE,theApp.m_pDC50FullConfig->ManualExpUIFlag);			switch(fptr->DateFormat)			{				case DC120DayFirst:		idat=0; break;				case DC120MonthFirst:	idat=1; break;				case DC120YearFirst:	idat=2; break;				default: 				idat=0;	break;			}			CheckRadioButton(283, 285, 283+idat);			CheckDlgButton(IDC_MEUIENABLE3,theApp.m_pDC120FullConfig->DistanceDspFormat);			CheckDlgButton(IDC_MEUIENABLE2,theApp.m_pDC120FullConfig->TimeFormat);			idat = (short)fptr->DefFlashMode;			if(0 <= idat && idat <= 2)				CheckRadioButton(217, 219, 217+idat);		}	}	return TRUE;  // return TRUE  unless you set the focus to a control}//////////////////////////////////////////////////////////////////////////////*void C120FullConfigPage::ChangeDlgHeight(int Height)				// show or not Lines par band Settings.{CRect	rt;	GetWindowRect((LPRECT)&rt);	rt.bottom = rt.top + Height;	MoveWindow((LPCRECT)&rt,TRUE);						// resize dialog.	UpdateWindow();										// redraw dialog.}*//////////////////////////////////////////////////////////////////////////////void C120FullConfigPage::StoreValue(){char	extm[20];int		nId;BOOL    Trans = NULL;		if(TRUE)		// DC50 or DCStdStill	{		memset((void *)extm, NULL, sizeof(extm));//		theApp.TAKAZeroReset(theApp.m_pDC50FullConfig);			Trans = NULL;		theApp.m_pDC120FullConfig->CaptureSleepTO = (short)GetDlgItemInt(120, &Trans, FALSE);							Trans = NULL;		theApp.m_pDC120FullConfig->ReviewSleepTO = (short)GetDlgItemInt(121, &Trans, FALSE);							// + Ogawa		if(IsDlgButtonChecked(203)) {			theApp.m_pDC120FullConfig->TimerDelay = DC120Timer10Sec;		} else {			theApp.m_pDC120FullConfig->TimerDelay = DC120TimerNoDelay;		}		//if(IsDlgButtonChecked(201))		//	theApp.m_pDC120FullConfig->TimerDelay = DC120Timer10Sec;		// - Ogawa		if((nId = GetCheckedRadioButton(210, 212) - 210) < 0)			goto error;		theApp.m_pDC120FullConfig->FlashMode   = (DC120FlashMode)nId; 			switch(GetCheckedRadioButton(220, 223) - 220)		{			case 0: theApp.m_pDC120FullConfig->PictQuality = DC120NoCompression;	break;			case 1: theApp.m_pDC120FullConfig->PictQuality = DC120BestQuality; break;			case 2: theApp.m_pDC120FullConfig->PictQuality = DC120BetterQuality;	break;			case 3: theApp.m_pDC120FullConfig->PictQuality = DC120GoodQuality;	break;			default: goto error;		}		// + Ogawa		switch(GetCheckedRadioButton(230, 237) - 230)		//switch(GetCheckedRadioButton(230, 236) - 230)		// - Ogawa		{			case 0: theApp.m_pDC120FullConfig->ZoomPosition = DC120Zoom111mm;	break; 			case 1: theApp.m_pDC120FullConfig->ZoomPosition = DC120Zoom100mm;	break; 			case 2: theApp.m_pDC120FullConfig->ZoomPosition = DC120Zoom92mm;		break; 			case 3: theApp.m_pDC120FullConfig->ZoomPosition = DC120Zoom77mm;		break; 			case 4: theApp.m_pDC120FullConfig->ZoomPosition = DC120Zoom61mm;		break; 			case 5: theApp.m_pDC120FullConfig->ZoomPosition = DC120Zoom46mm;		break; 			case 6: theApp.m_pDC120FullConfig->ZoomPosition = DC120Zoom37mm;		break; 			// + Ogawa			case 7: theApp.m_pDC120FullConfig->ZoomPosition = DC120ZoomMacroPosition;		break;			// - Ogawa			default: goto error;		}		theApp.m_pDC120FullConfig->ManualExpFlag = FALSE;		// default FALSE = Manual Auto		if(GetCheckedRadioButton(240, 241) == 241)			theApp.m_pDC120FullConfig->ManualExpFlag = TRUE;		GetDlgItemText(250, (LPSTR)extm, 19);				theApp.m_pDC120FullConfig->ManualExpTime = atol(extm);		Trans = NULL;		theApp.m_pDC120FullConfig->AutoExpCompValue = (short)GetDlgItemInt(270, &Trans, TRUE);					if(Trans == NULL)			goto error;		if((nId = GetCheckedRadioButton(280, 282) - 280) < 0)				goto error;		theApp.m_pDC120FullConfig->FocusMode   = (DC120FocusMode)nId;					// Rem by + Ogawa		//if(IsDlgButtonChecked(IDC_MEUIENABLE)){		//	theApp.m_pDC120FullConfig->ManualExpUIFlag=TRUE;		//}		//else{		//	// + Ogawa		//	theApp.m_pDC120FullConfig->ManualExpUIFlag=FALSE;		//	//theApp.m_pDC50FullConfig->ManualExpUIFlag=FALSE;		//	// - Ogawa		//}		// Rem by - Ogawa		if((nId = GetCheckedRadioButton(283, 285) - 283) < 0)				goto error;		theApp.m_pDC120FullConfig->DateFormat   = (DC120DateFormat)nId;			if(IsDlgButtonChecked(IDC_MEUIENABLE2)){			theApp.m_pDC120FullConfig->TimeFormat=TRUE;		}		else{			theApp.m_pDC120FullConfig->TimeFormat=FALSE;		}		if(IsDlgButtonChecked(IDC_MEUIENABLE3)){			theApp.m_pDC120FullConfig->DistanceDspFormat=TRUE;		}		else{			theApp.m_pDC120FullConfig->DistanceDspFormat=FALSE;		}		if((nId = GetCheckedRadioButton(217, 219) - 217) < 0)			goto error;		theApp.m_pDC120FullConfig->DefFlashMode   = (DC120FlashMode)nId; 	}	return;	error:		;//		Error("Set Configuration Error");//		AfxMessageBox("Set Configuration Error");}/////////////////////////////////////////////////////////////////////////////// CAlbumBufferPage dialogCAlbumBufferPage::CAlbumBufferPage()	: CPropertyPage(CAlbumBufferPage::IDD){	//{{AFX_DATA_INIT(CAlbumBufferPage)	//}}AFX_DATA_INIT	// + Ogawa	if(theApp.m_CamMemType == DCCameraMemory) {		m_BufferSize = theApp.m_pDC120FullStatus->MemNumAlbums + 1;	} else {		m_BufferSize = theApp.m_pDC120FullStatus->CardNumAlbums + 1;	}	if(m_BufferSize < 0) {		theApp.m_AlbumAllSize = 10;	}	// - Ogawa	m_IsUseCurrentBuffer = FALSE;}CAlbumBufferPage::~CAlbumBufferPage(){}void CAlbumBufferPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CAlbumBufferPage)	DDX_Text(pDX, IDC_InputAllocateSize, m_BufferSize);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CAlbumBufferPage, CPropertyPage)	//{{AFX_MSG_MAP(CAlbumBufferPage)	ON_EN_CHANGE(IDC_InputAllocateSize, OnChangeBufferSize)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CAlbumBufferPage message handlersBOOL CAlbumBufferPage::OnInitDialog(){	CPropertyPage::OnInitDialog();	return FALSE;  // return TRUE  unless you set the focus to a control}void CAlbumBufferPage::OnChangeBufferSize(){	UpdateData(TRUE);	UpdateData(FALSE);}void CAlbumBufferPage::StoreValue(){	if(theApp.m_pAlbumAll != NULL) {		delete theApp.m_pAlbumAll;		theApp.m_pAlbumAll = NULL;	}	if(m_BufferSize<=0){		return;	} else {		theApp.m_AlbumAllSize = m_BufferSize;		theApp.m_pAlbumAll = new DC120AllAlbum[theApp.m_AlbumAllSize];		for(int i = 0; i < theApp.m_AlbumAllSize; i++) {			memset(theApp.m_pAlbumAll[i].AlbumName, '\0', DC120OneAlbumLength);			theApp.m_pAlbumAll[i].PictNum = 0;		}	}// end of else  in size is not 0}void CAlbumBufferPage::ChangeCaption(CString* NewTitle){	m_strCaption = *NewTitle;}/////////////////////////////////////////////////////////////////////////////// CDCAlbumGetAvailableDlg dialogCDCAlbumGetAvailableDlg::CDCAlbumGetAvailableDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCAlbumGetAvailable()",pParentWnd){	m_pParamPage=NULL;	// + Ogawa	m_pAlbumArrayBufferPage = NULL;	//m_pAlbumBufferPage=NULL;	// - Ogawa	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pParamPage=new CDCCloseCameraPage;		if(m_pParamPage==NULL){			break;		}		// + Ogawa		m_pAlbumArrayBufferPage=new CAlbumArrayBufferPage;		if(m_pAlbumArrayBufferPage==NULL){			break;		}		//m_pAlbumBufferPage=new CAlbumBufferPage;		//if(m_pAlbumBufferPage==NULL){		//	break;		//}		// - Ogawa		m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pParamPage);		// + Ogawa		AddPage(m_pAlbumArrayBufferPage);		//AddPage(m_pAlbumBufferPage);		// - Ogawwa		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCAlbumGetAvailableDlg::~CDCAlbumGetAvailableDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	// + Ogawa	if(m_pAlbumArrayBufferPage!=NULL){		delete m_pAlbumArrayBufferPage;		m_pAlbumArrayBufferPage=NULL;	}	//if(m_pAlbumBufferPage!=NULL){	//	delete m_pAlbumBufferPage;	//	m_pAlbumBufferPage=NULL;	//}	// - Ogawa	if(m_pParamPage!=NULL){		delete m_pParamPage;		m_pParamPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCAlbumGetAvailableDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCAlbumGetAvailableDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCAlbumGetAvailableDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	// + Ogawa	AddPage(m_pAlbumArrayBufferPage);	//AddPage(m_pAlbumBufferPage);	// - Ogawa	if(!m_pParamPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCAlbumGetAvailableDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}/////////////////////////////////////////////////////////////////////////////// CDCAlbumGetAvailableDlg message handlersvoid CDCAlbumGetAvailableDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;	// + Ogawa	m_pAlbumArrayBufferPage->StoreValue();	//m_pAlbumBufferPage->StoreValue();	// - Ogawa	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CAlbumNameArrayPage dialogCAlbumNameArrayPage::CAlbumNameArrayPage()	: CPropertyPage(CAlbumNameArrayPage::IDD){	//{{AFX_DATA_INIT(CAlbumNameArrayPage)	//}}AFX_DATA_INIT	// + Ogawa	if(theApp.m_pAlbumAvailableArray != NULL) {		for (int i = 0; i < 8; i++) {			m_AlbumName[i] = theApp.m_pAlbumAvailableArray + DC120OneAlbumLength * i;		}	}	// - Ogawa}void CAlbumNameArrayPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CAlbumNameArrayPage)/*	DDX_Text(pDX, IDC_AlbumName1, m_AlbumName1);	DDX_Text(pDX, IDC_AlbumName2, m_AlbumName2);	DDX_Text(pDX, IDC_AlbumName3, m_AlbumName3);	DDX_Text(pDX, IDC_AlbumName4, m_AlbumName4);	DDX_Text(pDX, IDC_AlbumName5, m_AlbumName5);	DDX_Text(pDX, IDC_AlbumName6, m_AlbumName6);	DDX_Text(pDX, IDC_AlbumName7, m_AlbumName7);	DDX_Text(pDX, IDC_AlbumName8, m_AlbumName8);	DDX_Text(pDX, IDC_AlbumName9, m_AlbumName9);*/	DDX_Text(pDX, IDC_AlbumName1, m_AlbumName[0]);	DDX_Text(pDX, IDC_AlbumName2, m_AlbumName[1]);	DDX_Text(pDX, IDC_AlbumName3, m_AlbumName[2]);	DDX_Text(pDX, IDC_AlbumName4, m_AlbumName[3]);	DDX_Text(pDX, IDC_AlbumName5, m_AlbumName[4]);	DDX_Text(pDX, IDC_AlbumName6, m_AlbumName[5]);	DDX_Text(pDX, IDC_AlbumName7, m_AlbumName[6]);	DDX_Text(pDX, IDC_AlbumName8, m_AlbumName[7]);	//DDX_Text(pDX, IDC_AlbumName9, m_AlbumName[8]);		// Rem by Ogawa	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CAlbumNameArrayPage, CPropertyPage)	//{{AFX_MSG_MAP(CAlbumNameArrayPage)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()BOOL CAlbumNameArrayPage::OnInitDialog(){	//long	RemainedSize;		// Rem by Ogawa	//short	i;		// Rem by Ogawa		CPropertyPage::OnInitDialog();	//RemainedSize = theApp.m_AlbumNameArraySize;		// Rem by Ogawa	// + Ogawa	//for (i = 0; i < 8; i++) {	//for(i=0; i<9; i++){		//m_AlbumName[i] = theApp.m_pAlbumAvailableArray->Album[i];		//if(RemainedSize >(DC120OneAlbumLength-1)) {		//	SetDlgItemText((IDC_AlbumName1 + i), (LPCSTR)theApp.m_pAlbumNameArray->Album[i]);		//	RemainedSize -= DC120OneAlbumLength;		//}		//if(RemainedSize >13) {		//	SetDlgItemText((IDC_AlbumName1 + i), (LPCSTR)theApp.m_pAlbumNameArray->Album[i]);		//	RemainedSize -= 14;		//}		//else 		//	break;	//}	// - Ogawa	return TRUE;  // return TRUE  unless you set the focus to a control}void CAlbumNameArrayPage::ChangeParameter(){	UpdateData(TRUE);}// + Ogawavoid CAlbumNameArrayPage::StoreValue(){	short	i;		for(i = 0; (i < theApp.m_AlbumAvailableArraySize) && (i < 8); i++){			_fstrcpy(theApp.m_pAlbumAvailableArray + DC120OneAlbumLength * i, m_AlbumName[i]);	}}// - Ogawa/////////////////////////////////////////////////////////////////////////////// CDCAlbumSetAvailableDlg dialogCDCAlbumSetAvailableDlg::CDCAlbumSetAvailableDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCAlbumSetAvailable()",pParentWnd){	m_pParamPage=NULL;	// + Ogawa	m_pAlbumArrayBufferPage=NULL;	//m_pAlbumBufferPage=NULL;	// - Ogawa	m_pAlbumNameArrayPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pParamPage=new CDCCloseCameraPage;		if(m_pParamPage==NULL){			break;		}		// + Ogawa		m_pAlbumArrayBufferPage=new CAlbumArrayBufferPage;		if(m_pAlbumArrayBufferPage==NULL){			break;		}		//m_pAlbumBufferPage=new CAlbumBufferPage;		//if(m_pAlbumBufferPage==NULL){		//	break;		//}		// - Ogawa		m_pAlbumNameArrayPage=new CAlbumNameArrayPage;		if(m_pAlbumNameArrayPage==NULL){			break;		}		m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pParamPage);		// + Ogawa		AddPage(m_pAlbumArrayBufferPage);		//AddPage(m_pAlbumBufferPage);		// - Ogawa		AddPage(m_pAlbumNameArrayPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCAlbumSetAvailableDlg::~CDCAlbumSetAvailableDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	// + Ogawa	if(m_pAlbumArrayBufferPage!=NULL){		delete m_pAlbumArrayBufferPage;		m_pAlbumArrayBufferPage=NULL;	}	//if(m_pAlbumBufferPage!=NULL){	//	delete m_pAlbumBufferPage;	//	m_pAlbumBufferPage=NULL;	//}	// - Ogawa	if(m_pAlbumNameArrayPage!=NULL){		delete m_pAlbumNameArrayPage;		m_pAlbumNameArrayPage=NULL;	}	if(m_pParamPage!=NULL){		delete m_pParamPage;		m_pParamPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCAlbumSetAvailableDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCAlbumSetAvailableDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCAlbumSetAvailableDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	AddPage(m_pAlbumNameArrayPage);	// + Ogawa	AddPage(m_pAlbumArrayBufferPage);	//AddPage(m_pAlbumBufferPage);	// - Ogawa	if(!m_pParamPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCAlbumSetAvailableDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}/////////////////////////////////////////////////////////////////////////////// CDCAlbumSetAvailableDlg message handlersvoid CDCAlbumSetAvailableDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;	// + Ogawa	m_pAlbumArrayBufferPage->StoreValue();	//m_pAlbumBufferPage->StoreValue();	// - Ogawa	m_pAlbumNameArrayPage->StoreValue();	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCAlbumSetActivePage dialogCDCAlbumSetActivePage::CDCAlbumSetActivePage()	: CPropertyPage(CDCAlbumSetActivePage::IDD){	//{{AFX_DATA_INIT(CDCAlbumSetActivePage)	//}}AFX_DATA_INIT	m_AlbumNum = 0;	m_IsCameraDataNULL = FALSE;}void CDCAlbumSetActivePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCAlbumSetActivePage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Text(pDX, IDC_AlbumNumber, m_AlbumNum);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCAlbumSetActivePage, CPropertyPage)	//{{AFX_MSG_MAP(CDCAlbumSetActivePage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCAlbumSetActivePage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCAlbumSetActiveDlg dialogCDCAlbumSetActiveDlg::CDCAlbumSetActiveDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCAlbumSetActive()",pParentWnd){	// + Ogawa	m_pParamPage=NULL;	m_pCamMemTypePage=NULL;	m_pAlbumNumberPage=NULL;	//m_pAlbumSetActivePage=NULL;	// - Ogawa	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		// + Ogawa		m_pParamPage=new CDCCloseCameraPage;		if(m_pParamPage==NULL){			break;		}		m_pCamMemTypePage=new CCamMemTypePage;		if(m_pCamMemTypePage==NULL){			break;		}		m_pAlbumNumberPage=new CAlbumPage;		if(m_pAlbumNumberPage==NULL){			break;		}		//m_pAlbumSetActivePage=new CDCAlbumSetActivePage;		//if(m_pAlbumSetActivePage==NULL){		//	break;		//}		m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;		//m_IsCameraDataNULL=m_pAlbumSetActivePage->m_IsCameraDataNULL;		// - Ogawa		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		// + Ogawa		AddPage(m_pParamPage);		AddPage(m_pCamMemTypePage);		AddPage(m_pAlbumNumberPage);		//AddPage(m_pAlbumSetActivePage);		// - Ogawa		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCAlbumSetActiveDlg::~CDCAlbumSetActiveDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	// + Ogawa	if(m_pAlbumNumberPage != NULL){		delete m_pAlbumNumberPage;		m_pAlbumNumberPage = NULL;	}	if(m_pCamMemTypePage != NULL){		delete m_pCamMemTypePage;		m_pCamMemTypePage = NULL;	}	if(m_pParamPage != NULL){		delete m_pParamPage;		m_pParamPage = NULL;	}	//if(m_pAlbumSetActivePage!=NULL){	//	delete m_pAlbumSetActivePage;	//	m_pAlbumSetActivePage=NULL;	//}	// - Ogawa}BEGIN_MESSAGE_MAP(CDCAlbumSetActiveDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCAlbumSetActiveDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCAlbumSetActiveDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	// + Ogawa	AddPage(m_pCamMemTypePage);	AddPage(m_pAlbumNumberPage);	// - Ogawa	// + Ogawa	if(!m_pParamPage->m_IsCameraDataNULL){	//if(!m_pAlbumSetActivePage->m_IsCameraDataNULL){	// - Ogawa		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCAlbumSetActiveDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCAlbumSetActiveDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	// + Ogawa	m_pAlbumNumberPage->StoreValue();	m_pCamMemTypePage->StoreValue();	m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;	//m_IsCameraDataNULL=m_pAlbumSetActivePage->m_IsCameraDataNULL;	// - Ogawa	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCAlbumGetAllNameDlg dialogCDCAlbumGetAllNameDlg::CDCAlbumGetAllNameDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCAlbumGetAllName()",pParentWnd){	m_pParamPage=NULL;	// + Ogawa	//m_pAlbumCountPage=NULL;	// - Ogawa	m_pAlbumBufferPage=NULL;	m_pCamMemTypePage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pParamPage=new CDCCloseCameraPage;		if(m_pParamPage==NULL){			break;		}		// + Ogawa		//m_pAlbumCountPage=new CAlbumCountPage;		//if(m_pAlbumCountPage==NULL){		//	break;		//}		// - Ogawa		m_pAlbumBufferPage=new CAlbumBufferPage;		if(m_pAlbumBufferPage==NULL){			break;		}		m_pCamMemTypePage=new CCamMemTypePage;		if(m_pCamMemTypePage==NULL){			break;		}		m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pParamPage);		// + Ogawa		//AddPage(m_pAlbumCountPage);		// - Ogawa		AddPage(m_pAlbumBufferPage);		AddPage(m_pCamMemTypePage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCAlbumGetAllNameDlg::~CDCAlbumGetAllNameDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pCamMemTypePage!=NULL){		delete m_pCamMemTypePage;		m_pCamMemTypePage=NULL;	}	// + Ogawa	//if(m_pAlbumCountPage!=NULL){	//	delete m_pAlbumCountPage;	//	m_pAlbumCountPage=NULL;	//}	// - Ogawa	if(m_pAlbumBufferPage!=NULL){		delete m_pAlbumBufferPage;		m_pAlbumBufferPage=NULL;	}	if(m_pParamPage!=NULL){		delete m_pParamPage;		m_pParamPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCAlbumGetAllNameDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCAlbumGetAllNameDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCAlbumGetAllNameDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	// + Ogawa	//AddPage(m_pAlbumCountPage);	// - Ogawa	AddPage(m_pAlbumBufferPage);	AddPage(m_pCamMemTypePage);	if(!m_pParamPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCAlbumGetAllNameDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}/////////////////////////////////////////////////////////////////////////////// CDCAlbumGetAllNameDlg message handlersvoid CDCAlbumGetAllNameDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;	// + Ogawa	//m_pAlbumCountPage->StoreValue();	// - Ogawa	m_pAlbumBufferPage->StoreValue();	m_pCamMemTypePage->StoreValue();	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCAlbumEraseDlg dialogCDCAlbumEraseDlg::CDCAlbumEraseDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCAlbumErace()",pParentWnd){	m_pParamPage=NULL;	m_pCamMemTypePage=NULL;	m_pAlbumNumberPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pParamPage=new CDCCloseCameraPage;		if(m_pParamPage==NULL){			break;		}		m_pCamMemTypePage=new CCamMemTypePage;		if(m_pCamMemTypePage==NULL){			break;		}		m_pAlbumNumberPage=new CAlbumPage;		if(m_pAlbumNumberPage==NULL){			break;		}		m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pParamPage);		AddPage(m_pCamMemTypePage);		AddPage(m_pAlbumNumberPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCAlbumEraseDlg::~CDCAlbumEraseDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pAlbumNumberPage!=NULL){		delete m_pAlbumNumberPage;		m_pAlbumNumberPage=NULL;	}	if(m_pCamMemTypePage!=NULL){		delete m_pCamMemTypePage;		m_pCamMemTypePage=NULL;	}	if(m_pParamPage!=NULL){		delete m_pParamPage;		m_pParamPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCAlbumEraseDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCAlbumEraseDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCAlbumEraseDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	AddPage(m_pCamMemTypePage);	AddPage(m_pAlbumNumberPage);	if(!m_pParamPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCAlbumEraseDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}/////////////////////////////////////////////////////////////////////////////// CDCAlbumEraseDlg message handlersvoid CDCAlbumEraseDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;	m_pCamMemTypePage->StoreValue();	m_pAlbumNumberPage->StoreValue();	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CAlbumNamePage dialogCAlbumNamePage::CAlbumNamePage()	: CPropertyPage(CAlbumNamePage::IDD){	//{{AFX_DATA_INIT(CAlbumNamePage)	//}}AFX_DATA_INIT	m_AlbumName = "";}void CAlbumNamePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CAlbumNamePage)	DDX_Text(pDX, IDC_AlbumName, m_AlbumName);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CAlbumNamePage, CPropertyPage)	//{{AFX_MSG_MAP(CAlbumNamePage)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCAlbumChangeNameDlg dialogCDCAlbumChangeNameDlg::CDCAlbumChangeNameDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCAlbumChangeName()",pParentWnd){	m_pParamPage=NULL;	m_pCamMemTypePage=NULL;	m_pAlbumNumberPage=NULL;	m_pAlbumNamePage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pParamPage=new CDCCloseCameraPage;		if(m_pParamPage==NULL){			break;		}		m_pCamMemTypePage=new CCamMemTypePage;		if(m_pCamMemTypePage==NULL){			break;		}		m_pAlbumNumberPage=new CAlbumPage;		if(m_pAlbumNumberPage==NULL){			break;		}		m_pAlbumNamePage=new CAlbumNamePage;		if(m_pAlbumNamePage==NULL){			break;		}		m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pParamPage);		AddPage(m_pCamMemTypePage);		AddPage(m_pAlbumNumberPage);		AddPage(m_pAlbumNamePage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCAlbumChangeNameDlg::~CDCAlbumChangeNameDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pAlbumNamePage!=NULL){		delete m_pAlbumNamePage;		m_pAlbumNamePage=NULL;	}	if(m_pAlbumNumberPage!=NULL){		delete m_pAlbumNumberPage;		m_pAlbumNumberPage=NULL;	}	if(m_pCamMemTypePage!=NULL){		delete m_pCamMemTypePage;		m_pCamMemTypePage=NULL;	}	if(m_pParamPage!=NULL){		delete m_pParamPage;		m_pParamPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCAlbumChangeNameDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCAlbumChangeNameDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCAlbumChangeNameDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	AddPage(m_pCamMemTypePage);	AddPage(m_pAlbumNumberPage);	AddPage(m_pAlbumNamePage);	if(!m_pParamPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCAlbumChangeNameDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}/////////////////////////////////////////////////////////////////////////////// CDCAlbumChangeNameDlg message handlersvoid CDCAlbumChangeNameDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;	m_pCamMemTypePage->StoreValue();	m_pAlbumNumberPage->StoreValue();	m_AlbumName = m_pAlbumNamePage->m_AlbumName;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CMoveAlbumPage dialogCMoveAlbumPage::CMoveAlbumPage()	: CPropertyPage(CMoveAlbumPage::IDD){	//{{AFX_DATA_INIT(CMoveAlbumPage)	//}}AFX_DATA_INIT	m_PictNumber 		= 0;	m_FromAlbumNumber 	= 0;	m_ToAlbumNumber 	= 0;}void CMoveAlbumPage::StoreValue(){	theApp.m_PictNumber 			= m_PictNumber;	theApp.m_FromAlbumNumber 		= m_FromAlbumNumber;	theApp.m_ToAlbumNumber 			= m_ToAlbumNumber;}void CMoveAlbumPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CMoveAlbumPage)	DDX_Text(pDX, IDC_PictureNumber, m_PictNumber);	DDX_Text(pDX, IDC_FromAlbum, m_FromAlbumNumber);	DDX_Text(pDX, IDC_ToAlbum, m_ToAlbumNumber);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CMoveAlbumPage, CPropertyPage)	//{{AFX_MSG_MAP(CMoveAlbumPage)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCAlbumMoveImageDlg dialogCDCAlbumMoveImageDlg::CDCAlbumMoveImageDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCAlbumMoveImage()",pParentWnd){	m_pParamPage=NULL;	m_pCamMemTypePage=NULL;	m_pMoveAlbumPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pParamPage=new CDCCloseCameraPage;		if(m_pParamPage==NULL){			break;		}		m_pCamMemTypePage=new CCamMemTypePage;		if(m_pCamMemTypePage==NULL){			break;		}		m_pMoveAlbumPage=new CMoveAlbumPage;		if(m_pMoveAlbumPage==NULL){			break;		}		m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pParamPage);		AddPage(m_pCamMemTypePage);		AddPage(m_pMoveAlbumPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCAlbumMoveImageDlg::~CDCAlbumMoveImageDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pMoveAlbumPage!=NULL){		delete m_pMoveAlbumPage;		m_pMoveAlbumPage=NULL;	}	if(m_pCamMemTypePage!=NULL){		delete m_pCamMemTypePage;		m_pCamMemTypePage=NULL;	}	if(m_pParamPage!=NULL){		delete m_pParamPage;		m_pParamPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCAlbumMoveImageDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCAlbumMoveImageDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCAlbumMoveImageDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	AddPage(m_pCamMemTypePage);	AddPage(m_pMoveAlbumPage);	if(!m_pParamPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCAlbumMoveImageDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}/////////////////////////////////////////////////////////////////////////////// CDCAlbumMoveImageDlg message handlersvoid CDCAlbumMoveImageDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;	m_pCamMemTypePage->StoreValue();	m_pMoveAlbumPage->StoreValue();	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}// + Ogawa/////////////////////////////////////////////////////////////////////////////// CDCAlbumGetPictureNameDlg dialogCDCAlbumGetPictureNameDlg::CDCAlbumGetPictureNameDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCAlbumGetPictureName()",pParentWnd){	m_pParamPage=NULL;	m_pCamMemTypePage=NULL;	m_pAlbumNumPage=NULL;	m_pAlbumCountPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pParamPage=new CDCCloseCameraPage;		if(m_pParamPage==NULL){			break;		}		m_pCamMemTypePage=new CCamMemTypePage;		if(m_pCamMemTypePage==NULL){			break;		}		m_pAlbumNumPage=new CAlbumPage;		if(m_pAlbumNumPage==NULL){			break;		}		// + Ogawa		m_pAlbumCountPage=new CAlbumCountPage;		if(m_pAlbumCountPage==NULL){			break;		}		//m_pAlbumBufferPage=new CAlbumBufferPage;		//if(m_pAlbumBufferPage==NULL){		//	break;		//}		// - Ogawa		m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pParamPage);		AddPage(m_pCamMemTypePage);		AddPage(m_pAlbumNumPage);		// + Ogawa		AddPage(m_pAlbumCountPage);		//AddPage(m_pAlbumBufferPage);		// - Ogawa		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCAlbumGetPictureNameDlg::~CDCAlbumGetPictureNameDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	// + Ogawa	if(m_pAlbumCountPage!=NULL){		delete m_pAlbumCountPage;		m_pAlbumCountPage=NULL;	}	//if(m_pAlbumBufferPage!=NULL){	//	delete m_pAlbumBufferPage;	//	m_pAlbumBufferPage=NULL;	//}	// - Ogawa	if(m_pAlbumNumPage!=NULL){		delete m_pAlbumNumPage;		m_pAlbumNumPage=NULL;	}	if(m_pCamMemTypePage!=NULL){		delete m_pCamMemTypePage;		m_pCamMemTypePage=NULL;	}	if(m_pParamPage!=NULL){		delete m_pParamPage;		m_pParamPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCAlbumGetPictureNameDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCAlbumGetPictureNameDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCAlbumGetPictureNameDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	AddPage(m_pCamMemTypePage);	// + Ogawa	AddPage(m_pAlbumCountPage);	//AddPage(m_pAlbumCountPage);	// - Ogawa	AddPage(m_pAlbumNumPage);	if(!m_pParamPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCAlbumGetPictureNameDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}/////////////////////////////////////////////////////////////////////////////// CDCAlbumGetPictureNameDlg message handlersvoid CDCAlbumGetPictureNameDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pParamPage->m_IsCameraDataNULL;	// + Ogawa	m_pAlbumCountPage->StoreValue();	//m_pAlbumBufferPage->StoreValue();	//  Ogawa	m_pAlbumNumPage->StoreValue();	m_pCamMemTypePage->StoreValue();	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}// + Ogawa/////////////////////////////////////////////////////////////////////////////// CAlbumArrayBufferPage dialogCAlbumArrayBufferPage::CAlbumArrayBufferPage()	: CPropertyPage(CAlbumArrayBufferPage::IDD){	//{{AFX_DATA_INIT(CAlbumArrayBufferPage)	//}}AFX_DATA_INIT	m_AlbumArraySize = theApp.m_AlbumAvailableArraySize;}CAlbumArrayBufferPage::~CAlbumArrayBufferPage(){}void CAlbumArrayBufferPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CAlbumBufferPage)	DDX_Text(pDX, IDC_AlbumArraySize, m_AlbumArraySize);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CAlbumArrayBufferPage, CPropertyPage)	//{{AFX_MSG_MAP(CAlbumArrayBufferPage)//	ON_EN_CHANGE(IDC_AlbumArraySize, OnChangeCountSize)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CAlbumArrayBufferPage message handlersBOOL CAlbumArrayBufferPage::OnInitDialog(){	CPropertyPage::OnInitDialog();	return FALSE;  // return TRUE  unless you set the focus to a control}void CAlbumArrayBufferPage::OnChangeCountSize(){	UpdateData(TRUE);	UpdateData(FALSE);}void CAlbumArrayBufferPage::StoreValue(){	// Deallcate the current buffer.	if(theApp.m_pAlbumAvailableArray != NULL) {		theApp.HugeFree(theApp.m_pAlbumAvailableArray);	}	if(m_AlbumArraySize <= 0){		theApp.m_pAlbumAvailableArray = NULL; 		theApp.m_AlbumAvailableArraySize = 0;		return;	}	else{ 		theApp.m_AlbumAvailableArraySize = m_AlbumArraySize;		theApp.m_pAlbumAvailableArray = (HCHARPTR)theApp.HugeMalloc(m_AlbumArraySize * DC120OneAlbumLength); 		memset(theApp.m_pAlbumAvailableArray, '\0', m_AlbumArraySize * DC120OneAlbumLength);		if(theApp.m_pAlbumAvailableArray == NULL)			theApp.m_AlbumAvailableArraySize = 0;		return;	}// end of else  in size is not 0}/////////////////////////////////////////////////////////////////////////////// CAlbumCountPage dialogCAlbumCountPage::CAlbumCountPage()	: CPropertyPage(CAlbumCountPage::IDD){	//{{AFX_DATA_INIT(CAlbumCountPage)	//}}AFX_DATA_INIT	if(theApp.m_AlbumNumber < 0) {		theApp.m_AlbumNumber = 0;	}	if((0 <= theApp.m_AlbumNumber) && (theApp.m_AlbumNumber < theApp.m_AlbumPictNameArraySize)) {		m_NumberOfPictures = theApp.m_pAlbumAll[theApp.m_AlbumNumber].PictNum;	} else {		m_NumberOfPictures = theApp.m_AlbumPictNameArraySize;	}	m_IsUseCurrentBuffer = FALSE;}CAlbumCountPage::~CAlbumCountPage(){}void CAlbumCountPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CAlbumBufferPage)	DDX_Text(pDX, IDC_InputAlbumCount, m_NumberOfPictures);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CAlbumCountPage, CPropertyPage)	//{{AFX_MSG_MAP(CAlbumCountPage)//	ON_EN_CHANGE(IDC_InputAlbumCount, OnChangeCountSize)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CAlbumCountPage message handlersBOOL CAlbumCountPage::OnInitDialog(){	CPropertyPage::OnInitDialog();	return FALSE;  // return TRUE  unless you set the focus to a control}void CAlbumCountPage::OnChangeCountSize(){	UpdateData(TRUE);	UpdateData(FALSE);}void CAlbumCountPage::StoreValue(){	// Deallcate the current buffer.	if(theApp.m_pAlbumPictNameArray != NULL) {		theApp.HugeFree(theApp.m_pAlbumPictNameArray);	}	if(m_NumberOfPictures<=0){		theApp.m_pAlbumPictNameArray=NULL; 		theApp.m_AlbumPictNameArraySize 	= 0;		return;	}	else{ 		theApp.m_AlbumPictNameArraySize	= m_NumberOfPictures;		theApp.m_pAlbumPictNameArray = (HCHARPTR)theApp.HugeMalloc(m_NumberOfPictures * DC120AlbumPictureSize); 		memset(theApp.m_pAlbumPictNameArray, '\0', m_NumberOfPictures * DC120AlbumPictureSize);		if(theApp.m_pAlbumPictNameArray == NULL)			theApp.m_AlbumPictNameArraySize	= 0;		return;	}// end of else  in size is not 0}void CAlbumCountPage::ChangeCaption(CString* NewTitle){	m_strCaption = *NewTitle;}// - Ogawa#endif // of #ifdef DC120Include