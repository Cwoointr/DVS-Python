#include "stdafx.h"#include <limits.h>#include "SdkTest1.h"#include "dialog.h"#include "property.h"#include "dc50func.h"#ifdef _DEBUG#undef THIS_FILEstatic char BASED_CODE THIS_FILE[] = __FILE__;#endif/////////////////////////////////////////////////////////////////////////////// CDCResetCameraDlg dialogCDCResetCameraDlg::CDCResetCameraDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCResetCamera()",pParentWnd){	m_pResetCameraPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pResetCameraPage=new CDCCloseCameraPage;		if(m_pResetCameraPage==NULL){			break;		}		m_IsCameraDataNULL=m_pResetCameraPage->m_IsCameraDataNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pResetCameraPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCResetCameraDlg::~CDCResetCameraDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pResetCameraPage!=NULL){		delete m_pResetCameraPage;		m_pResetCameraPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCResetCameraDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCResetCameraDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCResetCameraDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pResetCameraPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCResetCameraDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}/////////////////////////////////////////////////////////////////////////////// CDCResetCameraDlg message handlersvoid CDCResetCameraDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif// - Ohbe	m_IsCameraDataNULL=m_pResetCameraPage->m_IsCameraDataNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCPreviewGetInfoPage dialogCDCPreviewGetInfoPage::CDCPreviewGetInfoPage()	: CPropertyPage(CDCPreviewGetInfoPage::IDD){	//{{AFX_DATA_INIT(CDCPreviewGetInfoPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsPreviewInfoNULL = FALSE;}void CDCPreviewGetInfoPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCPreviewGetInfoPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_PreviewInfoIsNULL, m_IsPreviewInfoNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCPreviewGetInfoPage, CPropertyPage)	//{{AFX_MSG_MAP(CDCPreviewGetInfoPage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCPreviewGetInfoPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCPreviewGetInfoPage message handlers/////////////////////////////////////////////////////////////////////////////// CDCPreviewGetInfoDlg dialogCDCPreviewGetInfoDlg::CDCPreviewGetInfoDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCPreviewGetInfo()",pParentWnd){	m_pPreviewGetInfoPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pPreviewGetInfoPage=new CDCPreviewGetInfoPage;		if(m_pPreviewGetInfoPage==NULL){			break;		}		m_IsCameraDataNULL=m_pPreviewGetInfoPage->m_IsCameraDataNULL;		m_IsPreviewInfoNULL=m_pPreviewGetInfoPage->m_IsPreviewInfoNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pPreviewGetInfoPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCPreviewGetInfoDlg::~CDCPreviewGetInfoDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pPreviewGetInfoPage!=NULL){		delete m_pPreviewGetInfoPage;		m_pPreviewGetInfoPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCPreviewGetInfoDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCPreviewGetInfoDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCPreviewGetInfoDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pPreviewGetInfoPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCPreviewGetInfoDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}/////////////////////////////////////////////////////////////////////////////// CDCPreviewGetInfoDlg message handlersvoid CDCPreviewGetInfoDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif// - Ohbe	m_IsCameraDataNULL=m_pPreviewGetInfoPage->m_IsCameraDataNULL;	m_IsPreviewInfoNULL=m_pPreviewGetInfoPage->m_IsPreviewInfoNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCPreviewEraseDlg dialogCDCPreviewEraseDlg::CDCPreviewEraseDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCPreviewErase()",pParentWnd){	m_pResetCameraPage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	StartErrorTrap		m_pResetCameraPage=new CDCCloseCameraPage;		if(m_pResetCameraPage==NULL){			break;		}		m_IsCameraDataNULL=m_pResetCameraPage->m_IsCameraDataNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pResetCameraPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCPreviewEraseDlg::~CDCPreviewEraseDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pResetCameraPage!=NULL){		delete m_pResetCameraPage;		m_pResetCameraPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCPreviewEraseDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCPreviewEraseDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCPreviewEraseDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pResetCameraPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCPreviewEraseDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}/////////////////////////////////////////////////////////////////////////////// CDCPreviewEraseDlg message handlersvoid CDCPreviewEraseDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif// - Ohbe	m_IsCameraDataNULL=m_pResetCameraPage->m_IsCameraDataNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCPreviewStorePage dialogCDCPreviewStorePage::CDCPreviewStorePage()	: CPropertyPage(CDCPreviewStorePage::IDD){	//{{AFX_DATA_INIT(CDCPreviewStorePage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsThumbFlagTRUE = FALSE;	m_IsGenericInfoNULL = FALSE;	m_IsFullInfoNULL = FALSE;}void CDCPreviewStorePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCPreviewStorePage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_ThumbFlagIsTRUE, m_IsThumbFlagTRUE);	DDX_Check(pDX, IDC_GenericInfoIsNULL, m_IsGenericInfoNULL);	DDX_Check(pDX, IDC_FullInfoIsNULL, m_IsFullInfoNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCPreviewStorePage, CPropertyPage)	//{{AFX_MSG_MAP(CDCPreviewStorePage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCPreviewStorePage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCPreviewStorePage message handlers/////////////////////////////////////////////////////////////////////////////// CDCPreviewStoreDlg dialogCDCPreviewStoreDlg::CDCPreviewStoreDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCPreviewStore()",pParentWnd){	m_pPreviewStorePage=NULL;	m_pCamTypePage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	// + Ogawa	m_pCamMemTypePage = NULL;	// - Ogawa	StartErrorTrap		m_pPreviewStorePage=new CDCPreviewStorePage;		if(m_pPreviewStorePage==NULL){			break;		}		m_IsCameraDataNULL=m_pPreviewStorePage->m_IsCameraDataNULL;		m_IsThumbFlagTRUE=m_pPreviewStorePage->m_IsThumbFlagTRUE;		m_IsGenericInfoNULL=m_pPreviewStorePage->m_IsGenericInfoNULL;		m_IsFullInfoNULL=m_pPreviewStorePage->m_IsFullInfoNULL;		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		// + Ogawa		m_pCamMemTypePage=new CCamMemTypePage;		if(m_pCamMemTypePage==NULL){			break;		}		// - Ogawa		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pPreviewStorePage);		// + Ogawa		AddPage(m_pCamMemTypePage);		// - Ogawa		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCPreviewStoreDlg::~CDCPreviewStoreDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	// + Ogawa	if(m_pCamMemTypePage!=NULL){		delete m_pCamMemTypePage;		m_pCamMemTypePage=NULL;	}	// - Ogawa	if(m_pPreviewStorePage!=NULL){		delete m_pPreviewStorePage;		m_pPreviewStorePage=NULL;	}}BEGIN_MESSAGE_MAP(CDCPreviewStoreDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCPreviewStoreDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCPreviewStoreDlg message handlersvoid CDCPreviewStoreDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	// + Ogawa	AddPage(m_pCamMemTypePage);	// - Ogawa			if(!m_pPreviewStorePage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCPreviewStoreDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCPreviewStoreDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pPreviewStorePage->m_IsCameraDataNULL;	m_IsThumbFlagTRUE=m_pPreviewStorePage->m_IsThumbFlagTRUE;	m_IsGenericInfoNULL=m_pPreviewStorePage->m_IsGenericInfoNULL;	m_IsFullInfoNULL=m_pPreviewStorePage->m_IsFullInfoNULL;	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		// + Ogawa		m_pCamMemTypePage->StoreValue();		// - Ogawa		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCPreviewGetPicturePage dialogCDCPreviewGetPicturePage::CDCPreviewGetPicturePage()	: CPropertyPage(CDCPreviewGetPicturePage::IDD){	//{{AFX_DATA_INIT(CDCPreviewGetPicturePage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsInputNULL = FALSE;	m_IsOutputNULL = FALSE;	m_IsProgressNULL = FALSE;}void CDCPreviewGetPicturePage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCPreviewGetPicturePage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_InputIsNULL, m_IsInputNULL);	DDX_Check(pDX, IDC_OutputIsNULL, m_IsOutputNULL);	DDX_Check(pDX, IDC_ProgressIsNULL, m_IsProgressNULL);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCPreviewGetPicturePage, CPropertyPage)	//{{AFX_MSG_MAP(CDCPreviewGetPicturePage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_InputIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_OutputIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_ProgressIsNULL, ChangeParameter)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCPreviewGetPicturePage message handlersvoid CDCPreviewGetPicturePage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCPreviewGetPictureDlg dialogCDCPreviewGetPictureDlg::CDCPreviewGetPictureDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCPreviewGetPicture()",pParentWnd){	m_pPreviewGetPicturePage=NULL;	m_pInputPage=NULL;	m_pOutputPage=NULL;	m_pProgressPage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	m_pCamTypePage=NULL;	StartErrorTrap		m_pPreviewGetPicturePage=new CDCPreviewGetPicturePage;		if(m_pPreviewGetPicturePage==NULL){			break;		}		m_IsCameraDataNULL=m_pPreviewGetPicturePage->m_IsCameraDataNULL;		m_IsInputNULL=m_pPreviewGetPicturePage->m_IsInputNULL;		m_IsOutputNULL=m_pPreviewGetPicturePage->m_IsOutputNULL;		m_IsProgressNULL=m_pPreviewGetPicturePage->m_IsProgressNULL;		m_pInputPage=new CInputPage(TRUE);		if(m_pInputPage==NULL){			break;		}		m_pOutputPage=new COutputPage(TRUE);		if(m_pOutputPage==NULL){			break;		}		m_pProgressPage=new CProgressPage;		if(m_pProgressPage==NULL){			break;		}		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pPreviewGetPicturePage);		AddPage(m_pInputPage);		AddPage(m_pOutputPage);		AddPage(m_pProgressPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCPreviewGetPictureDlg::~CDCPreviewGetPictureDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pProgressPage!=NULL){		delete m_pProgressPage;		m_pProgressPage=NULL;	}	if(m_pOutputPage!=NULL){		delete m_pOutputPage;		m_pOutputPage=NULL;	}	if(m_pInputPage!=NULL){		delete m_pInputPage;		m_pInputPage=NULL;	}	if(m_pPreviewGetPicturePage!=NULL){		delete m_pPreviewGetPicturePage;		m_pPreviewGetPicturePage=NULL;	}}BEGIN_MESSAGE_MAP(CDCPreviewGetPictureDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCPreviewGetPictureDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCPreviewGetPictureDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	if(!m_pPreviewGetPicturePage->m_IsInputNULL){		AddPage(m_pInputPage);	}	if(!m_pPreviewGetPicturePage->m_IsOutputNULL){		AddPage(m_pOutputPage);	}	if(!m_pPreviewGetPicturePage->m_IsProgressNULL){		AddPage(m_pProgressPage);	}	if(!m_pPreviewGetPicturePage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCPreviewGetPictureDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCPreviewGetPictureDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pPreviewGetPicturePage->m_IsCameraDataNULL;	m_IsInputNULL=m_pPreviewGetPicturePage->m_IsInputNULL;	m_IsOutputNULL=m_pPreviewGetPicturePage->m_IsOutputNULL;	m_IsProgressNULL=m_pPreviewGetPicturePage->m_IsProgressNULL;	if(!m_IsInputNULL){		m_pInputPage->StoreValue();	}	if(!m_IsOutputNULL){		// + Ogawa		m_pOutputPage->StoreValue(TRUE);		//m_pOutputPage->StoreValue();		// - Ogawa	}	if(!m_IsProgressNULL){		m_pProgressPage->StoreValue();	}	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CJPEGCompPage dialogCJPEGCompPage::CJPEGCompPage()	: CPropertyPage(CJPEGCompPage::IDD){	//{{AFX_DATA_INIT(CJPEGCompPage)	//}}AFX_DATA_INIT	m_JPEGCompLevel=theApp.m_JPEGCompLevel;}void CJPEGCompPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CJPEGCompPage)	DDX_CBString(pDX, IDC_JPEGCompLevel, m_JPEGCompLevelStr);	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CJPEGCompPage, CPropertyPage)	//{{AFX_MSG_MAP(CJPEGCompPage)	ON_CBN_EDITCHANGE(IDC_JPEGCompLevel, OnUpdateValue)	ON_CBN_SELCHANGE(IDC_JPEGCompLevel, OnUpdateValue)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CJPEGCompPage message handlersBOOL CJPEGCompPage::OnInitDialog(){	CPropertyPage::OnInitDialog();	CComboBox*	pComtrol;	int			SelectNumber;	BOOL		MatchFlag;	MatchFlag=TRUE;	pComtrol=(CComboBox*)GetDlgItem(IDC_JPEGCompLevel);	switch(m_JPEGCompLevel){		case DCJPEGHighQuality:			SelectNumber=0;			break;		case DCJPEGMediumQuality:			SelectNumber=1;			break;		case DCJPEGLowQuality:			SelectNumber=2;			break;		default:			wsprintf(m_JPEGCompLevelStr.GetBuffer(64),"%d",m_JPEGCompLevel);			m_JPEGCompLevelStr.ReleaseBuffer();			MatchFlag=FALSE;	}	if(MatchFlag){		pComtrol->SetCurSel(SelectNumber);	}	else{		UpdateData(FALSE);	}	return TRUE;  // return TRUE  unless you set the focus to a control}void CJPEGCompPage::OnUpdateValue(){	UpdateData(TRUE);	int			ComboBoxValue;	switch(((CComboBox*)GetDlgItem(IDC_JPEGCompLevel))->GetCurSel()){		case 0:			m_JPEGCompLevel=DCJPEGHighQuality;			break;		case 1:			m_JPEGCompLevel=DCJPEGMediumQuality;			break;		case 2:			m_JPEGCompLevel=DCJPEGLowQuality;			break;		default:			ComboBoxValue=atoi((LPCSTR)m_JPEGCompLevelStr);			if((ComboBoxValue < INT_MIN) || (ComboBoxValue > INT_MAX)){				m_JPEGCompLevel=(DCJPEGCompLevel)0;			}			else{				m_JPEGCompLevel=(DCJPEGCompLevel)ComboBoxValue;			}	}}void CJPEGCompPage::StoreValue(){	theApp.m_JPEGCompLevel = (DCJPEGCompLevel)m_JPEGCompLevel;}/////////////////////////////////////////////////////////////////////////////// CDCGetCameraPictureAsJPEGPage dialogCDCGetCameraPictureAsJPEGPage::CDCGetCameraPictureAsJPEGPage()	: CPropertyPage(CDCGetCameraPictureAsJPEGPage::IDD){	//{{AFX_DATA_INIT(CDCGetCameraPictureAsJPEGPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsOutputNULL = FALSE;	m_IsProgressNULL = FALSE;	// + Ogawa	m_IsInputNULL = FALSE;	m_IsPictInfoNULL = FALSE;	// - Ogawa}void CDCGetCameraPictureAsJPEGPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCGetCameraPictureAsJPEGPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_OutputIsNULL, m_IsOutputNULL);	DDX_Check(pDX, IDC_ProgressIsNULL, m_IsProgressNULL);	// + Ogawa	DDX_Check(pDX, IDC_InputIsNULL, m_IsInputNULL);	DDX_Check(pDX, IDC_PictInfoIsNULL, m_IsPictInfoNULL);	// - Ogawa	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCGetCameraPictureAsJPEGPage, CPropertyPage)	//{{AFX_MSG_MAP(CDCGetCameraPictureAsJPEGPage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_OutputIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_ProgressIsNULL, ChangeParameter)	// + Ogawa	ON_BN_CLICKED(IDC_InputIsNULL, ChangeParameter)	ON_BN_CLICKED(IDC_PictInfoIsNULL, ChangeParameter)	// - Ogawa	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCGetCameraPictureAsJPEGPage message handlersvoid CDCGetCameraPictureAsJPEGPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}/////////////////////////////////////////////////////////////////////////////// CDCGetCameraPictureAsJPEGDlg dialogCDCGetCameraPictureAsJPEGDlg::CDCGetCameraPictureAsJPEGDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCGetCameraPictureAsJPEG()",pParentWnd){	m_pGetCameraPictureAsJPEGPage=NULL;    m_pCamMemTypePage=NULL;	m_pAlbumNumberPage=NULL;    //m_pPictureNumberPage=NULL;		// Rem by Ogawa	m_pJPEGCompLevelPage=NULL;	// + Ogawa	m_pPictInfoPage=NULL;	m_pInputPage=NULL;	// - Ogawa	m_pOutputPage=NULL;	m_pProgressPage=NULL;	m_pPortAndBitRatePage=NULL;	m_pOthersPage=NULL;	m_pDriverPage=NULL;	m_pCamTypePage=NULL;	m_pCamMemTypePage=NULL;	StartErrorTrap		m_pGetCameraPictureAsJPEGPage=new CDCGetCameraPictureAsJPEGPage;		if(m_pGetCameraPictureAsJPEGPage==NULL){			break;		}		m_IsCameraDataNULL=m_pGetCameraPictureAsJPEGPage->m_IsCameraDataNULL;		m_IsOutputNULL=m_pGetCameraPictureAsJPEGPage->m_IsOutputNULL;		m_IsProgressNULL=m_pGetCameraPictureAsJPEGPage->m_IsProgressNULL;		// + Ogawa		m_IsInputNULL=m_pGetCameraPictureAsJPEGPage->m_IsInputNULL;		m_IsPictInfoNULL=m_pGetCameraPictureAsJPEGPage->m_IsPictInfoNULL;		// - Ogawa		m_pCamMemTypePage=new CCamMemTypePage;		if(m_pCamMemTypePage==NULL){			break;		}		m_pAlbumNumberPage=new CAlbumPage;		if(m_pAlbumNumberPage==NULL){			break;		}		// Rem by + Ogawa		//m_pPictureNumberPage=new CPictNumPage;		//if(m_pPictureNumberPage==NULL){		//	break;		//}		// Rem by - Ogawa		m_pJPEGCompLevelPage=new CJPEGCompPage;		if(m_pJPEGCompLevelPage==NULL){			break;		}		// + Ogawa		m_pPictInfoPage=new CPictInfoPage;		if(m_pPictInfoPage==NULL){			break;		}		m_pInputPage=new CInputPage;		if(m_pInputPage==NULL){			break;		}		m_pOutputPage=new COutputPage;		if(m_pOutputPage==NULL){			break;		}		m_pOutputPage->m_OutputBufferSize = DCJPEGTempSize; 		m_pOutputPage->m_OutputAllocateSize = DCJPEGTempSize; 		//m_pOutputPage=new CInputPage;		//if(m_pOutputPage==NULL){		//	break;		//}		//m_pOutputPage->m_InputBufferSize = DCJPEGTempSize; 		//m_pOutputPage->m_InputAllocateSize = DCJPEGTempSize; 		// - Ogawa		m_pProgressPage=new CProgressPage;		if(m_pProgressPage==NULL){			break;		}		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pGetCameraPictureAsJPEGPage);		AddPage(m_pCamMemTypePage);		AddPage(m_pAlbumNumberPage);		//AddPage(m_pPictureNumberPage);		// Rem by Ogawa		// + Ogawa		AddPage(m_pPictInfoPage);		// - Ogawa		AddPage(m_pJPEGCompLevelPage);		// + Ogawa		AddPage(m_pInputPage);		// - Ogawa		AddPage(m_pOutputPage);		AddPage(m_pProgressPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCGetCameraPictureAsJPEGDlg::~CDCGetCameraPictureAsJPEGDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pProgressPage!=NULL){		delete m_pProgressPage;		m_pProgressPage=NULL;	}	// + Ogawa	if(m_pInputPage!=NULL){		delete m_pInputPage;		m_pInputPage=NULL;	}	// - Ogawa	if(m_pOutputPage!=NULL){		delete m_pOutputPage;		m_pOutputPage=NULL;	}	if(m_pJPEGCompLevelPage!=NULL){		delete m_pJPEGCompLevelPage;		m_pJPEGCompLevelPage=NULL;	}	// + Ogawa	if(m_pPictInfoPage!=NULL){		delete m_pPictInfoPage;		m_pPictInfoPage=NULL;	}	//if(m_pPictureNumberPage!=NULL){	//	delete m_pPictureNumberPage;	//	m_pPictureNumberPage=NULL;	//}	// - Ogawa	if(m_pAlbumNumberPage!=NULL){		delete m_pAlbumNumberPage;		m_pAlbumNumberPage=NULL;	}	if(m_pCamMemTypePage!=NULL){		delete m_pCamMemTypePage;		m_pCamMemTypePage=NULL;	}	if(m_pGetCameraPictureAsJPEGPage!=NULL){		delete m_pGetCameraPictureAsJPEGPage;		m_pGetCameraPictureAsJPEGPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCGetCameraPictureAsJPEGDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCGetCameraPictureAsJPEGDlg)	ON_COMMAND(IDOK,OnOK)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCGetCameraPictureAsJPEGDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	AddPage(m_pCamMemTypePage);	AddPage(m_pAlbumNumberPage);	//AddPage(m_pPictureNumberPage);		// Rem by Ogawa	// + Ogawa	if(!m_pGetCameraPictureAsJPEGPage->m_IsPictInfoNULL){		AddPage(m_pPictInfoPage);	}	// - Ogawa	AddPage(m_pJPEGCompLevelPage);	// + Ogawa	if(!m_pGetCameraPictureAsJPEGPage->m_IsInputNULL){		AddPage(m_pInputPage);	}	// - Ogawa	if(!m_pGetCameraPictureAsJPEGPage->m_IsOutputNULL){		AddPage(m_pOutputPage);	}	if(!m_pGetCameraPictureAsJPEGPage->m_IsProgressNULL){		AddPage(m_pProgressPage);	}	if(!m_pGetCameraPictureAsJPEGPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}}void CDCGetCameraPictureAsJPEGDlg::UpdateDriverPage(BOOL IsDriverPageEnable){	int	LastPageNumber;	LastPageNumber=GetPageCount()-1;	if(IsDriverPageEnable){		if(GetPage(LastPageNumber)!=m_pDriverPage){			AddPage(m_pDriverPage);		}	}	else{		if(GetPage(LastPageNumber)==m_pDriverPage){			RemovePage(LastPageNumber);		}	}}void CDCGetCameraPictureAsJPEGDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pGetCameraPictureAsJPEGPage->m_IsCameraDataNULL;	m_IsOutputNULL=m_pGetCameraPictureAsJPEGPage->m_IsOutputNULL;	m_IsProgressNULL=m_pGetCameraPictureAsJPEGPage->m_IsProgressNULL;	// + Ogawa	m_IsInputNULL=m_pGetCameraPictureAsJPEGPage->m_IsInputNULL;	m_IsPictInfoNULL=m_pGetCameraPictureAsJPEGPage->m_IsPictInfoNULL;	// - Ogawa	m_pCamMemTypePage->StoreValue();	m_pAlbumNumberPage->StoreValue();	//m_pPictureNumberPage->StoreValue();		// Rem by Ogawa	m_pJPEGCompLevelPage->StoreValue();	if(!m_IsOutputNULL){		m_pOutputPage->StoreValue();	}	if(!m_IsProgressNULL){		m_pProgressPage->StoreValue();	}	// + Ogawa	if(!m_IsPictInfoNULL){		m_pPictInfoPage->StoreValue();	}	if(!m_IsInputNULL){		m_pInputPage->StoreValue();	}	// - Ogawa	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}/////////////////////////////////////////////////////////////////////////////// CDCGetNativePictureAsJPEGPage dialog groupCDCGetNativePictureAsJPEGPage::CDCGetNativePictureAsJPEGPage()	: CPropertyPage(CDCGetNativePictureAsJPEGPage::IDD){	//{{AFX_DATA_INIT(CDCGetNativePictureAsJPEGPage)	//}}AFX_DATA_INIT	m_IsCameraDataNULL = FALSE;	m_IsInputNULL = FALSE;	m_IsOutputNULL = FALSE;	m_IsProgressNULL = FALSE;	// + Ogawa	m_IsPictInfoNULL = FALSE;	// - Ogawa}void CDCGetNativePictureAsJPEGPage::DoDataExchange(CDataExchange* pDX){	CPropertyPage::DoDataExchange(pDX);	//{{AFX_DATA_MAP(CDCGetNativePictureAsJPEGPage)	DDX_Check(pDX, IDC_CameraDataIsNULL, m_IsCameraDataNULL);	DDX_Check(pDX, IDC_InputIsNULL, m_IsInputNULL);	DDX_Check(pDX, IDC_OutputIsNULL, m_IsOutputNULL);	DDX_Check(pDX, IDC_ProgressIsNULL, m_IsProgressNULL);	// + Ogawa	DDX_Check(pDX, IDC_PictInfoIsNULL, m_IsPictInfoNULL);	// - Ogawa	//}}AFX_DATA_MAP}BEGIN_MESSAGE_MAP(CDCGetNativePictureAsJPEGPage, CPropertyPage)	//{{AFX_MSG_MAP(CDCGetNativePictureAsJPEGPage)	ON_BN_CLICKED(IDC_CameraDataIsNULL, OnCameraDataIsNULL)	ON_BN_CLICKED(IDC_OutputIsNULL, OnOutputIsNULL)	ON_BN_CLICKED(IDC_ProgressIsNULL, OnProgressIsNULL)	// + Ogawa	ON_BN_CLICKED(IDC_PictInfoIsNULL, OnPictInfoIsNULL)	// - Ogawa	//}}AFX_MSG_MAPEND_MESSAGE_MAP()/////////////////////////////////////////////////////////////////////////////// CDCGetNativePictureAsJPEGPage message handlersvoid CDCGetNativePictureAsJPEGPage::ChangeParameter(){	CPropertySheetBase*	pParent;	UpdateData(TRUE);	pParent=(CPropertySheetBase*)GetParent();	if(pParent!=NULL){		pParent->UpdatePage();	}}void CDCGetNativePictureAsJPEGPage::OnCameraDataIsNULL(){	ChangeParameter();}void CDCGetNativePictureAsJPEGPage::OnInputIsNULL(){	ChangeParameter();}void CDCGetNativePictureAsJPEGPage::OnOutputIsNULL(){	ChangeParameter();}void CDCGetNativePictureAsJPEGPage::OnProgressIsNULL(){	ChangeParameter();}// + Ogawavoid CDCGetNativePictureAsJPEGPage::OnPictInfoIsNULL(){	ChangeParameter();}// - Ogawa/////////////////////////////////////////////////////////////////////////////// CDCGetNativePictureAsJPEGDlg dialogCDCGetNativePictureAsJPEGDlg::CDCGetNativePictureAsJPEGDlg(CWnd* pParentWnd)	: CPropertySheetBase("DCGetNativePictureAsJPEG()",pParentWnd){	m_pGetNativePictureAsJPEGPage=NULL;	m_pGetNativePictureAsJPEGPage=NULL;	// + Ogawa	m_pPictInfoPage=NULL;	// - Ogawa	m_pInputPage=NULL;	m_pOutputPage=NULL;	m_pProgressPage=NULL;	StartErrorTrap		m_pGetNativePictureAsJPEGPage=new CDCGetNativePictureAsJPEGPage;		if(m_pGetNativePictureAsJPEGPage==NULL){			break;		}		// + Ogawa		m_IsPictInfoNULL=m_pGetNativePictureAsJPEGPage->m_IsPictInfoNULL;		// - Ogawa		m_IsCameraDataNULL=m_pGetNativePictureAsJPEGPage->m_IsCameraDataNULL;		m_IsInputNULL=m_pGetNativePictureAsJPEGPage->m_IsInputNULL;		m_IsOutputNULL=m_pGetNativePictureAsJPEGPage->m_IsOutputNULL;		m_IsProgressNULL=m_pGetNativePictureAsJPEGPage->m_IsProgressNULL;		// + Ogawa		m_pPictInfoPage=new CPictInfoPage;		if(m_pPictInfoPage==NULL){			break;		}		// - Ogawa		m_pJPEGCompLevelPage=new CJPEGCompPage;		if(m_pJPEGCompLevelPage==NULL){			break;		}		m_pInputPage=new CInputPage;		if(m_pInputPage==NULL){			break;		}		m_pInputPage->m_IsUseCurrentBuffer= TRUE;		m_pOutputPage=new COutputPage;		if(m_pOutputPage==NULL){			break;		}		m_pOutputPage->m_OutputBufferSize = DCJPEGTempSize; 		m_pOutputPage->m_OutputAllocateSize = DCJPEGTempSize; 		m_pProgressPage=new CProgressPage;		if(m_pProgressPage==NULL){			break;		}		m_pCamTypePage=new CCamTypePage;		if(m_pCamTypePage==NULL){			break;		}		m_pPortAndBitRatePage=new CPortAndBitRatePage;		if(m_pPortAndBitRatePage==NULL){			break;		}		m_pOthersPage=new COthersPage;		if(m_pOthersPage==NULL){			break;		}		m_pDriverPage=new CDriverPage;		if(m_pDriverPage==NULL){			break;		}		AddPage(m_pGetNativePictureAsJPEGPage);		// + Ogawa		AddPage(m_pPictInfoPage);		// - Ogawa		AddPage(m_pJPEGCompLevelPage);		AddPage(m_pInputPage);		AddPage(m_pOutputPage);		AddPage(m_pProgressPage);		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		AddPage(m_pDriverPage);		m_IsSuccessIntialize=TRUE;	EndErrorTrap}CDCGetNativePictureAsJPEGDlg::~CDCGetNativePictureAsJPEGDlg(){	if(m_pDriverPage!=NULL){		delete m_pDriverPage;		m_pDriverPage=NULL;	}	if(m_pOthersPage!=NULL){		delete m_pOthersPage;		m_pOthersPage=NULL;	}	if(m_pPortAndBitRatePage!=NULL){		delete m_pPortAndBitRatePage;		m_pPortAndBitRatePage=NULL;	}	if(m_pCamTypePage!=NULL){		delete m_pCamTypePage;		m_pCamTypePage=NULL;	}	if(m_pProgressPage!=NULL){		delete m_pProgressPage;		m_pProgressPage=NULL;	}	if(m_pOutputPage!=NULL){		delete m_pOutputPage;		m_pOutputPage=NULL;	}	if(m_pInputPage!=NULL){		delete m_pInputPage;		m_pInputPage=NULL;	}	if(m_pJPEGCompLevelPage!=NULL){		delete m_pJPEGCompLevelPage;		m_pJPEGCompLevelPage=NULL;	}	// + Ogawa	if(m_pPictInfoPage!=NULL){		delete m_pPictInfoPage;		m_pPictInfoPage=NULL;	}	// - Ogawa	if(m_pGetNativePictureAsJPEGPage!=NULL){		delete m_pGetNativePictureAsJPEGPage;		m_pGetNativePictureAsJPEGPage=NULL;	}}BEGIN_MESSAGE_MAP(CDCGetNativePictureAsJPEGDlg, CPropertySheetBase)	//{{AFX_MSG_MAP(CDCGetNativePictureAsJPEGDlg)	//}}AFX_MSG_MAPEND_MESSAGE_MAP()void CDCGetNativePictureAsJPEGDlg::UpdatePage(){	while(GetPageCount() > 1){		RemovePage(1);	}	AddPage(m_pJPEGCompLevelPage);	// + Ogawa	if(!m_pGetNativePictureAsJPEGPage->m_IsPictInfoNULL){		AddPage(m_pPictInfoPage);	}	// - Ogawa	if(!m_pGetNativePictureAsJPEGPage->m_IsInputNULL){		AddPage(m_pInputPage);	}	if(!m_pGetNativePictureAsJPEGPage->m_IsOutputNULL){		AddPage(m_pOutputPage);	}	if(!m_pGetNativePictureAsJPEGPage->m_IsProgressNULL){		AddPage(m_pProgressPage);	}	if(!m_pGetNativePictureAsJPEGPage->m_IsCameraDataNULL){		AddPage(m_pCamTypePage);		AddPage(m_pPortAndBitRatePage);		AddPage(m_pOthersPage);		if(!m_pOthersPage->m_IsDriverNULL){			AddPage(m_pDriverPage);		}	}	// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_tabRow....???#ifdef WIN32	GetTabControl()->RedrawWindow();#else	m_tabRow.RedrawWindow();#endif	// - Ohbe}void CDCGetNativePictureAsJPEGDlg::OnOK(){	UpdateData(TRUE);// + Ohbe for WIN32.	// WIN32 MFC CPropertySheet doesnot have m_nCurPage....???#ifdef WIN32	GetActivePage()->UpdateData(TRUE);#else	GetPage(m_nCurPage)->UpdateData(TRUE);#endif	// - Ohbe	m_IsCameraDataNULL=m_pGetNativePictureAsJPEGPage->m_IsCameraDataNULL;	// + Ogawa	m_IsPictInfoNULL=m_pGetNativePictureAsJPEGPage->m_IsPictInfoNULL;	// - Ogawa	m_IsInputNULL=m_pGetNativePictureAsJPEGPage->m_IsInputNULL;	m_IsOutputNULL=m_pGetNativePictureAsJPEGPage->m_IsOutputNULL;	m_IsProgressNULL=m_pGetNativePictureAsJPEGPage->m_IsProgressNULL;	m_pJPEGCompLevelPage->StoreValue();	// + Ogawa	if(!m_IsPictInfoNULL){		m_pPictInfoPage->StoreValue();	}	// - Ogawa	if(!m_IsInputNULL){		m_pInputPage->StoreValue();	}	if(!m_IsOutputNULL){		m_pOutputPage->StoreValue();	}	if(!m_IsProgressNULL){		m_pProgressPage->StoreValue();	}	if(!m_IsCameraDataNULL){		m_pCamTypePage->StoreValue();		m_pPortAndBitRatePage->StoreValue();		m_pOthersPage->StoreValue();		if(!m_pOthersPage->m_IsDriverNULL){			m_pDriverPage->StoreValue();		}	}	CPropertySheetBase::OnOK();}