/********************************************************************************	Kodak Digital Camera DC40/50 Software Developer's Kit                     ***  © Copyright Eastman Kodak Company 1996.  All Rights Reserved.		      *******************************************************************************//**********************************************************************************		The SDK interface provides three levels of support, generic camera**		support, standard still camera support and full camera support for each**		model.  The generic camera support is intended to support basic camera**		functionally that is common to all digital cameras.  Full camera support**		allows the application to control all of the functionality available on**		each camera model.****		This file defines the entry points of the functions that are the**		application programming interface (API) for the Kodak Digital Camera**		Software Developer's Kit.****  AUTHORS:****		Futoshi Kitayama, Eastman Kodak Asia-Pacific R&D Center****  CREATION DATE:****		Apr./19/1996****  MODIFICATION HISTORY:****		Aug./9/1996			This is a1c1 version of DC25SDK.****		Aug./15/1996		This is a1c2 version of DC25SDK.****		Aug./26/1996		This is a1c8 version of DC25SDK.****		Sep./02/1996		This is Alpha version of DC25SDK.****		Sep./26/1996		This is f1c6 version of DC25SDK.*******************************************************************************/#ifndef _DC_SDK_LIB_#define _DC_SDK_LIB_#ifndef WINDOWS#define MACINTOSH#endif#ifdef MACINTOSH//****************************************/// MAC OS 	Header Incuding Process/*****************************************/#include <Types.h>#include <Memory.h>#include <String.h>#include <Time.h>#include <StdLib.h>#include <OSUtils.h>#include <Devices.h>#include <Serial.h>#define	HUGE#define	FAR#define	Pascal#define	huge#define	fartypedef	Handle			HANDLE;typedef	Ptr				DCB;typedef	unsigned long	DWORD; typedef unsigned short	WORD;typedef	unsigned int	UINT;typedef	Ptr				LPSTR;#define Far#define Huge#define	CallBack		pascaltypedef unsigned char	UCHAR;typedef short			SHORT;typedef unsigned short	USHORT;typedef long			LONG;typedef unsigned long	ULONG;typedef	char Far*		LPChar;typedef UCHAR Far*		LPByte;typedef UCHAR Huge*		HPByte;typedef USHORT Huge*	HPWord;typedef void *			LPVOID;typedef	short					OSErr;typedef	char FAR *				CHARPTR;typedef	char HUGE *				HCHARPTR;typedef	unsigned char HUGE *	HUCHARPTR;typedef	void FAR *				VOIDPTR;typedef	long *					LPLONG;typedef	unsigned char FAR *		UCHARFARPTR;typedef Boolean			BOOL;#define FALSE			false#define TRUE			true#define	Byte 			UCHAR#define	Word 			USHORT#define	DWord 			ULONG#endif     // of ifdef MACINTOSH#ifdef WINDOWS//****************************************///  WIN16	Header Incuding Process/*****************************************/#include <windows.h>#include <toolhelp.h>#include <stdio.h>#include <string.h>#include <time.h>#include <malloc.h>#define HUGE          __hugetypedef unsigned long   DWORD;typedef unsigned short  WORD;typedef unsigned int    UINT;#define Far				__far#define Huge			__huge#define	CallBack		__far __pascaltypedef unsigned char   UCHAR;typedef short           SHORT;typedef unsigned short  USHORT;typedef unsigned long   ULONG;typedef char Far*       LPChar;typedef UCHAR Far*      LPByte;typedef UCHAR Huge*     HPByte;typedef USHORT Huge*    HPWord;typedef	short					OSErr;typedef	char FAR *				CHARPTR;typedef	char HUGE *				HCHARPTR;typedef	unsigned char HUGE *	HUCHARPTR;typedef	void FAR *				VOIDPTR;typedef	unsigned char FAR *		UCHARFARPTR;#define Byte            UCHAR#define Word            USHORT#define DWord           ULONG#endif     // of ifdef WINDOWS#define	DCSDKVersion			0x0100	// Compatibility code#define	DCFirstPort				1		// This is used DCOpenCamera#define	DCLastPort				2		// This is used DCOpenCamera#define	DCCamIDLength			32+1	// This is used allocation for CamId in										// DCCamera and DCConfig structures.//*****************************************************************************// Error Codes Returned by the SDK//*****************************************************************************//*****************************************************************************// For DC40/50//*****************************************************************************#define	DC_NoErr				0		// Normal successful completion.#define	DC_BadArgError			-1000	// Invalid call parameter found.#define	DC_BadCloseError		-1001	// Error closing the driver. First close the open camera.#define	DC_CameraNotConnected	-1002	// Attempted to open a camera not connected to the host.#define	DC_CameraFunctionNotSupported		-1003	// Unrecognized or invalid camera type.#define	DC_CancelCallback		-1004	// Operation terminated by callback function.#define	DC_CardNotFound			-1005	// Operation requires the removable memory card, but none										// was found in the camera.#define	DC_CommunicationError	-1006	// Error communicating with the camera.#define	DC_FileNotFound			-1007	// Input file could not be found.// DC_FileNotFound is not returned by the latest SDK.#define	DC_FileWriteError		-1008	// Unable to write output file successfully.// DC_FileWriteError is not returned by the latest SDK.#define	DC_ImageProcessError	-1009	// Error occurred during image processing.#define	DC_InvalidFWError		-1010	// Attempted to download firmware that was incompatible with										// the camera.#define	DC_MallocError			-1011	// Unable to allocate required memory.#define	DC_NoSuchPortError		-1012	// Requested port does not exist.// DC_NoSuchPortError is not returned by the latest SDK.#define	DC_NotOpenError			-1013	// Attempted to close a camera or driver that is not open.#define	DC_NotROMMode			-1014	// Could not download firmware because camera is not ROM mode.#define	DC_NullPointerError		-1015	// NULL pointer found where a non-NULL pointer is										// required.// DC_NullPointerError is not returned by the latest SDK.#define	DC_ReOpenError			-1016	// Unable to open camera or driver because it is already open.										// Please close open camera or driver first.#define	DC_ROMModeError			-1017	// Unable to complete the command because the camera is in										// ROM mode.#define	DC_ROMModeOpen			-1018	// Returned by DCOpenCamera if the camera was already in										// ROM mode.  while opening the driver.#define	DC_SDKVersionError		-1019	// Compatibility error while opening the driver.#define	DC_SystemError			-1020	// General low-level operating system error found.#define	DC_CameraNotEmpty		-1021	// The current operation could not be completed because the										// camera contained pictures. The pictures in the camera										// must first be deleted before the operation can be executed.						*/#define	DC_MemoryFullError		-1022	// The camera is unable to take picture because the image										// memory is full.						//*****************************************************************************// For DC20/25//*****************************************************************************#define	DC_CannotHandleCameraType -1023	// Current SDK does not handle the specified										// camera type.#define	DC_FunctionNotSupported	-1024	// This function is not supported by this										// system.#define	DC_SpecificSDKError		-1025	// Returned by DCOpenCamera if the specific										// SDK can not load into the machine menory										// or does not exist specific SDK in required										// directory/folder.//*****************************************************************************// Camera data structures//*****************************************************************************//*****************************************************************************// For DC40/50//*****************************************************************************//// Enumerated Data Type Definitions//// DCCameraType is used to identify the type of camera that is opened by DCOpenCamera.typedef	enum{	DCNoCamera			= 0,			// A physical camera is not connected. This is used										// for decompressing files from disk without a camera.	DCGenericCamera		= 1,			// The camera is supported as a generic camera. This is the										// simplest type of camera model, and it should be used by										// applications that only want to capture and retrieve images										// without changing the camera configuration. It can also be										// set by DCOpenCamera to support new cameras that are not										// known by the application.	DCStdStillCamera	= 2,			// The camera is supported as a standard still camera. This										// should be used by applications that want to control typical										// camera features, such as flash and exposure control in a way										// that is not specific to any one camera model. With this type										// of camera, an application may not be able to access all of the										// features of every digital camera.	DC40				= 100,			// The camera is a Kodak DC40.	DC50				= 101,			// The camera is a Kodak DC50.//	For DC20/25	*****	DC20				= 102,			// The camera is a Kodak DC20.	DC25				= 103			// The camera is a Kodak DC25.//	*****************}DCCameraType, FAR *DCCameraTypePtr;// DCImgType is used in the DCImgProcData structure to identify the type of output// image that will be created by the functions DCGetThumbnail and DCGetPicture.typedef	enum{	DCGrayImage8,						// The output is an 8-bit grayscale image.	DCRGBImage24,						// The output is a 24-bit RGB image.	DCRGBImage32						// The output is a 32-bit RGB Image.}DCImgType;// DCRotateImg is used in the DCImgProcData structure to define the amount of// rotation that will be applied to images retrieved by the functions DCGetThumbnail and// DCGetPicture.typedef	enum{	DCRotate0,							// The output image is not rotated.	DCRotate90,							// The output image is rotated 90 degrees counter-clockwise.	DCRotate180,						// The output image is rotated 180 degrees counter-clockwise.	DCRotate270,						// The output image is rotated 270 degrees counter-clockwise.	DCUsePictOrientation				// The output image is rotated according to the information 										// stored with the image.}DCRotateImg;// DCPreviewType is used to specify the type of preview mode supported by the// camera. Since preview mode may be very different from one camera to the next, this// data type is provide to distinguish between the various types of preview.typedef enum{	DCPreviewNotSupported,				// The camera does not support preview mode.	DCPreviewStillGray					// The camera will return a compressed still grayscale										// preview image.}DCPreviewType;// DCProgressStatus is used by the DCProgressCB functions to describe the reason for// the call.typedef	enum{	DCProgressInit,						// Tells the application to create a status indicator display.	DCProgressUpdate,					// Tells the application to update the status indicator display.	DCProgressEnd,						// Tells the application to close the status indicator display.//	For DC20/25	*****	DCProgressIncomplete				// Tells the application to terminate incompletely and to										// close the status indicator display.//	*****************}DCProgressStatus;//*****************************************************************************// For DC20/25//*****************************************************************************// DCPortNum is used by DCOpenCamera to connect to the camera.typedef	enum{	DCPortAuto			= 0,		// If this value set by the application, the DC20									// SDK searches the communication port to the									// camera automatically.	DCPortNum1,						// Number port is 1.	DCPortNum2,						// Number port is 2.	DCPortNum3,						// Number port is 3 that is only for Windows.	DCPortNum4						// Number port is 4 that is only for Windows.} DCPortNum;// DCBitRate is used by DCOpenCamera to connect to the camera.typedef	enum{	DCBitRateAuto		= 0,		// If this value sets by the application, the									// DC20 SDK searches the maximum communication									//  bit rate to the camera automatically.	DCBitRate9600		= 96,		// Communication bit rate is 9600bps.	DCBitRate19200		= 192,		// Communication bit rate is 19200bps.	DCBitRate38400		= 384,		// Communication bit rate is 38400bps.	DCBitRate57600		= 576,		// Communication bit rate is 57600bps.	DCBitRate115200		= 1152,		// Communication bit rate is 115200bps. For Maci-									// ntosh, this is N/A(T.B.D).	DCBitRate230400		= 2304		// Communication bit rate is 230400bps. For Maci-									// ntosh, this is N/A(T.B.D).} DCBitRate;// DCWBMode is used in DCImgProcData to define CRT characteristics. If the CRT chara-// cteristics are properly defined, the image processing software in the SDK will do// a better job of recreating the captured image on the output display.typedef enum{	DCWBDayLight,					// Daylight white balance adjustment.	DCWBIndoor,						// Indoor white balance adjustment.	DCWBFluorescent,				// Fluorescent white balance adjustment.	DCWBAuto						// Auto white balance adjustment.} DCWBMode;// DCProgressType is used by the DCProgressCB functions to describe the reason for// the call.typedef	enum{	DCTransferImage,				// Tells the application to transfer the image									// from the camera.	DCImageProcess					// Tells the application to process image.} DCProgressType;// DCCamMemType is used to specify the storage of the picture.// when calling DCTakePicture, DCDeletePicture, DCGetCameraPicture,// DCGetCameraPictInfo and DCGetNativePicture.typedef	enum{	DCCameraMemory,					// Picture is on camera internal memory.	DCPCCard						// Picture is on PC card in the camera slot.} DCCamMemType;#if defined(powerc) || defined (__powerc)#pragma options align=power#endif//// Function Pointer Definitions//// DCProgressProc is a function pointer that is used as a callback to inform the// application of the progress of the current operation. DCProgressProc returns TRUE if the// operation should continue, and  FALSE if the operation should terminate because of an error// or user abort.#ifdef MACINTOSHtypedef pascal BOOL (FAR *DCProgressProc)(#endif#ifdef WINDOWStypedef BOOL (FAR PASCAL *DCProgressProc)(#endif	DCProgressStatus	Status,			// Indicates the reason for the call(See DCProgressStatus)	short				PercentComplete,// The percentage of the current operation that been										// completed. This number is in the range of [0...100]. This is										// used for DCProgressUpdate actions only.	CHARPTR				MessageString,	// A pointer to an English string describing the current status 										// of the operation. 	long				RefCon			// Reference constant that is supplied by the application in the										// DCProgressCB structure. This is useful in multithreaded										// applications to identify the thread that made the call.	);//	For DC20/25	*********************************#ifdef MACINTOSHtypedef pascal BOOL (FAR *KDCProgressProc)(#endif#ifdef WINDOWStypedef BOOL (FAR PASCAL *KDCProgressProc)(#endif	DCProgressStatus	Status,			// Indicates the reason for the call(See										// DCProgressStatus)	short				PercentComplete,// The percentage of the current operation										// that been completed. This number is in the										// range of [0...100]. This is used for										// DCProgressUpdate actions only.	DCProgressType		Type			// Indicates the reason for the call(see										// DCProgressType).	);//	*********************************************// DCImageIOProc is a function pointer that can be used as a callback to customize// image I/O. The primary purpose of this function is to reduce the image I/O memory requirements.// DCImageIOProc returns TRUE if the operation should continue, and FALSE if the operation should// terminate because of an error or user abort.#ifdef MACINTOSHtypedef pascal BOOL (FAR *DCImageIOProc)(#endif#ifdef WINDOWStypedef BOOL (FAR PASCAL *DCImageIOProc)(#endif	HCHARPTR		Buffer,				// Starting memory address for image I/O transfer.	long			Offset,				// Position in the input or output stream of the current transfer.										// For image output operations, consecutive calls to										// *DCProgressIOProc will pass data sequentially. In other										// words, the last byte of the previous call is followed by the										// first byte of the current call.										// When reading native mode image data, the SDK uses this										// parameter to more efficiently parse the input TIFF/EP										// file format. The application must read data starting at the										// correct offset in the input data.	long			Length,				// The number of bytes to transfer.	long			RefCon				// Reference constant that is supplied by the application in the										// DCImageIOCB structure. This is useful in multithreaded										// applications to identify the thread that made the call.	);//	For DC20/25	*********************************#ifdef MACINTOSHtypedef pascal BOOL (FAR *KDCImageIOProc)(#endif#ifdef WINDOWStypedef BOOL (FAR PASCAL *KDCImageIOProc)(#endif	HCHARPTR		Buffer,			// Starting memory address for image I/O									// transfer.	long			Offset,			// Position in the input or output stream of the									// current transfer. For image output operations,									// consecutive calls to *DCProgressIOProc will									// pass data sequentially. In other words, the									// last byte of the previous call is followed by									// the first byte of the current call.									// When reading native mode image data, the SDK									// uses this parameter to move to more efficient-									// ly parse the input TIFF/EP file format. The									// application must read data starting at the									// correct offset in the input data.	long			Length			// The number of bytes to transfer.									// The minimum value of this field is defined in									// the DCPictInfo structure for the image being									// retrieved.	);//	*********************************************////  Time Structure Definition//// DCTime is used to store time information in the SDK. DCTime is defined with the// same field names as the ANSI C tm structure defined in time.h. It is designed to allow// DCTime to be easily copied to the ANSI C, but compiler specific, tm structure so that// it can be used to call standard ANSI C functions such as mktime, asctime, and strftime.typedef	struct{	short		tm_sec;					// Seconds after the minute[0..59]	short		tm_min;					// Minutes after the hour[0..59]	short		tm_hour;				// Hours since midnight[0..23]	short		tm_mday;				// Day of the month[1..31]	short		tm_mon;					// Months since January[0..11]	short		tm_year;				// Years since 1900. Valid values are [94..127]	short		tm_wday;				// Days since Sunday[0..6].  Not an input parameter.	short		tm_yday;				// Days since January[0..365]  Not an input parameter.	short		tm_isdst;				// Daylight Savings Time flag.  										// 1 = Daylight Savings Time in effect.										// 0 = Daylight Savings Time not in effect.										// -1 = not known.}DCTime, *DCTimePtr;//// Image Structure Definitions //// DCImageIOCB is used to give the application control over the image I/O and the amount of memory// allocated.typedef struct{	HCHARPTR		Buffer;				// Pointer to a buffer to use for I/O operation.	long			BufferSize;			// Number of bytes to transfer.	DCImageIOProc	IOFunc;				// Callback function for banded processing.	long			RefCon;				// Reference constant that will be passed to the IOFunc. This										// is useful in multithreaded applications to identify the thread										// that made the call.}DCImageIOCB, FAR *DCImageIOCBPtr;//	For DC20/25	*********************************typedef struct{	HCHARPTR		Buffer;			// Pointer to a buffer to use for I/O operation.	long			BufferSize;		// Number of bytes to transfer.	KDCImageIOProc	IOFunc;			// Callback function for banded processing.} KDCImageIOCB, FAR *KDCImageIOCBPtr;//	*********************************************#if defined(powerc) || defined (__powerc)#pragma oldalignment on#endif// DCXYChroma is used in the DCCRTData structure to define a CRT display phosphor// and white-point chromaticity value.typedef struct{	double	XChroma;					// X chromaticity value.	double	YChroma;					// Y chromaticity value.}DCXYChroma;#if defined(powerc) || defined (__powerc)#pragma oldalignment reset#endif//	For DC20/25	*********************************typedef struct{	double	XChroma;					// X chromaticity value.	double	YChroma;					// Y chromaticity value.}KDCXYChroma;//	*********************************************#if defined(powerc) || defined (__powerc)#pragma oldalignment on#endif// DCCRTData is used in DCImgProcData to define CRT characteristics. If the CRT// characteristics are properly defined, the image processing software in the SDK will do// a better job of recreating the captured image on the output display.typedef struct{	DCXYChroma	RedChroma;				// Red phosphor characteristics.	DCXYChroma	GrnChroma;				// Green phosphor characteristics.	DCXYChroma	BluChroma;				// Blue phosphor characteristics.	double		Gamma;					// CRT gamma value.	double		WhiteTemp;				// CRT white point color temperature}DCCRTData, FAR *DCCRTDataPtr;#if defined(powerc) || defined (__powerc)#pragma oldalignment reset#endif//	For DC20/25	*********************************typedef struct{	KDCXYChroma	RedChroma;				// Red phosphor characteristics.	KDCXYChroma	GrnChroma;				// Green phosphor characteristics.	KDCXYChroma	BluChroma;				// Blue phosphor characteristics.	double		Gamma;					// CRT gamma value.	double		WhiteTemp;				// CRT white point color temperature}KDCCRTData, FAR *KDCCRTDataPtr;//	*********************************************// DCImgProcData is used by DCGetImageProcessing and DCSetImageProcessing to// define the image processing requirements for the images retrieved from// DCGetCameraPicture and DCProcNativePicture. If this function is not called, the// image processing routines assume default settings.typedef struct{	DCImgType		ImageType;			// This defines the format of future output images.										// Default for PCs = DCRGBImage24										// Default for Macs = DCRGBImage32	BOOL			RotateFlag;			// Rotating an image requires the application of a full frame										// buffer. Applications with limited memory may not want to										// allocate this buffer. This flag is used to enable or disable the										// allocation of the buffer.										// TRUE = Rotation enabled										// FALSE = Rotation disabled										// Default for DOS environments = FALSE										// Default for all other systems = TRUE	DCRotateImg		RotateAngle;		// The angle to rotate the image. This is ignored if rotation is										// disabled.										// Default = DCRotate0	BOOL			UseDefaultCRT;		// The SDK includes default CRT tables that are system										// dependent. The application can use the default tables or										// define its own CRT tables. This flag is used to enable or										// disable the default tables.										// TRUE = Use default CRT tables										// FALSE = Calculate new CRT tables										// Default = TRUE	DCCRTData		CRTData;			// Structure of CRT tables to use for color correction. This is										// ignored if the default CRT tables are being used.}DCImgProcData, FAR *DCImgProcDataPtr;//	For DC20/25	*********************************typedef struct{	DCImgType		ImageType;		// This defines the format of future output									// images.									// Default for PCs = DCRGBImage24									// Default for Macs = DCRGBImage32	BOOL			RotateFlag;		// Rotating an image requires the application of									// a full frame buffer. Applications with limited									// memory may not want to allocate this buffer.									// This flag is used to enable or disable the									// allocation of the buffer.									// TRUE = Rotation enabled									// FALSE = Rotation disabled									// Default for DOS environments = FALSE									// Default for all other systems = TRUE	DCRotateImg		RotateAngle;	// The angle to rotate the image. This is ignored									// if rotation is disabled.									// Default = DCRotate0	BOOL			UseDefaultCRT;	// The SDK includes default CRT tables that are									// system dependent. The application can use the									// default tables or define its own CRT tables.									// This flag is used to enable or disable the									// default tables.									// TRUE = Use default CRT tables									// FALSE = Calculate new CRT tables									// Default = TRUE	DCWBMode		WhiteBalance;	// White balance adjustment	KDCCRTData		CRTData;		// Structure of CRT tables to use for color corr-									// ection.									// This is ignored if the default CRT tables are									// being used.} KDCImgProcData, FAR *KDCImgProcDataPtr;//	*********************************************// DCOutputWindow is used by DCGetOutputWindow and DCSetOutputWindow to// define a customized output window for images retrieved from DCGetCameraPicture// and DCProcNativePicture. This structure is used to define an output window that is a// subset of the full image captured by the camera. If this function is not called, the// output window will assume default settings.typedef struct{	short	HOffset;					// Defines the horizontal offset, in pixels, from the left edge of										// the captured image to the beginning of the output window.										// Default value = 0.	short	VOffset;					// Defines the vertical offset, in pixels, from the top edge of the										// captured image to the beginning of the output window.										// Default value = 0.	short	Width;						// Defines the width of the output window.										// 0 = Use the full, rotation-dependent width of the selected										// image.										// Default value = 0.	short	Height;						// Defines the height of the output window.										// 0 = Use the full, rotation-dependent height of the selected										// image.										// Default value = 0.	long	RowBytes;					// Defines the number of bytes between the beginning of one										// row of image data and the beginning of the next row.										// 0 = Use the machine dependent default value.										// Default for 8 bit images = DCOutputWindow.Width										// Default for PC RGB images = 3*DCOutputWindow.Width										// Default for Mac RGB images = 4*DCOutputWindow.Width}DCOutputWindow, FAR *DCOutputWindowPtr;//	For DC20/25	*********************************typedef struct{	short	HOffset;				// Defines the horizontal offset, in pixels, from									// the left edge of the captured image to the									// beginning of the output window.									// Default value = 0.	short	VOffset;				// Defines the vertical offset, in pixels, from									// the top edge of the captured image to the beg-									// inning of the output window.									// Default value = 0.	short	Width;					// Defines the width of the output window.									// 0 = Use the full, rotation-dependent width of									// the selected image.									// Default value = 0.	short	Height;					// Defines the height of the output window.									// 0 = Use the full, rotation-dependent height of									// the selected image.									// Default value = 0.	long	RowBytes;				// Defines the number of bytes between the begin-									// ning of one row of image data and the beginni-									// ng of the next row.									// 0 = Use the machine dependent default value.									// Default for 8 bit images = Width of the									// highresolution image with DCRotate0									// Default for Mac RGB images = Width of the									// highresolution image with DCRotate0 * 4	long	ThumbRowBytes;			// Defines the number of bytes between the begin-									// ning of one row of thumbnail image data and									// the beginning of the next row.									// 0 = Use the machine dependent default value.									// Default for 8 bit images = Width of the									// thumbnail image with DCRotate0									// Default for Mac RGB images = Width of the									// thumbnail image with DCRotate0 * 4} KDCOutputWindow, FAR *KDCOutputWindowPtr;//	*********************************************//// Status Structure Definitions//// DCStatus contains status information that is common to all cameras. It is used by// DCGetStatus for generic camera support. If any of the structure entries cannot be retrieved from// the camera, it will be set to -1. If the camera has two or more separate storage media,// i.e. internal memory and removable PCMCIA/ATA card, the NumPictTaken and// NumPictRemaining fields only apply to the default storage media.typedef struct{	DCTime	Time;						// Current Time.	ULONG	FirmwareVersion;			// Version of camera firmware.	short	NumPictTaken;				// Number of pictures currently stored in the camera. If the camera has										// more than one media available ,this number represents the number of										// images that the host can access. It may be for one media or for all										// media depending on the features of the media.	short	NumPictRemaining;			// Number of pictures that can still be taken and stored on the										// default storage media according to the current settings. This										// value may be dependent on the current settings of the										// camera. For some camera models, it may only be a guess.										// If a camera has more than one storage media, i.e. internal										// memory and removable PCMCIA/ATA card, this value only										// applies to the default storage media.	short	ThumbWidth;					// Width of a thumbnail (pixels).	short	ThumbHeight;				// Height of a thumbnail (pixels).	long	PictWidth;					// Width of a picture  (pixels).	long	PictHeight;					// Height of a picture  (pixels).}DCStatus, FAR *DCStatusPtr;//	For DC20/25	*********************************typedef struct{	DCTime	Time;					// Current Time.	ULONG	FirmwareVersion;		// Version of camera firmware.	short	NumPictTaken;			// Number of pictures in the camera.	short	NumPictRemaining;		// Number of pictures that can still be taken and									// stored in the camera.	short	MemPictTaken;			// Number of pictures in the camera memory.	short	MemPictRemaining;		// Number of pictures that can still be taken and									// stored in the camera memory.	short	CardPictTaken;			// Number of pictures in the camera card.	short	CardPictRemaining;		// Number of pictures that can still be taken and									// stored in the camera card.	short	ThumbWidth;				// Width of a thumbnail if the current camera									// settings are used.	short	ThumbHeight;			// Height of a thumbnail if the current camera									// settings are used.	long	PictWidth;				// Width of a picture if the current camera									// settings are used.	long	PictHeight;				// Height of a picture if the current camera									// settings are used.} KDCStatus, FAR *KDCStatusPtr;//	*********************************************// DCConfig contains generic configuration information that is common to all // cameras. It is used by DCGetConfig and DCSetConfig for generic camera support.// Most configuration fields are camera specific, so they are included in the camera// specific data structures.typedef struct{	DCTime		Time;					// Current time stored in the camera.	CHARPTR		CamId;					// A pointer to a text string that identifies the camera. This										// string must be allocated by the application, and it must be at										// least DCCamIDLength bytes in length.}DCConfig, FAR *DCConfigPtr;// DCPictInfo contains dimensions and compressed size of a specified picture along with// the thumbnail for the picture. This information can be used for buffer allocation when// retrieving pictures from a camera.typedef struct{	short		PictNumber;				// Picture number of the image in the camera.										// -1 = number not known.	short		ThumbWidth;				// Thumbnail width.(pixels)	short		ThumbHeight;			// Thumbnail height.(pixels)	HCHARPTR	ThumbPtr;				// Pointer to the thumbnail image. The format of the image is										// determined by the current image processing settings for the										// camera. ThumbPtr points to memory that is allocated by the										// SDK, but it must be de-allocated by the application. The										// memory de-allocation function is system specific.										// NULL = thumbnail image not requested or available.	long		PictWidth;				// Picture width.(pixels)	long		PictHeight;				// Picture height.(pixels)	long		PictCompSize;			// Picture compressed size.(bytes)	long		PictMinBufIn;			// Minimum buffer size to allocate for image data input.	long		PictMinBufOut;			// Minimum buffer size to allocate for image data output.	DCTime		TimeStamp;				// Time when the picture was taken.}DCPictInfo, FAR *DCPictInfoPtr;// DCPreviewInfo is used to tell the application information about the image that will be// returned when DCPreviewGetImage is called. This information can be used for buffer// allocation when retrieving images from the camera.typedef struct{	DCPreviewType	PreviewType;		// The type of preview support by the camera.	short			PictWidth;			// Preview picture width.(pixels)	short			PictHeight;			// Preview picture height.(pixels)	long			PictCompSize;		// Preview picture compressed size.(bytes)	long			PictMinBufIn;		// Minimum buffer size to allocate for image data input.	long			PictMinBufOut;		// Minimum buffer size to allocate for image data output.	DCImgType		PictType;			// Type of image returned by DCPreviewGetImage. For the										// DC50, the preview image is DCGrayImage8.}DCPreviewInfo, FAR *DCPreviewInfoPtr;////  Driver Structure Definitions//// The DCDriver contains all of the system dependent information for opening a driver// and connecting it to an application.typedef struct{	DCCameraType	GenericCameraType;	// If user opened as a generic camera, then SDK sets the kind										// of camera. This field set by DCOpenCamera.	BOOL			DriverOpenFlag;		// DCOpenDriver sets TRUE and DCCloseDriver sets FALSE.	BOOL			CameraOpenFlag;		// DCOpenCamera sets TRUE and DCCloseCamera sets FALSE.	BOOL			ROMModeFlag;		// If TRUE, the camera is in ROM mode}DCDriver, FAR *DCDriverPtr;//	For DC20/25	*********************************typedef struct{	DCCameraType	CamType;			// A camera type that is supported by the SDK.	DCCameraType	GenericCameraType;	// If user opened as a generic camera, then										// SDK sets the kind										// of camera. This field set by DCOpenCamera.	BOOL			DriverOpenFlag;		// DCOpenDriver sets TRUE and DCCloseDriver										// sets FALSE.	BOOL			CameraOpenFlag;		// DCOpenCamera sets TRUE and DCCloseCamera										// sets FALSE.	BOOL			ROMModeFlag;		// If TRUE, the camera is in ROM mode} KDCDriver, FAR *KDCDriverPtr;//	*********************************************// DCCamera contains information specific to an open camera. It is used to identify// which camera should be used.typedef struct{	DCDriverPtr		Driver;				// A pointer to an open DCDriver structure.	short			PortNum;			// The port used to connect the camera. The types of ports										// available on a system will vary.										// To help search all available ports, the SDK defines the										// symbols DCFirstPort and DCLastPort.	DCCameraType	CamType;			// The type of camera opened.	CHARPTR			CamId;				// A pointer to a text string that identifies the camera. This										// string must be allocated by the application, and it must be at										// least DCCamIDLength bytes in length.	VOIDPTR			InternalUseOnly;	// The application should never access this field. It is used by										// the SDK library to store camera specific internal data.}DCCamera, FAR *DCCameraPtr;//	For DC20/25	*********************************typedef struct{	KDCDriverPtr	Driver;				// A pointer to an open DCDriver structure.										// This field should be initialized before										// calling DCOpenCamera.	DCPortNum		PortNum;			// Try to connect to a camera on the port										// indexed by this value. The types of ports										// available on a system will vary. It is										// also possible to open a camera without										// physically attaching a camera to the host										// computer by PortNum = -1. This is useful										// when decompressing a stored native image.										// This field should be initialized before										// calling DCOpenCamera.	DCCameraType	CamType;			// The type of camera opened. This field										// should be initialized before calling										// DCOpenCamera.	CHARPTR			CamId;				// A pointer to a text string that identifies										// the camera. This string must be allocated										// by the application, and it must be at										// least DCCamIDLength bytes in length. This										// field is initialized inside of										// DCOpenCamera.	VOIDPTR			InternalUseOnly;	// The application should never access this										// field. It is used by the SDK library to										// store camera specific internal data.	DCCameraType	SpecificCamType;	// If the type is DCGenericCamera, CamTypes										// must be set by specific camera type.										// SpecificCamType is ignored by the SDK if										// the CamType is rather than										// DCGenericCamera.	DCBitRate		BitRate;			// Try to connect to a camera with this										// value. This field should be initialized										// before calling DCOpenCamera. The SDK also										// sets this field with actual										// connected bit rate to the camera.} KDCCamera, FAR *KDCCameraPtr;//	*********************************************// DCProgressCB is a structure that defines a callback routine that can be used by// DCGetCameraPicture, DCGetNativePictue, DCPreviewGetImage and DCLoadFirmware.typedef struct{	DCProgressProc	ProgFunc;			// Pointer to the progress callback function. If progress										// information is not needed, this pointer can be set to NULL.	long			RefCon;				// Reference constant that will be passed to the ProgFunc.										// This is useful in multithreaded applications to identify the										// thread that made the call.}DCProgressCB, FAR *DCProgressCBPtr;//	For DC20/25	*********************************typedef struct{	KDCProgressProc	ProgFunc;		// Pointer to the progress callback function. If									// progress information is not needed, this									// pointer can be set to NULL.} KDCProgressCB, FAR *KDCProgressCBPtr;//	*********************************************//*****************************************************************************// Data Structures for Standard Still Digital Camera Support//*****************************************************************************//// Pre Compiler Symbol Definition//// These precompiler symbols are used to control the current timer mode of the// DC50 camera. The camera can take a picture immediately or wait 10 seconds.#define	DCTimerNoDelay	0				// Take a picture immediate when the shutter release is										// pressed.#define	DCTimer10Sec	10				// Wait until 10 seconds after the shutter release is pressed to										// take a picture.//// Enumerated Data Type Definitions //// DCSSFlashMode is used to control the current flash mode of a standard still camera.// The camera can automatically flash as needed, always flash, or never flash.typedef enum{	DCFlashAuto,						// The camera will automatically determine if it should flash.	DCFlashOn,							// The camera will flash.	DCFlashOff							// The camera will not flash.}DCSSFlashMode;//// Status Structure Definitions//// DCSSStatus holds camera status information for a Standard Still Camera. Status// information is data that can be retrieved from the camera and cannot be changed by the// application.typedef struct{	short	BatteryLevel;				// Battery status as a percentage of full strength, 0..100.										// -1 = Battery status unknown.	BOOL	ACAdapter;					// TRUE if an AC adapter is connected.										// FALSE if an AC adapter is not connected or unknown.	BOOL	CardAvailable;				// TRUE if the camera currently has a PCMCIA memory card										// (including ATA cards or other similar memory cards)										// installed.										// FALSE if the camera does not currently have a PCMCIA										// card or if the camera does not support PCMCIA.	short	MemFirstImageNum;			// Picture number of the first internal memory image in the camera.	short	MemNumberOfImages;			// Number of images in internal memory. The valid picture										// numbers for pictures stored in internal memory are										// (MemFirstImageNum)..										// (MemFirstImageNum+MemNumberOfImages-1)	short	CardFirstImageNum;			// Picture number of the first image on the PCMCIA card. On										// some cameras a PCMCIA card becomes the default storage										// media. In that case, this value will always be 1. Otherwise,										// the PCMCIA images may be accessible by specifying a										// different range of image numbers.	short	CardNumberOfImages;			// Number of images on the PCMCIA card. The valid picture										// numbers for pictures stored in PCMCIA memory are										// (CardFirstImageNum)..										// (CardFirstImageNum+CardNumberOfImages-1)}DCSSStatus, FAR *DCSSStatusPtr;// DCSSConfig holds typical configuration information for most still digital camera. The// information in this structure can be retrieved from the camera, changed and rewritten// to the camera. It is possible that some cameras will not support all of the features of// the standard still camera.typedef struct{	short			SleepTimeout;		// The number of second of inactivity that the camera will wait										// before going to sleep.										// -1 = Sleep time-out is not support by this camera.	short			TimerDelay;			// The number of seconds of that the camera will delay after										// the shutter is pressed before talking a picture.										// -1 = Timer delay is not supported by the camera.	DCSSFlashMode	FlashMode;			// The current flash mode of the camera. See the definition of										// DCFlashMode for more information.	short			PictQuality;		// A quality parameter for the image compression algorithm in										// the camera. The range of possible values is 0..100.										// 0 = Lowest possible output bit rate. This results in the										// lowest image quality and smallest file size.										// 100 = Highest possible bit rate. In some cameras, this may										// be lossless compression or no compression. This results in										// the best image quality and the largest file size. 	short			ZoomPosition;		// Controls the current camera zoom position. The range of										// possible values is 0..100.										// -1 = unknown or unsupported										// 0 = Widest possible angle										// 100 = Maximum zoom	BOOL			ManualExpFlag;		// Controls whether the camera is in manual exposure mode or										// automatic exposure with compensation. If manual exposure										// is selected, the ManualExpTime and ManualFNumber fields										// of this structure are active. If automatic exposure is										// selected, the AutoExpCompValue field is active.										// TRUE = Manual exposure										// FALSE = Automatic exposure	long			ManualExpTime;		// When ManualExpFlag = TRUE, this field controls the										// exposure time for future image captures in microseconds.										short			ManualFNumber;		// When ManualExpFlag = TRUE, this filed controls the F-										// Number of the camera for future image captures. The value										// of this field is 10 times the desired F-Number.										// Example: 40 = f4.0	short			AutoExpCompValue;	// The exposure compensation value of the camera. When the										// camera is using automatic exposure control, the camera will										// determine the Exposure Value(E.V.) of the scene. This										// exposure compensation value is added to the E.V. value of										// the scene, and the result is used to determine the exposure										// time and F-Number for the picture. The format for this value										// is 10 times the desired E.V. offset.										// Example: -5 = -0.5E.V.}DCSSConfig, FAR *DCSSConfigPtr;// DCSSPictInfo holds information about the camera status at the time the image was// captured for a Standard Still Digital Camera.typedef struct{	short			TimerMode;			// The number of seconds of delay between pressing the										// shutter release and taking a picture.										// 0 = Timer not enabled or supported.	BOOL			FlashUsed;			// Flag indicating whether the flash was used when the image										// was captured.										// TRUE = Flash used										// FALSE = Flash not used	DCSSFlashMode	FlashMode;			// The value of the FlashMode setting at the time the image										// was taken.	short			PictQuality;		// The value of the picture quality setting at the time the image										// was captured. The range of possible values 0..100.	short			ZoomPosition;		// The zoom position when the image was captured. The										// range of possible values is 0..100.	BOOL			ManualExpFlag;		// Indicates whether the exposure was set manually or										// automatically.										// TRUE = Manual exposure										// FALSE = Automatic exposure	long			ExposureTime;		// Exposure time for this picture in microseconds.	short			FNumber;			// 10 times the F-Number used for this picture.	short			BatteryLevel;		// Battery status as a percentage of full strength, 0..100.										// -1 = Battery status unknown	DCRotateImg		PictOrientation;	//Used for NativePicture Handling}DCSSPictInfo, FAR *DCSSPictInfoPtr;//*****************************************************************************// Data Structures for DC50 Digital Camera Support//*****************************************************************************// Pre Compiler Symbol Definitions//// These symbols define the valid picture quality settings for the DC50. These can be// used in the PictQuality field of the DCSSConfig structure to select the desired DC50 image quality. These values// are also used to return the PictQuality in the DCSSConfig structure after calling DCGetConfig,and// they return the PictQuality in the DCSSPictInfo structure when calling DCGetCameraPictInfo,// DCGetNativePictInfo,and DCPreviewGetInfo.#define	DC50BestQuality		83			// With this setting, the camera will create a best possible										// image quality and the largest image files.#define	DC50BetterQuality	50			// With this setting, the camera will create images that are the										// same quality as the DC40 High Resolution mode.#define	DC50GoodQuality		17			// With this setting, the camera will create images that are the										// same quality as the DC40 Snapshot mode. This will create										// the smallest possible image files.// These symbols define the valid zoom positions for the DC50. These can be used in the// ZoomPosition filed of the DCSSConfig structure to select the desired DC50 zoom position when calling// DCSetConfig. These values are also used to return the ZoomPosition in the DCSSConfig structure// after calling DCGetConfig, and they return the ZoomPosition in the DCSSPictInfo structure when// calling DCGetCameraPictInfo,DCGetNativePictInfo,and DCPreviewGetInfo.#define	DC50Zoom111mm		7#define	DC50Zoom100mm		21#define	DC50Zoom92mm		36#define	DC50Zoom77mm		50#define	DC50Zoom61mm		64#define	DC50Zoom46mm		79#define	DC50Zoom37mm		93// These symbols define valid parameters for deleting pictures from the camera. These can be used// in the DCDeletePicture function.#define	DCDeleteAll			-1#define	DCDeleteAllMem		-2#define	DCDeleteMem			-2#define	DCDeleteAllCard		-3// Following symbol is for copying all pictures in FLASH MEMORY to an inserted ATA CARD.// This is for DCCopyMemToCard();#define	DCCopyAllImages		-1//// Enumerated Data Type Definitions//// DC50FocusMode is used to control the focus of the lens. The camera can focus for// close-up pictures, or it can automatically focus using multiple zones or a single zone.typedef enum{	DC50MultiZoneFocus,					// Automatically focus using multiple focus zones.	DC50SingleZoneFocus,				// Automatically focus using a single focus zone.	DC50CloseupFocus					// Focus for close-up pictures.}DC50FocusMode;//// Status Structure Definitions//// DC50Status holds all DC50 specific status information. Status information is data that// can be retrieved from the camera and cannot be changed by the application.typedef struct{	DCSSStatus		StdStill;			// All fields are available as described in the DCSSStatus										// section.	// StdStill.BatteryLevel			   For DC50, this field will have possible values of 0, 50, and 100.	short			LightValue;			// Measured light value	unsigned short	ProgramStatus;		// The DC50 can support up to 16 program files numbered 1 -										// 16. Each bit in this 16 bit field represents the existence of										// one of the program scripts.										// bit 15(msb) = Program 1 status										// bit 14      = Program 2 status										// ...										// Bit 0(lsb)  = Program 16 status										// 1 = Program exists										// 0 = Program does not exist	short			MemBestTaken;		// The number of best quality images current stored in internal										// memory.	short			MemBetterTaken;		// The number of better quality images current stored in										// internal memory.	short			MemGoodTaken;		// The number of good quality images current stored in										// internal memory.	short			MemBestRemaining;	// The number of additional best quality images that can be										// stored in internal memory.	short			MemBetterRemaining;	// The number of additional better quality images that can be										// stored in internal memory.	short			MemGoodRemaining;	// The number of additional good quality images that can be										// stored in internal memory.	short			ATABestTaken;		// The number of best images currently stored on the ATA										// card.	short			ATABetterTaken;		// The number of better images currently stored on the ATA										// card.	short			ATAGoodTaken;		// The number of good images currently stored on the ATA										// card.	short			ATABestRemaining;	// The minimum number of additional best quality images that										// can be stored on the PCMCIA/ATA card.	short			ATABetterRemaining;	// The minimum number of additional better quality images										// that can be stored on the PCMCIA/ATA card.	short			ATAGoodRemaining;	// The minimum number of additional good quality images that										// can be stored on the PCMCIA/ATA card.	char			ATAVolumeName[12];	// The NULL-terminated name of the PCMCIA/ATA volume.}DC50Status, FAR *DC50StatusPtr;// DC50Config holds all DC50 specific configuration information. Configuration// information is data that can be retrieved from the camera and can be change and// rewritten to the camera.typedef struct{	DCSSConfig		StdStill;			// All fields are available as described in the DCSSConfig										// section.	DC50FocusMode	FocusMode;			// Controls the focus mode of the camera.  Valid values are										// DC50MultiZoneFocus, DC50SingleZoneFocus and DC50CloseupFocus.	short			ProgramMode;		// Selects one of the available programs and places the camera										// in program mode.										// 0 = Normal mode, no program selected										// n = Program mode, program file n selected, n = 1..16										// Program mode is not currently supported	BOOL			ManualExpUIFlag;	// False = The manual exposure icon on the LCD display is disabled.}DC50Config, FAR *DC50ConfigPtr;                                // DC50PictInfo holds all DC50 camera specific information about a specific picture.typedef struct{	DCSSPictInfo	StdStill;			// All fields are available as described in the DCSSPictInfo										// section.	short			ProgramUsed;		// Indicates the number of the program that was used active										// when the program was taken. Valid program numbers are										// 1-16.										// 0 = No program	DC50FocusMode	FocusMode;			// The flash mode that was active when the picture was										// captured.										// -1 = Unknown	long			FocusPosition;		// Focus position when the picture was taken.										// This value represents the distance from the camera to the subject.										// -1 = Unknown	short			LightValue;			// Measured light value when the picture was taken.										// The units for this value are millivolts(mV).										// This is the output of the CDS-cell used to measure the light level.										// -1 = Unknown	short			ExposureValue;		// Exposure value when the picture was taken.										// -1 = Unknown	short			AVData;				// "Flash-matic" value when the picture was taken.										// -1 = Unknown	char			ImageName[9];		// The name of the image. This is a NULL-terminated 8										// character file name (without extension) of the stored										// image.}DC50PictInfo, FAR *DC50PictInfoPtr;//*****************************************************************************// Data Structures for DC40 Digital Camera Support//*****************************************************************************//// Enumerated Data Type Definitions//typedef enum{	DC40ExpPlus2 = 1,	// Add 1.0 f-stop.	DC40ExpPlus1,		// Add 0.5 f-stop.	DC40ExpNormal,		// Use normal exposure.	DC40ExpMinus1,		// Subtract 0.5 f-stop.	DC40ExpMinus2		// Subtract 1.0 f-stop.}DC40ExposureMode;typedef enum{	DC40TimerNoDelay,	// Take a picture immediate when the shutter release is						// pressed.	DC40Timer10Sec,		// Wait until 10 seconds after the shutter release is						// pressed to take a picture.	DC40Timer20Sec		// Wait until 20 seconds after the shutter release is						// pressed to take a picture.}DC40TimerMode;typedef enum{	DC40FlashAuto,		// The camera will automatically determine if it should						// flash.	DC40FlashOn,		// The camera will flash.	DC40FlashOff		// the camera will not flash.}DC40FlashMode;typedef enum{	DC40HighResolution,		// With this setting, the camera will create a							// higher quality image, but it will require more							// memory in the camera and more disk space when							// the image is stored.	DC40Snapshot			// With this setting, the camera will compress the							// image to a smaller size so that more images can							// be stored in the camera. The image quality of							// these images will be lower.}DC40PictureMode;//// Status Structure Definitions//typedef struct{	short	BatteryLevel;		// Percentage 0.. 100.	BOOL	BatteryCharger;		// TRUE AC Adapter is connected.	short	HiResRemaining;		// Number of high resolution images that can be								// taken.	short	LoResRemaining;		// Number of low resolution images that can be								// taken.}DC40Status, FAR *DC40StatusPtr;typedef struct{	short				SleepTimeout;		// The number of seconds of											// inactivity that the camera will											// wait before going to sleep. It											// must be in the range 1.. 255.	BOOL				AcknowledgeMode;	// Controls the response mode for											// camera communication. TRUE =											// Acknowledge mode, FALSE = Mute											// mode.	DC40ExposureMode	DefExpMode;			// Default exposure mode.	DC40TimerMode		DefTimerMode;		// Default timer mode.	DC40FlashMode		DefFlashMode;		// Default flash mode.	BOOL				UpDownMode;			// Flag for toggle the camera											// between count up and count down											// mode. TRUE = Count up mode,											// FALSE = Count down mode.	DC40ExposureMode	ExpMode;			// The current exposure mode of the											// camera.	DC40TimerMode		TimerMode;			// The current timer mode of the											// camera.	DC40FlashMode		FlashMode;			// The current flash mode of the											// camera.	BOOL				BeepButton;			// Controls whether the camera											// beeps when the function buttons											// are pushed. TRUE = Beep, FALSE =											// No beep.	BOOL				BeepEvent;			// Controls whether the camera											// beeps for events. TRUE = Beep,											// FALSE = No beep.	BOOL				DeleteLast;			// Controls whether the Delete Last											// Image option is currently											// enabled or disabled. TRUE =											// Enabled, FALSE = Disabled.	BOOL				DeleteAll;			// Controls whether the Delete All											// Images options is currently											// enabled or disabled. TRUE =											// Enabled, FALSE = Disabled.	DC40PictureMode		PictMode;			// Controls the picture mode for											// the camera.	BOOL				ManualExpFlag;		// Controls whether the camera is in												// manual exposure mode or automatic											// exposure with compensation. If manual											// exposure is selected, the ManualExpTimer											// and ManualFNumber fields of this structure											// are active. If automatic exposure is											// selected, the ExpMode field is active.											// TRUE = Manual exposure, FALSE = Automatic											// exposure	long				ManualExpTime;		// When ManulExpFlag = TRUE, this field controls											// the exposure time for future image captures											// in microseconds.	short				ManualFNumber;		// When ManulExpFlag = TRUE, this field controls											// the F-Number of the camera for future image											// captures. The value of this field is 10											// times the desired F-Number. Example: 40 = f4.0											// Valid F-Numbers for the camera are f2.8, f3.0,											// f3.5, f4.0, f4.9, f6.3, f9.0, and f16.0.											}DC40Config, FAR *DC40ConfigPtr;typedef struct{	long	ExposureTime;	// Exposure time for this picture in microseconds.	BOOL	FlashUsed;		// Flag to tell whether a flash was used to take							// the picture.	short	FNumber;		// 10 * the F-Number of the used by the camera. The application							// should divide this number by 10 to calculate the							// actual F-Number.}DC40PictInfo, FAR *DC40PictInfoPtr;//***********************************************************************************// Data Structures for DC20 Digital Camera Support//***********************************************************************************//**********************************// Enumerated Data Type Definitions//**********************************// DC20TimerMode is used to control taking a picture to the DC20 camera immediately// or wait 10 seconds Actually the DC20 camera does not have a built-in delay timer// for the shutter button, this is controled by the SDK.typedef	enum{	DC20TimerNoDelay,				// Take a picture immediately.	DC20Timer10Sec					// Take a picture after 10 seconds.} DC20TimerMode;// DC20PictureMode is used to control the image capture mode of the camera. The DC20// can capture two types of images, high resolution image and standard image.typedef	enum{	DC20HighResolution,				// With this setting, the camera will create a									// higher quality image. 8 pictures can be taken.	DC20Standard					// With this setting, the camera will sample the									// image to a smaller size so the image quality									// of these images will be lower. 16 pictures can									// be taken.} DC20PictureMode;// DC20BatteryStatus is returned by the SDK to the application as a DC20Status// information.typedef	enum{	DC20BatteryOK,					// The battery is full power condition. When the									// AC adapter is used, this value is returned to									// the application.	DC20BatteryWeak,				// The battery is at a low power condition.	DC20BatteryEmpty				// The battery is almost empty.} DC20BatteryStatus;//**********************************// Structured Data Type Definitions//**********************************// DC20Status holds all DC20 specific status information.typedef	struct{	DC20BatteryStatus	BatteryStatus;	// This indicates the battery status.} DC20Status, FAR *DC20StatusPtr;// DC20Config holds all DC20 specific configuration information.typedef	struct{	DC20PictureMode		PictMode;		// Controls the picture mode for the camera.										// See the definition of DC20PictureMode for										// more information and a list of possible										// values.} DC20Config, FAR *DC20ConfigPtr;//+a1c8 added// DC20PictInfo holds all DC20 specific picture information.typedef	struct{	DCRotateImg			PictOrientation;// One of the value of the DCRotateImg										// definition except DCUsePictOrientation.										// When the application acquires the image										// from the camera, this depends on the										// setting of the DCSetImageProcessing										// function. If the setting is										// DCUsePictOrientation, the SDK sets										// DCRotate0 in this value. when the										// application acquires the image from the										// native file, this depends on the setting										// of the DCSetImageProcessing function. If										// the setting is DCUsePictOrientaion, the										// SDK sets rotate angle from the information										// of the native file.} DC20PictInfo, FAR *DC20PictInfoPtr;//-a1c8 added//***********************************************************************************// Data Structures for DC25 Digital Camera Support//***********************************************************************************//**********************************// Enumerated Data Type Definitions//**********************************// DC25TimerMode is used to control taking a picture to the DC25 camera immediately// or wait 10 seconds Actually the DC25 camera does not have a built-in delay timer// for the shutter button, this is controled by the SDK.typedef	enum{	DC25TimerNoDelay	= 0,		// Take a picture immediately.	DC25Timer10Sec					// Take a picture after 10 seconds.} DC25TimerMode;// DC25PictureMode is used to control the image capture mode of the camera. The DC25// can capture two types of images, high resolution image and standard image.typedef	enum{	DC25HighResolution,				// With this setting, the camera will create a									// higher quality image.	DC25Standard					// With this setting, the camera will sample the									// image to a smaller} DC25PictureMode;// DC25BatteryStatus is returned by the SDK to the application as a DC25Status// information.typedef	enum{	DC25BatteryOK	= 0,			// The battery is full power condition. When the									// AC adapter is used, this value is returned to									// the application.	DC25BatteryWeak,				// The battery is at a low power condition.	DC25BatteryEmpty				// The battery is almost empty.} DC25BatteryStatus;// DC25FlashMode is returned by the SDK to the application as a DC25Status// information.typedef	enum{	DC25FlashAuto,					// The camera will automatically determine if it									// should flash.	DC25FlashOn,					// The camera will flash.	DC25FlashOff					// The camera will not flash.} DC25FlashMode;//+a1c3 added// DC25FNumber is returned by the SDK to the application as a DC25PictInfo// information.typedef	enum{	DC25FNumber4	= 0,			// F-Number is 4.0.	DC25FNumber11					// F-Number is 11.0.} DC25FNumber;//-a1c3 added//**********************************// Structured Data Type Definitions//**********************************// DC20Status holds all DC25 specific status information.typedef	struct{//+f1c6 added	BOOL				BatteryUpdateFlag;	// If TRUE, the SDK makes DC25Status with											// updated battery status.											// If FALSE, the SDK makes DC25Status											// without updated battery status.//-f1c6 added	DC25BatteryStatus	BatteryStatus;		// This indicates the battery status.	BOOL				ACAdapter;			// TRUE if an ACAdapter is connected.											// FALSE if an ACAdapter is not connected.	BOOL				CardAvailable;		// TRUE if the PC card is inserted into											// the camera.											// FALSE if the PC card is not inserted											// into the camera.	short				MemHighTaken;		// The number of high resolution images											// are stored in the camera memory.	short				MemStdTaken;		// The number of standard resolution											// images are stored in the camera memory.	short				MemHighRemaining;	// The number of high resolution images											// can be taken in the camera memory.	short				MemStdRemaining;	// The number of standard resolution											// images can be taken in the camera											// memory.	short				CardHighTaken;		// The number of high resolution images											// are stored in the PC card.											// If the CardAvailable is FALSE, this											// value is set to 0.	short				CardStdTaken;		// The number of standard resolution											// images are stored in the PC card.											// If the CardAvailable is FALSE, this											// value is set to 0.	short				CardHighRemaining;	// The number of high resolution images											// can be taken in the PC card.											// If the CardAvailable is FALSE, this											// value is set to 0.	short				CardStdRemaining;	// The number of standard resolution											// images can be taken in the PC card.											// If the CardAvailable is FALSE, this											// value is set to 0.} DC25Status, FAR *DC25StatusPtr;// DC25Config holds all DC25 specific configuration information.typedef	struct{	DC25PictureMode		PictMode;		// One of the values defined in the										// DC25PictureMode section. The current										// picture mode of the camera.	DC25FlashMode		FlashMode;		// One of the values defined in the										// DC25FlashMode section. The current										// flash mode of the camera.} DC25Config, FAR *DC25ConfigPtr;// DC25PictInfo holds all DC25 specific picture information.typedef	struct{	DC25PictureMode		PictMode;		// One of the values defined in the										// DC25PictureMode when this picture was										// taken.	DC25FlashMode		FlashMode;		// One of the values defined in the										// DC25FlashMode when this picture was										// taken.	DC25FNumber			FNumber;		// One of the values in the DC25FNumber										// when this picture was taken.//+a1c8 changed	DCRotateImg			PictOrientation;// One of the value of the DCRotateImg										// definition except DCUsePictOrientation.										// When the application acquires the image										// from the camera, this depends on the										// setting of the DCSetImageProcessing										// function. If the setting is										// DCUsePictOrientation, the SDK sets										// DCRotate0 in this value. when the										// application acquires the image from the										// native file, this depends on the setting										// of the DCSetImageProcessing function. If										// the setting is DCUsePictOrientaion, the										// SDK sets rotate angle from the information										// of the native file.//-a1c8 changed} DC25PictInfo, FAR *DC25PictInfoPtr;#ifdef __cplusplusextern "C" {#endif 						// __cplusplus#ifndef WINDOWS#if !(defined(powerc) || defined(__powerc) || defined(__POWERPC__))#pragma mpwc on				// at start of function declaration#endif#if defined(powerc) || defined(__powerc) || defined(__POWERPC__) || defined(__CFM68K__)#pragma import on#endif#endif//*****************************************************************************// Function Definitions//*****************************************************************************// DCOpenDriver initializes all internal data structures to default values. It also performs// all system dependent functions required to connect a driver to an application.// DCOpenDriver initializes the Driver structure which may then be used to open and// close several cameras.extern OSErr far pascal 		DCOpenDriver(			USHORT		Version,		// This should be passed as the constant DCSDKVersion.			DCDriverPtr	Driver			// This is a system dependent structure that contains										// information about the open driver.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCOpenDriver(//+a1c6 changed			SHORT FAR *		Version,	// This should be passed as the constant										// DCSDKVersion in DC25.H. The DC25SDK sets//-a1c6 changed										// the created version number into this										// parameter. 			KDCDriverPtr	Driver		// This is a system dependent structure that										// contains information about the open										// driver.		);//	*********************************************// DCCloseDriver de-allocates all memory allocated by the driver. It also performs all// system dependent functions required to disconnect the driver from the application.extern OSErr far pascal 		DCCloseDriver(			DCDriverPtr	Driver			// This is a system dependent structure that contains										// information about the open driver. This structure should have										// been initialized by a previous call to DCOpenDriver.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCCloseDriver(			KDCDriverPtr	Driver		// This is a system dependent structure that										// contains information about the open										// driver.		);//	*********************************************// DCOpenCamera attempts to open a camera on a specified port. Before calling// DCOpenCamera, CameraData->Driver should point to an open DCDriver structure,// and CameraData->PortNum should be initialized to a value that will index the port to// be opened.extern OSErr far pascal 		DCOpenCamera(			DCCameraPtr	CameraData		// This structure contains information about a particular open										// camera.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCOpenCamera(			KDCCameraPtr	CameraData	// This structure contains information about										// a particular open camera. The Driver,										// CamType, PortNum, CamType2 and BitRate										// fields of this structure should be initia-										// lized before calling DCOpenCamera.		);//	*********************************************// DCCloseCamera de-allocates any memory allocated for camera specific data structures,// and terminates communications with the camera on the specified I/O port.extern OSErr far pascal 		DCCloseCamera(			DCCameraPtr	CameraData		// Specifies the camera to use for this operation.  This										// structure should have been initialized by a previous call										// to DCOpenCamera.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCCloseCamera(			KDCCameraPtr	CameraData	// Specifies the camera to use for this										// operation.		);//	*********************************************// DCGetStatus gets current status information from the camera specified by// CameraData. Generic camera status information is stored in GenericStatus, and// camera specific status is stored in FullStatus. If the GenericStatus pointer is NULL,// no generic information is returned. If the FullStatus pointer is NULL, no camera// specific information is returned. FullStatus is ignored if the camera is opened as a// generic camera.extern OSErr far pascal 		DCGetStatus(			DCCameraPtr	CameraData,		// Specifies the camera to use for this operation.  This										// structure should have been initialized by a previous call										// to DCOpenCamera.			DCStatusPtr	GenericStatus,	// A pointer to a structure holding generic status information.										// If the pointer != NULL, the structure is filled with current										// status information.			VOIDPTR		FullStatus		// A pointer to a structure holding camera specific status										// information. If the pointer != NULL, the structure is filled										// with current status information.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCGetStatus(			KDCCameraPtr	CameraData,		// Specifies the camera to use for this											// operation.			KDCStatusPtr	GenericStatus,	// A pointer to a structure holding generic											// status information. If the pointer !=											// NULL, the structure is filled with current											// status information.			VOIDPTR		FullStatus			// A pointer to a structure holding camera											// specific status information. If the											// pointer != NULL, the structure is filled											// with current status information.		);//	*********************************************// DCGetConfig gets current configuration information from the camera specified by// CameraData. Generic camera configuration information is stored in GenericConfig,// and camera specific configuration is stored in FullConfig. If the GenericConfig// pointer is NULL, no generic information is returned. If the FullConfig pointer is// NULL, no camera specific information is returned. FullConfig is ignored if the camera// is opened as a generic camera.extern OSErr far pascal 		DCGetConfig(			DCCameraPtr	CameraData,		// Specifies the camera to use for this operation.  This										// structure should have been initialized by a previous call										// to DCOpenCamera.			DCConfigPtr	GenericConfig,	// A pointer to a structure holding generic configuration										// information. If the pointer != NULL, the structure is filled										// with current configuration information.			VOIDPTR		FullConfig		// A pointer to a structure holding camera specific configuration										// information. If the pointer != NULL, the structure is filled										// with current configuration information.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCGetConfig(			KDCCameraPtr	CameraData,		// Specifies the camera to use for this											// operation.			DCConfigPtr		GenericConfig,	// A pointer to a structure holding generic											// configuration information. If the pointer											// != NULL, the structure is filled with											// current configuration information.			VOIDPTR			FullConfig		// A pointer to a structure holding camera											// specific configuration information. If the											// pointer != NULL, the structure is filled											// with current configuration information.		);//	*********************************************// DCSetConfig sends configuration information to the camera specified by CameraData.// Generic camera information is stored in GenericConfig, and camera specific// configuration information is stored in FullConfig. If the GenericConfig pointer is// NULL, no generic information is set. If the FullConfig pointer is NULL, no camera// specific information is set. FullConfig is ignored if the camera is opened as a generic// camera.extern OSErr far pascal 		DCSetConfig(			DCCameraPtr	CameraData,		// Specifies the camera to use for this operation.  This										// structure should have been initialized by a previous call										// to DCOpenCamera.			DCConfigPtr	GenericConfig,	// A pointer to a structure holding generic configuration										// information. If the pointer != NULL, the configuration										// information is loaded into the camera.			VOIDPTR		FullConfig		// A pointer to a structure holding camera specific configuration										// information. If the pointer != NULL, the configuration										// information is loaded into the camera.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCSetConfig(			KDCCameraPtr	CameraData,		// Specifies the camera to use for this											// operation.			DCConfigPtr		GenericConfig,	// A pointer to a structure holding generic											// configuration information. If the pointer											// != NULL, the configuration information is											// loaded into the camera.			VOIDPTR		FullConfig			// A pointer to a structure holding camera											// specific configuration information. If the											// pointer != NULL, the configuration											// information is loaded into the camera.		);//	*********************************************// DCResetCamera sends a reset command to the camera specified by CameraData. The// reset command will reset the camera configuration settings to their default values.extern OSErr far pascal 		DCResetCamera(			DCCameraPtr	CameraData		// Specifies the camera to use for this operation.  This										// structure should have been initialized by a previous call										// to DCOpenCamera.		);// DCGetImageProcessing returns the current image processing settings for the camera// specified by CameraData.extern OSErr far pascal 		DCGetImageProcessing(			DCCameraPtr			CameraData,	// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera.			DCImgProcDataPtr	IPData		// A pointer to a structure that will be filled with the current											// image processing settings.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCGetImageProcessing(			KDCCameraPtr		CameraData,	// Specifies the camera to use for this											// operation.			KDCImgProcDataPtr	IPData		// A pointer to a structure that will be											// filled with the current image process-											// ing settings.		);//	*********************************************// DCSetImageProcessing sets the image processing values for future images retrieved// from the camera specified by CameraData. These values will be valid until the camera// is closed. When a camera is reopened, it is reset to default values.extern OSErr far pascal 		DCSetImageProcessing(			DCCameraPtr			CameraData,	// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera.			DCImgProcDataPtr	IPData		// A pointer to a structure that is filled with new image											// processing settings.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCSetImageProcessing(			KDCCameraPtr		CameraData,	// Specifies the camera to use for this											// operation.			KDCImgProcDataPtr	IPData		// A pointer to a structure that is											// filled with new image processing											// settings.		);//	*********************************************// DCGetOutputWindow returns the current output window settings for the camera// specified by CameraData.extern OSErr far pascal 		DCGetOutputWindow(			DCCameraPtr			CameraData,	// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera.			DCOutputWindowPtr	WindowData	// A pointer to a structure that will be filled with the current											// output window settings.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCGetOutputWindow(			KDCCameraPtr		CameraData,	// Specifies the camera to use for this											// operation.			KDCOutputWindowPtr	WindowData	// A pointer to a structure that will be											// filled with the current output window											// settings.		);//	*********************************************// DCSetOutputWindow sets the output window settings for the camera specified by// CameraData. By using this function the user can customize the size of the output// image returned by DCGetCameraPicture and DCProcNativePicture so that it fits into// any size output window.extern OSErr far pascal 		DCSetOutputWindow(			DCCameraPtr			CameraData,	// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera.			DCOutputWindowPtr	WindowData	// A pointer to a structure that will be filled with the current											// output window settings.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCSetOutputWindow(			KDCCameraPtr		CameraData,	// Specifies the camera to use for this											// operation.			KDCOutputWindowPtr	WindowData	// A pointer to a structure that will be											// filled with the current output window											// settings.		);//	*********************************************// DCTakePicture commands the camera specified by CameraData to take a picture.// Information about the captured image is returned in the GenericInfo and FullInfo// structures. Either of these pointers can be set to NULL if the information is not// required. FullInfo is ignored if the camera is opened as a generic camera.extern OSErr far pascal 		DCTakePicture(			DCCameraPtr		CameraData,	// Specifies the camera to use for this operation.  This										// structure should have been initialized by a previous call										// to DCOpenCamera.			BOOL			ThumbFlag,	// Flag to inform the SDK whether it should return the										// thumbnail image as a part of the GenericInfo structure.			DCPictInfoPtr	GenericInfo,// A pointer to a structure holding generic picture information.										// If the pointer != NULL, the structure is filled with										// information about the picture that was taken.			VOIDPTR			FullInfo	// A pointer to a structure holding camera specific picture										// information. If the pointer != NULL, the structure is filled										// with information about the picture that was taken.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCTakePicture(			KDCCameraPtr	CameraData,	// Specifies the camera to use for this										// operation.			DCCamMemType	CamMemType,	// One of the values defined in the										// DCCamMemType definition.			BOOL			ThumbFlag,	// Flag to inform the SDK whether it should										// return the thumbnail image as a part of										// the GenericInfo structure.			DCPictInfoPtr	GenericInfo,// A pointer to a structure holding generic										// picture information. If the pointer !=										// NULL, the structure is filled with inform-										// ation about the picture that was taken.			VOIDPTR			FullInfo	// A pointer to a structure holding camera										// specific picture information. If the										// pointer != NULL, the structure is filled										// with information about the picture that										// was taken.		);//	*********************************************// DCDeletePicture will delete a picture from the camera memory. The special symbols DCDeleteAll,// DCDeleteAllMem, and DCDeleteAllCard can be used to delete all images from a specific storage// media. If it is unable to delete an image, an error code will be returned.extern OSErr far pascal 		DCDeletePicture(			DCCameraPtr	CameraData,		// Specifies the camera to use for this operation.  This										// structure should have been initialized by a previous call										// to DCOpenCamera.			short		PictNum			// Picture in camera memory to be deleted.										// DCDeleteAll = Delete All Images from the current storage										// media.										// DCDeleteAllMem = Delete All Images from the internal										// camera memory.										// DCDeleteAllCard = Delete All Images from the removable										// memory card.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCDeletePicture(			KDCCameraPtr	CameraData,	// Specifies the camera to use for this										// operation.			DCCamMemType	CamMemType,	// One of the values defined in the										// DCCamMemType definition.			short			PictNum		// Picture in camera memory to be deleted.										// DCDeleteAll = Delete All Images that are										// currently accessible from the camera.		);//	*********************************************// DCPreviewGetInfo returns information about how preview mode is supported for the// camera. The information in the DCPreviewInfo structure can be used to// allocate memory for the preview image.extern OSErr far pascal 		DCPreviewGetInfo(			DCCameraPtr			CameraData,	// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera.			DCPreviewInfoPtr	PreviewInfo	// Pointer to an output structure that returns information about											// the type of preview supported by the camera and the											// dimensions of the preview image.		);// DCPreviewGetPicture commands the camera specified by CameraData to take a picture and return// a preview image to the application. The preview image is a// recognizable version of the current picture in the camera.extern OSErr far pascal 		DCPreviewGetPicture(			DCCameraPtr			CameraData,	// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera. 			DCImageIOCBPtr		Input,		// A pointer to a structure containing IO processing											// information for input data.			DCImageIOCBPtr		Output,		// A pointer to a structure containing IO processing											// information for output data.			DCProgressCBPtr		Progress	// A pointer to a structure containing a progress callback											// function.		);// DCPreviewStore commands the camera specified by CameraData to store the current// preview image. After storing the preview image, the camera will return to normal// operation. Information about the captured image is returned in the GenericInfo and// FullInfo structures. Either of these pointers can be set to NULL if the information is// not required. FullInfo is ignored if the camera is opened as a generic camera.extern OSErr far pascal 		DCPreviewStore(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera.			BOOL			ThumbFlag,		// Flag to inform the SDK whether it should return the											// thumbnail image as a part of the GenericInfo structure.			DCPictInfoPtr	GenericInfo,	// A pointer to a structure holding generic picture information.											// If the pointer != NULL, the structure is filled with											// information about the picture that was taken.			VOIDPTR			FullInfo		// A pointer to a structure holding camera specific picture											// information. If the pointer != NULL, the structure is filled											// with information about the picture that was taken.		);// DCPreviewErase commands the camera to discard the image currently captured for// preview without saving it. After discarding the preview image, the camera will return// to normal operation.extern OSErr far pascal 		DCPreviewErase(			DCCameraPtr		CameraData		// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera.		);// DCCopyMemToCard copies an image from internal memory to the removable memory// card. The picture number of the output image on the card will be the next available// number.extern OSErr far pascal 		DCCopyMemToCard(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera.			short			PictNum			// The number of the image in internal memory to copy to the											// removable memory card.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCCopyMemToCard(			KDCCameraPtr	CameraData,	// Specifies the camera to use for this oper-										// ation. This structure should have been										// initialized by a previous call to										// DCOpenCamera.			short			PictNum		// The number of the image in Camera memory										// to copy to the PC card.										// DCCopyAllImages = copy all images from										// Camera memory to PC card.		);//	*********************************************// DCGetCameraPictInfo retrieves information about the picture specified by PictNum// from the camera specified by CameraData. Information about the captured image is// returned in the GenericInfo and FullInfo structures. Either of these pointer can be set// to NULL if the information is not required.extern OSErr far pascal 		DCGetCameraPictInfo(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera.			short			PictNum,		// Picture number in the camera for which information is											// retrieved.			BOOL			ThumbFlag,		// Flag to inform the SDK whether it should return the											// thumbnail image as a part of the GenericInfo structure.			DCPictInfoPtr	GenericInfo,	// A pointer to a structure holding generic picture information.											// If the pointer != NULL, the structure is filled with											// information about the requested picture.			VOIDPTR			FullInfo		// A pointer to a structure holding camera specific picture											// information. If the pointer != NULL, the structure is filled											// with information about the requested picture.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCGetCameraPictInfo(			KDCCameraPtr	CameraData,		// Specifies the camera to use for this											// operation.			DCCamMemType	CamMemType,		// One of the values defined in the											// DCCamMemType definition.			short			PictNum,		// Picture number in the camera for which											// information is retrieved.			BOOL			ThumbFlag,		// Flag to inform the SDK whether it											// should return the thumbnail image as a											// part of the GenericInfo structure.			DCPictInfoPtr	GenericInfo,	// A pointer to a structure holding											// generic picture information. If the											// pointer != NULL, the structure is											// filled with information about the											// requested picture.			VOIDPTR			FullInfo		// A pointer to a structure holding											// camera specific picture information.											// If the pointer != NULL, the structure											// is filled with information about the											// requested picture.		);//	*********************************************// DCGetNativeCameraType retrieves type CameraType for the native picture specified by the Input I/O// interface. This routine should be used if the application needs to call DCGetNativePictInfo to get the// Full Camera Picture Information from a native file. Once the application knows the type of camera// that was used to create the native file, it can allocate the correct type of FullInfo data structure to call// DCGetNativePictInfoextern OSErr far pascal 		DCGetNativeCameraType(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera.			DCImageIOCBPtr	Input,			// Interface for full buffer or callback image I/O.			DCCameraTypePtr	CameraType		// Output value specifying the type of camera that was used to create a											// native file.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCGetNativeCameraType(			KDCCameraPtr	CameraData,		// Specifies the camera to use for this											// operation. This must be a valid											// DCCameraData structure even if there											// in no camera connected to the computer.			KDCImageIOCBPtr	Input,			// Interface for full buffer or callback											// image I/O.//+a1c6 changed			DCCameraTypePtr	CameraType		// Output value specifying the type of//-a1c6 changed											// camera that was used to create a											// native file.		);//	*********************************************// DCGetNativePictInfo retrieves information from the native picture specified by the// Input I/O interface. Information about the native picture is returned in the GenericInfo// and FullInfo structures. Either of these pointer can be set to NULL if the information// is not required.extern OSErr far pascal 		DCGetNativePictInfo(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera.			DCImageIOCBPtr	Input,			// Interface for full buffer or callback image I/O.			BOOL			ThumbFlag,		// Flag to inform the SDK whether it should return the											// thumbnail image as a part of the GenericInfo structure.			DCPictInfoPtr	GenericInfo,	// A pointer to a structure holding generic picture information.											// If the pointer != NULL, the structure is filled with											// information about the requested picture.			VOIDPTR			FullInfo		// A pointer to a structure holding camera specific picture											// information. If the pointer != NULL, the structure is filled											// with information about the requested picture.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCGetNativePictInfo(			KDCCameraPtr	CameraData,		// Specifies the camera to use for this											// operation. This must be a valid											// DCCameraData structure even if no											// camera connected to the computer(see											// DCOpenCamera).			KDCImageIOCBPtr	Input,			// Interface for full buffer or callback											// image I/O.			BOOL			ThumbFlag,		// Flag to inform the SDK whether it											// should return the thumbnail image as a											// part of the GenericInfo structure.			DCPictInfoPtr	GenericInfo,	// A pointer to a structure holding											// generic picture information. If the											// pointer != NULL, the structure is											// filled with information about the											// requested picture.			VOIDPTR			FullInfo		// A pointer to a structure holding											// camera specific picture information.											// If the pointer != NULL, the structure											// is filled with information about the											// requested picture.		);//	*********************************************// DCGetCameraPicture reads a picture from the camera specified by CameraData,// progress it, and returns the output image to the application. The type of image// (grayscale, or RGB), rotation angle, and CRT correction are determined by the// previous call to DCSetImageProcessing. If DCSetImageProcessing has not been// called, default processing will be performed, however, the default image processing// setting may be system dependent.extern OSErr far pascal 		DCGetCameraPicture(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera.			DCPictInfoPtr	Picture,		// Information about the picture being retrieved. This should											// have been initialized by a previous call to											// DCGetCameraPictInfo.			DCImageIOCBPtr	Input,			// A pointer to a structure containing IO processing											// information for input data.			DCImageIOCBPtr	Output,			// A pointer to a structure containing IO processing											// information for output data.			DCProgressCBPtr	Progress		// A pointer to a structure containing a progress callback											// function.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCGetCameraPicture(			KDCCameraPtr		CameraData,	// Specifies the camera to use for this											// operation. This should have been											// initialized by a previous call to											// DCOpenCamera.			DCCamMemType		CamMemType,	// One of the values defined in the											// DCCamMemType definition.			DCPictInfoPtr		Picture,	// Information about the picture being											// retrieved. This should have been											// initialized by a previous call to											// DCGetCameraPictInfo.			KDCImageIOCBPtr		Input,		// A pointer to a structure containing IO											// processing information for input data.											// The IOFunc field of this DCImageIOCB											// structure must be NULL.			KDCImageIOCBPtr		Output,		// A pointer to a structure containing IO											// processing information for output											// data. The IOFunc field of this											// DCImageIOCB structure must be NULL.			KDCProgressCBPtr	Progress	// A pointer to a structure containing a											// progress callback function.		);//	*********************************************// DCGetNativePicture reads a picture from the camera specified by CameraData and// returns the image in native(camera specific) format to the application. The native// image may be stored or transmitted by the application, and can later be retrieved and// processed by the DCProcNativePicture function.extern OSErr far pascal 		DCGetNativePicture(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera. 			DCPictInfoPtr	Picture,		// Information about the picture being retrieved. This should											// have been initialized by a previous call to											// DCGetCameraPictInfo.			DCImageIOCBPtr	Output,			// A pointer to a structure containing IO processing											// information for output data.			DCProgressCBPtr	Progress		// A pointer to a structure containing a progress callback											// function.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCGetNativePicture(			KDCCameraPtr		CameraData,	// Specifies the camera to use for this											// operation. This should have been											// initialized by a previous call to											// DCOpenCamera. 			DCCamMemType		CamMemType,	// One of the values defined in the											// DCCamMemType definition.			DCPictInfoPtr		Picture,	// Information about the picture being											// retrieved. This should have been											// initialized by a previous call to											// DCGetCameraPictInfo.			KDCImageIOCBPtr		Output,		// A pointer to a structure containing IO											// processing information for output											// data.			KDCProgressCBPtr	Progress	// A pointer to a structure containing a											// progress callback function.		);//	*********************************************// DCProcNativePicture reads a native mode image provided by the application,// processes it, and returns the output image to the application. The CameraData// parameter is used to determine the image processing parameters such as type of image// (grayscale, or RGB), rotation angle, and CRT correction that have been set a previous// call to DCSetImageProcessing. If DCSetImageProcessing has not been called, default// processing will be performed, however, the default image processing settings may be// system dependent. CameraData may point to any DCCamera structure initialized by// DCOpenCamera, including a structure initialize for no camera(see DCOpenCamera).extern OSErr far pascal 		DCProcNativePicture(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera.			DCPictInfoPtr	Picture,		// Information about the picture being retrieved. This should											// have been initialized by a previous call to											// DCGetNativePictInfo.			DCImageIOCBPtr	Input,			// A pointer to a structure containing IO processing											// information for input data.			DCImageIOCBPtr	Output,			// A pointer to a structure containing IO processing											// information for output data.			DCProgressCBPtr	Progress		// A pointer to a structure containing a progress callback											// function.		);//	For DC20/25	*********************************extern OSErr far pascal 		KDCProcNativePicture(			KDCCameraPtr		CameraData,	// Specifies the camera to use for this											// operation. This should have been											// initialized by a previous call to											// DCOpenCamera.			DCPictInfoPtr		Picture,	// Information about the picture being											// retrieved. This should have been											// initialized by a previous call to											// DCGetNativePictInfo.			KDCImageIOCBPtr		Input,		// A pointer to a structure containing IO											// processing information for input data.											// The IOFunc field of this DCImageIOCB											// structure must be NULL.			KDCImageIOCBPtr		Output,		// A pointer to a structure containing IO											// processing											// information for output data. The											// IOFunc field of this DCImageIOCB											// structure must be NULL.			KDCProgressCBPtr	Progress	// A pointer to a structure containing a											// progress callback function.		);//	*********************************************// DCLoadFirmware loads new firmware into the camera specified by CameraData.extern OSErr far pascal 		DCLoadFirmware(			DCCameraPtr		CameraData,		// Specifies the camera to use for this operation.  This											// structure should have been initialized by a previous call											// to DCOpenCamera.			VOIDPTR			Firmware,		// Buffer containing the new firmware to load into the camera.			ULONG			Length,			// The number of bytes to transfer.			DCProgressCBPtr	Progress		// A pointer to a structure containing a progress callback											// function.		);// DCMemFree de-allocates memory that was allocated as ThumbNailImage object in GenericInfoextern OSErr far pascal 		DCMemFree(			HCHARPTR		memptr					);#ifndef WINDOWS#if defined(powerc) || defined(__powerc) || defined(__POWERPC__) || defined(__CFM68K__)#pragma import reset#endif#if !(defined(powerc) || defined(__powerc) || defined(__POWERPC__))#pragma mpwc off	// at end of function declaration#endif#if defined(powerc) || defined (__powerc) || defined(__POWERPC__)#pragma options align=reset#endif#endif#ifdef __cplusplus}#endif 	// __cplusplus#endif	// _DC_SDK_LIB